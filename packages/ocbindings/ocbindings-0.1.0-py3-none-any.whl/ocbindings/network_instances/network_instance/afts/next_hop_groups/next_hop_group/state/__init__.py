# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance - based on the path /network-instances/network-instance/afts/next-hop-groups/next-hop-group/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state parameters relating to next-hop-groups.
  """
  __slots__ = ('_path_helper', '_extmethods', '__id','__next_hop_group_name','__programmed_id','__color','__backup_next_hop_group','__backup_active',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__id = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint64', is_config=False)
    self.__next_hop_group_name = YANGDynClass(base=str, is_leaf=True, yang_name="next-hop-group-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='string', is_config=False)
    self.__programmed_id = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="programmed-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint64', is_config=False)
    self.__color = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="color", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint64', is_config=False)
    self.__backup_next_hop_group = YANGDynClass(base=str, is_leaf=True, yang_name="backup-next-hop-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    self.__backup_active = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="backup-active", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'afts', 'next-hop-groups', 'next-hop-group', 'state']

  def _get_id(self):
    """
    Getter method for id, mapped from YANG variable /network_instances/network_instance/afts/next_hop_groups/next_hop_group/state/id (uint64)

    YANG Description: A unique identifier for the next-hop-group. This index
is not expected to be consistent across reboots, or
reprogramming of the next-hop-group. When updating
a next-hop-group, if the group is removed by the system
or assigned an alternate identifier, the system should
send telemetry notifications deleting the previous
identifier. If the identifier of the next-hop-group
is changed, all AFT entries that reference it must
also be updated.
    """
    return self.__id
      
  def _set_id(self, v, load=False):
    """
    Setter method for id, mapped from YANG variable /network_instances/network_instance/afts/next_hop_groups/next_hop_group/state/id (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_id() directly.

    YANG Description: A unique identifier for the next-hop-group. This index
is not expected to be consistent across reboots, or
reprogramming of the next-hop-group. When updating
a next-hop-group, if the group is removed by the system
or assigned an alternate identifier, the system should
send telemetry notifications deleting the previous
identifier. If the identifier of the next-hop-group
is changed, all AFT entries that reference it must
also be updated.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """id must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint64', is_config=False)""",
        })

    self.__id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_id(self):
    self.__id = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint64', is_config=False)


  def _get_next_hop_group_name(self):
    """
    Getter method for next_hop_group_name, mapped from YANG variable /network_instances/network_instance/afts/next_hop_groups/next_hop_group/state/next_hop_group_name (string)

    YANG Description: Where applicable, this leaf is a unique identifier string for the
next-hop-group. It is an arbitrary name for the group, that is
supported by vendors and is exposed for telemetry.
    """
    return self.__next_hop_group_name
      
  def _set_next_hop_group_name(self, v, load=False):
    """
    Setter method for next_hop_group_name, mapped from YANG variable /network_instances/network_instance/afts/next_hop_groups/next_hop_group/state/next_hop_group_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_next_hop_group_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_next_hop_group_name() directly.

    YANG Description: Where applicable, this leaf is a unique identifier string for the
next-hop-group. It is an arbitrary name for the group, that is
supported by vendors and is exposed for telemetry.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="next-hop-group-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """next_hop_group_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="next-hop-group-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='string', is_config=False)""",
        })

    self.__next_hop_group_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_next_hop_group_name(self):
    self.__next_hop_group_name = YANGDynClass(base=str, is_leaf=True, yang_name="next-hop-group-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='string', is_config=False)


  def _get_programmed_id(self):
    """
    Getter method for programmed_id, mapped from YANG variable /network_instances/network_instance/afts/next_hop_groups/next_hop_group/state/programmed_id (uint64)

    YANG Description: In some routing protocols or route injection mechanisms it
is possible to supply the ID of the next-hop-group via
configuration or the protocol itself. In some systems, it
may not be possible to use this same ID when returning the
NHG via telemetry.

This leaf reflects the ID of the next-hop group that was
used by the original programming mechanism.

This leaf allows a client to create an association between
a programmed next-hop's original ID, and the ID that is
extracted via telemetry as a key in the next-hop-group AFT
list.
    """
    return self.__programmed_id
      
  def _set_programmed_id(self, v, load=False):
    """
    Setter method for programmed_id, mapped from YANG variable /network_instances/network_instance/afts/next_hop_groups/next_hop_group/state/programmed_id (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_programmed_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_programmed_id() directly.

    YANG Description: In some routing protocols or route injection mechanisms it
is possible to supply the ID of the next-hop-group via
configuration or the protocol itself. In some systems, it
may not be possible to use this same ID when returning the
NHG via telemetry.

This leaf reflects the ID of the next-hop group that was
used by the original programming mechanism.

This leaf allows a client to create an association between
a programmed next-hop's original ID, and the ID that is
extracted via telemetry as a key in the next-hop-group AFT
list.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="programmed-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """programmed_id must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="programmed-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint64', is_config=False)""",
        })

    self.__programmed_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_programmed_id(self):
    self.__programmed_id = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="programmed-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint64', is_config=False)


  def _get_color(self):
    """
    Getter method for color, mapped from YANG variable /network_instances/network_instance/afts/next_hop_groups/next_hop_group/state/color (uint64)

    YANG Description: An arbitrary colour that is used as an identifier for the next-hop
group. Some next-hop resolutions may utilise the colour to select
the particular next-hop-group that a routing entry should be resolved
to. In this case, next-hop-group selection may be based on colour
matches rather than the protocol specified next-hop.

Regardless of whether the next-hop-group's specified colour is
used to select an AFT's active forwarding entry, the next-hop-group
referenced by an entry should be the currently active value.

Next-hop-groups that are installed on the system through a protocol
that allows injection of such entries (e.g., BGP using the SR-TE
Policy SAFI, or gRPC-based RIB programming) should have the colour
specified in the injecting protocol within this leaf.
    """
    return self.__color
      
  def _set_color(self, v, load=False):
    """
    Setter method for color, mapped from YANG variable /network_instances/network_instance/afts/next_hop_groups/next_hop_group/state/color (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_color is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_color() directly.

    YANG Description: An arbitrary colour that is used as an identifier for the next-hop
group. Some next-hop resolutions may utilise the colour to select
the particular next-hop-group that a routing entry should be resolved
to. In this case, next-hop-group selection may be based on colour
matches rather than the protocol specified next-hop.

Regardless of whether the next-hop-group's specified colour is
used to select an AFT's active forwarding entry, the next-hop-group
referenced by an entry should be the currently active value.

Next-hop-groups that are installed on the system through a protocol
that allows injection of such entries (e.g., BGP using the SR-TE
Policy SAFI, or gRPC-based RIB programming) should have the colour
specified in the injecting protocol within this leaf.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="color", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """color must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="color", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint64', is_config=False)""",
        })

    self.__color = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_color(self):
    self.__color = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="color", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint64', is_config=False)


  def _get_backup_next_hop_group(self):
    """
    Getter method for backup_next_hop_group, mapped from YANG variable /network_instances/network_instance/afts/next_hop_groups/next_hop_group/state/backup_next_hop_group (leafref)

    YANG Description: The backup next-hop-group for the current group. When all
entries within the next-hop group become unusable, the backup
next-hop group is used if specified.
    """
    return self.__backup_next_hop_group
      
  def _set_backup_next_hop_group(self, v, load=False):
    """
    Setter method for backup_next_hop_group, mapped from YANG variable /network_instances/network_instance/afts/next_hop_groups/next_hop_group/state/backup_next_hop_group (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_backup_next_hop_group is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_backup_next_hop_group() directly.

    YANG Description: The backup next-hop-group for the current group. When all
entries within the next-hop group become unusable, the backup
next-hop group is used if specified.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="backup-next-hop-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """backup_next_hop_group must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="backup-next-hop-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)""",
        })

    self.__backup_next_hop_group = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_backup_next_hop_group(self):
    self.__backup_next_hop_group = YANGDynClass(base=str, is_leaf=True, yang_name="backup-next-hop-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)


  def _get_backup_active(self):
    """
    Getter method for backup_active, mapped from YANG variable /network_instances/network_instance/afts/next_hop_groups/next_hop_group/state/backup_active (boolean)

    YANG Description: Set to true if and only if the device no longer forwards traffic
using the primary NextHops of this NextHopGroup and instead uses
the specified backup-next-hop-group. This leaf should be set to
false if the backup-next-hop-group is either unspecified or unused
by the device.
    """
    return self.__backup_active
      
  def _set_backup_active(self, v, load=False):
    """
    Setter method for backup_active, mapped from YANG variable /network_instances/network_instance/afts/next_hop_groups/next_hop_group/state/backup_active (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_backup_active is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_backup_active() directly.

    YANG Description: Set to true if and only if the device no longer forwards traffic
using the primary NextHops of this NextHopGroup and instead uses
the specified backup-next-hop-group. This leaf should be set to
false if the backup-next-hop-group is either unspecified or unused
by the device.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="backup-active", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """backup_active must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="backup-active", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)""",
        })

    self.__backup_active = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_backup_active(self):
    self.__backup_active = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="backup-active", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)

  id = __builtin__.property(_get_id)
  next_hop_group_name = __builtin__.property(_get_next_hop_group_name)
  programmed_id = __builtin__.property(_get_programmed_id)
  color = __builtin__.property(_get_color)
  backup_next_hop_group = __builtin__.property(_get_backup_next_hop_group)
  backup_active = __builtin__.property(_get_backup_active)


  _pyangbind_elements = OrderedDict([('id', id), ('next_hop_group_name', next_hop_group_name), ('programmed_id', programmed_id), ('color', color), ('backup_next_hop_group', backup_next_hop_group), ('backup_active', backup_active), ])


class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance-l2 - based on the path /network-instances/network-instance/afts/next-hop-groups/next-hop-group/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state parameters relating to next-hop-groups.
  """
  __slots__ = ('_path_helper', '_extmethods', '__id','__next_hop_group_name','__programmed_id','__color','__backup_next_hop_group','__backup_active',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__id = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint64', is_config=False)
    self.__next_hop_group_name = YANGDynClass(base=str, is_leaf=True, yang_name="next-hop-group-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='string', is_config=False)
    self.__programmed_id = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="programmed-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint64', is_config=False)
    self.__color = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="color", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint64', is_config=False)
    self.__backup_next_hop_group = YANGDynClass(base=str, is_leaf=True, yang_name="backup-next-hop-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    self.__backup_active = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="backup-active", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'afts', 'next-hop-groups', 'next-hop-group', 'state']

  def _get_id(self):
    """
    Getter method for id, mapped from YANG variable /network_instances/network_instance/afts/next_hop_groups/next_hop_group/state/id (uint64)

    YANG Description: A unique identifier for the next-hop-group. This index
is not expected to be consistent across reboots, or
reprogramming of the next-hop-group. When updating
a next-hop-group, if the group is removed by the system
or assigned an alternate identifier, the system should
send telemetry notifications deleting the previous
identifier. If the identifier of the next-hop-group
is changed, all AFT entries that reference it must
also be updated.
    """
    return self.__id
      
  def _set_id(self, v, load=False):
    """
    Setter method for id, mapped from YANG variable /network_instances/network_instance/afts/next_hop_groups/next_hop_group/state/id (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_id() directly.

    YANG Description: A unique identifier for the next-hop-group. This index
is not expected to be consistent across reboots, or
reprogramming of the next-hop-group. When updating
a next-hop-group, if the group is removed by the system
or assigned an alternate identifier, the system should
send telemetry notifications deleting the previous
identifier. If the identifier of the next-hop-group
is changed, all AFT entries that reference it must
also be updated.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """id must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint64', is_config=False)""",
        })

    self.__id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_id(self):
    self.__id = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint64', is_config=False)


  def _get_next_hop_group_name(self):
    """
    Getter method for next_hop_group_name, mapped from YANG variable /network_instances/network_instance/afts/next_hop_groups/next_hop_group/state/next_hop_group_name (string)

    YANG Description: Where applicable, this leaf is a unique identifier string for the
next-hop-group. It is an arbitrary name for the group, that is
supported by vendors and is exposed for telemetry.
    """
    return self.__next_hop_group_name
      
  def _set_next_hop_group_name(self, v, load=False):
    """
    Setter method for next_hop_group_name, mapped from YANG variable /network_instances/network_instance/afts/next_hop_groups/next_hop_group/state/next_hop_group_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_next_hop_group_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_next_hop_group_name() directly.

    YANG Description: Where applicable, this leaf is a unique identifier string for the
next-hop-group. It is an arbitrary name for the group, that is
supported by vendors and is exposed for telemetry.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="next-hop-group-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """next_hop_group_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="next-hop-group-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='string', is_config=False)""",
        })

    self.__next_hop_group_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_next_hop_group_name(self):
    self.__next_hop_group_name = YANGDynClass(base=str, is_leaf=True, yang_name="next-hop-group-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='string', is_config=False)


  def _get_programmed_id(self):
    """
    Getter method for programmed_id, mapped from YANG variable /network_instances/network_instance/afts/next_hop_groups/next_hop_group/state/programmed_id (uint64)

    YANG Description: In some routing protocols or route injection mechanisms it
is possible to supply the ID of the next-hop-group via
configuration or the protocol itself. In some systems, it
may not be possible to use this same ID when returning the
NHG via telemetry.

This leaf reflects the ID of the next-hop group that was
used by the original programming mechanism.

This leaf allows a client to create an association between
a programmed next-hop's original ID, and the ID that is
extracted via telemetry as a key in the next-hop-group AFT
list.
    """
    return self.__programmed_id
      
  def _set_programmed_id(self, v, load=False):
    """
    Setter method for programmed_id, mapped from YANG variable /network_instances/network_instance/afts/next_hop_groups/next_hop_group/state/programmed_id (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_programmed_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_programmed_id() directly.

    YANG Description: In some routing protocols or route injection mechanisms it
is possible to supply the ID of the next-hop-group via
configuration or the protocol itself. In some systems, it
may not be possible to use this same ID when returning the
NHG via telemetry.

This leaf reflects the ID of the next-hop group that was
used by the original programming mechanism.

This leaf allows a client to create an association between
a programmed next-hop's original ID, and the ID that is
extracted via telemetry as a key in the next-hop-group AFT
list.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="programmed-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """programmed_id must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="programmed-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint64', is_config=False)""",
        })

    self.__programmed_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_programmed_id(self):
    self.__programmed_id = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="programmed-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint64', is_config=False)


  def _get_color(self):
    """
    Getter method for color, mapped from YANG variable /network_instances/network_instance/afts/next_hop_groups/next_hop_group/state/color (uint64)

    YANG Description: An arbitrary colour that is used as an identifier for the next-hop
group. Some next-hop resolutions may utilise the colour to select
the particular next-hop-group that a routing entry should be resolved
to. In this case, next-hop-group selection may be based on colour
matches rather than the protocol specified next-hop.

Regardless of whether the next-hop-group's specified colour is
used to select an AFT's active forwarding entry, the next-hop-group
referenced by an entry should be the currently active value.

Next-hop-groups that are installed on the system through a protocol
that allows injection of such entries (e.g., BGP using the SR-TE
Policy SAFI, or gRPC-based RIB programming) should have the colour
specified in the injecting protocol within this leaf.
    """
    return self.__color
      
  def _set_color(self, v, load=False):
    """
    Setter method for color, mapped from YANG variable /network_instances/network_instance/afts/next_hop_groups/next_hop_group/state/color (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_color is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_color() directly.

    YANG Description: An arbitrary colour that is used as an identifier for the next-hop
group. Some next-hop resolutions may utilise the colour to select
the particular next-hop-group that a routing entry should be resolved
to. In this case, next-hop-group selection may be based on colour
matches rather than the protocol specified next-hop.

Regardless of whether the next-hop-group's specified colour is
used to select an AFT's active forwarding entry, the next-hop-group
referenced by an entry should be the currently active value.

Next-hop-groups that are installed on the system through a protocol
that allows injection of such entries (e.g., BGP using the SR-TE
Policy SAFI, or gRPC-based RIB programming) should have the colour
specified in the injecting protocol within this leaf.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="color", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """color must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="color", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint64', is_config=False)""",
        })

    self.__color = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_color(self):
    self.__color = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="color", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint64', is_config=False)


  def _get_backup_next_hop_group(self):
    """
    Getter method for backup_next_hop_group, mapped from YANG variable /network_instances/network_instance/afts/next_hop_groups/next_hop_group/state/backup_next_hop_group (leafref)

    YANG Description: The backup next-hop-group for the current group. When all
entries within the next-hop group become unusable, the backup
next-hop group is used if specified.
    """
    return self.__backup_next_hop_group
      
  def _set_backup_next_hop_group(self, v, load=False):
    """
    Setter method for backup_next_hop_group, mapped from YANG variable /network_instances/network_instance/afts/next_hop_groups/next_hop_group/state/backup_next_hop_group (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_backup_next_hop_group is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_backup_next_hop_group() directly.

    YANG Description: The backup next-hop-group for the current group. When all
entries within the next-hop group become unusable, the backup
next-hop group is used if specified.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="backup-next-hop-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """backup_next_hop_group must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="backup-next-hop-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)""",
        })

    self.__backup_next_hop_group = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_backup_next_hop_group(self):
    self.__backup_next_hop_group = YANGDynClass(base=str, is_leaf=True, yang_name="backup-next-hop-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)


  def _get_backup_active(self):
    """
    Getter method for backup_active, mapped from YANG variable /network_instances/network_instance/afts/next_hop_groups/next_hop_group/state/backup_active (boolean)

    YANG Description: Set to true if and only if the device no longer forwards traffic
using the primary NextHops of this NextHopGroup and instead uses
the specified backup-next-hop-group. This leaf should be set to
false if the backup-next-hop-group is either unspecified or unused
by the device.
    """
    return self.__backup_active
      
  def _set_backup_active(self, v, load=False):
    """
    Setter method for backup_active, mapped from YANG variable /network_instances/network_instance/afts/next_hop_groups/next_hop_group/state/backup_active (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_backup_active is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_backup_active() directly.

    YANG Description: Set to true if and only if the device no longer forwards traffic
using the primary NextHops of this NextHopGroup and instead uses
the specified backup-next-hop-group. This leaf should be set to
false if the backup-next-hop-group is either unspecified or unused
by the device.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="backup-active", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """backup_active must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="backup-active", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)""",
        })

    self.__backup_active = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_backup_active(self):
    self.__backup_active = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="backup-active", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)

  id = __builtin__.property(_get_id)
  next_hop_group_name = __builtin__.property(_get_next_hop_group_name)
  programmed_id = __builtin__.property(_get_programmed_id)
  color = __builtin__.property(_get_color)
  backup_next_hop_group = __builtin__.property(_get_backup_next_hop_group)
  backup_active = __builtin__.property(_get_backup_active)


  _pyangbind_elements = OrderedDict([('id', id), ('next_hop_group_name', next_hop_group_name), ('programmed_id', programmed_id), ('color', color), ('backup_next_hop_group', backup_next_hop_group), ('backup_active', backup_active), ])


class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance - based on the path /network-instances/network-instance/afts/next-hop-groups/next-hop-group/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state parameters relating to next-hop-groups.
  """
  __slots__ = ('_path_helper', '_extmethods', '__id','__next_hop_group_name','__programmed_id','__color','__backup_next_hop_group','__backup_active',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__id = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint64', is_config=False)
    self.__next_hop_group_name = YANGDynClass(base=str, is_leaf=True, yang_name="next-hop-group-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='string', is_config=False)
    self.__programmed_id = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="programmed-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint64', is_config=False)
    self.__color = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="color", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint64', is_config=False)
    self.__backup_next_hop_group = YANGDynClass(base=str, is_leaf=True, yang_name="backup-next-hop-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    self.__backup_active = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="backup-active", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'afts', 'next-hop-groups', 'next-hop-group', 'state']

  def _get_id(self):
    """
    Getter method for id, mapped from YANG variable /network_instances/network_instance/afts/next_hop_groups/next_hop_group/state/id (uint64)

    YANG Description: A unique identifier for the next-hop-group. This index
is not expected to be consistent across reboots, or
reprogramming of the next-hop-group. When updating
a next-hop-group, if the group is removed by the system
or assigned an alternate identifier, the system should
send telemetry notifications deleting the previous
identifier. If the identifier of the next-hop-group
is changed, all AFT entries that reference it must
also be updated.
    """
    return self.__id
      
  def _set_id(self, v, load=False):
    """
    Setter method for id, mapped from YANG variable /network_instances/network_instance/afts/next_hop_groups/next_hop_group/state/id (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_id() directly.

    YANG Description: A unique identifier for the next-hop-group. This index
is not expected to be consistent across reboots, or
reprogramming of the next-hop-group. When updating
a next-hop-group, if the group is removed by the system
or assigned an alternate identifier, the system should
send telemetry notifications deleting the previous
identifier. If the identifier of the next-hop-group
is changed, all AFT entries that reference it must
also be updated.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """id must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint64', is_config=False)""",
        })

    self.__id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_id(self):
    self.__id = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint64', is_config=False)


  def _get_next_hop_group_name(self):
    """
    Getter method for next_hop_group_name, mapped from YANG variable /network_instances/network_instance/afts/next_hop_groups/next_hop_group/state/next_hop_group_name (string)

    YANG Description: Where applicable, this leaf is a unique identifier string for the
next-hop-group. It is an arbitrary name for the group, that is
supported by vendors and is exposed for telemetry.
    """
    return self.__next_hop_group_name
      
  def _set_next_hop_group_name(self, v, load=False):
    """
    Setter method for next_hop_group_name, mapped from YANG variable /network_instances/network_instance/afts/next_hop_groups/next_hop_group/state/next_hop_group_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_next_hop_group_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_next_hop_group_name() directly.

    YANG Description: Where applicable, this leaf is a unique identifier string for the
next-hop-group. It is an arbitrary name for the group, that is
supported by vendors and is exposed for telemetry.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="next-hop-group-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """next_hop_group_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="next-hop-group-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='string', is_config=False)""",
        })

    self.__next_hop_group_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_next_hop_group_name(self):
    self.__next_hop_group_name = YANGDynClass(base=str, is_leaf=True, yang_name="next-hop-group-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='string', is_config=False)


  def _get_programmed_id(self):
    """
    Getter method for programmed_id, mapped from YANG variable /network_instances/network_instance/afts/next_hop_groups/next_hop_group/state/programmed_id (uint64)

    YANG Description: In some routing protocols or route injection mechanisms it
is possible to supply the ID of the next-hop-group via
configuration or the protocol itself. In some systems, it
may not be possible to use this same ID when returning the
NHG via telemetry.

This leaf reflects the ID of the next-hop group that was
used by the original programming mechanism.

This leaf allows a client to create an association between
a programmed next-hop's original ID, and the ID that is
extracted via telemetry as a key in the next-hop-group AFT
list.
    """
    return self.__programmed_id
      
  def _set_programmed_id(self, v, load=False):
    """
    Setter method for programmed_id, mapped from YANG variable /network_instances/network_instance/afts/next_hop_groups/next_hop_group/state/programmed_id (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_programmed_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_programmed_id() directly.

    YANG Description: In some routing protocols or route injection mechanisms it
is possible to supply the ID of the next-hop-group via
configuration or the protocol itself. In some systems, it
may not be possible to use this same ID when returning the
NHG via telemetry.

This leaf reflects the ID of the next-hop group that was
used by the original programming mechanism.

This leaf allows a client to create an association between
a programmed next-hop's original ID, and the ID that is
extracted via telemetry as a key in the next-hop-group AFT
list.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="programmed-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """programmed_id must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="programmed-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint64', is_config=False)""",
        })

    self.__programmed_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_programmed_id(self):
    self.__programmed_id = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="programmed-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint64', is_config=False)


  def _get_color(self):
    """
    Getter method for color, mapped from YANG variable /network_instances/network_instance/afts/next_hop_groups/next_hop_group/state/color (uint64)

    YANG Description: An arbitrary colour that is used as an identifier for the next-hop
group. Some next-hop resolutions may utilise the colour to select
the particular next-hop-group that a routing entry should be resolved
to. In this case, next-hop-group selection may be based on colour
matches rather than the protocol specified next-hop.

Regardless of whether the next-hop-group's specified colour is
used to select an AFT's active forwarding entry, the next-hop-group
referenced by an entry should be the currently active value.

Next-hop-groups that are installed on the system through a protocol
that allows injection of such entries (e.g., BGP using the SR-TE
Policy SAFI, or gRPC-based RIB programming) should have the colour
specified in the injecting protocol within this leaf.
    """
    return self.__color
      
  def _set_color(self, v, load=False):
    """
    Setter method for color, mapped from YANG variable /network_instances/network_instance/afts/next_hop_groups/next_hop_group/state/color (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_color is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_color() directly.

    YANG Description: An arbitrary colour that is used as an identifier for the next-hop
group. Some next-hop resolutions may utilise the colour to select
the particular next-hop-group that a routing entry should be resolved
to. In this case, next-hop-group selection may be based on colour
matches rather than the protocol specified next-hop.

Regardless of whether the next-hop-group's specified colour is
used to select an AFT's active forwarding entry, the next-hop-group
referenced by an entry should be the currently active value.

Next-hop-groups that are installed on the system through a protocol
that allows injection of such entries (e.g., BGP using the SR-TE
Policy SAFI, or gRPC-based RIB programming) should have the colour
specified in the injecting protocol within this leaf.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="color", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """color must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="color", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint64', is_config=False)""",
        })

    self.__color = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_color(self):
    self.__color = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="color", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint64', is_config=False)


  def _get_backup_next_hop_group(self):
    """
    Getter method for backup_next_hop_group, mapped from YANG variable /network_instances/network_instance/afts/next_hop_groups/next_hop_group/state/backup_next_hop_group (leafref)

    YANG Description: The backup next-hop-group for the current group. When all
entries within the next-hop group become unusable, the backup
next-hop group is used if specified.
    """
    return self.__backup_next_hop_group
      
  def _set_backup_next_hop_group(self, v, load=False):
    """
    Setter method for backup_next_hop_group, mapped from YANG variable /network_instances/network_instance/afts/next_hop_groups/next_hop_group/state/backup_next_hop_group (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_backup_next_hop_group is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_backup_next_hop_group() directly.

    YANG Description: The backup next-hop-group for the current group. When all
entries within the next-hop group become unusable, the backup
next-hop group is used if specified.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="backup-next-hop-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """backup_next_hop_group must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="backup-next-hop-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)""",
        })

    self.__backup_next_hop_group = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_backup_next_hop_group(self):
    self.__backup_next_hop_group = YANGDynClass(base=str, is_leaf=True, yang_name="backup-next-hop-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)


  def _get_backup_active(self):
    """
    Getter method for backup_active, mapped from YANG variable /network_instances/network_instance/afts/next_hop_groups/next_hop_group/state/backup_active (boolean)

    YANG Description: Set to true if and only if the device no longer forwards traffic
using the primary NextHops of this NextHopGroup and instead uses
the specified backup-next-hop-group. This leaf should be set to
false if the backup-next-hop-group is either unspecified or unused
by the device.
    """
    return self.__backup_active
      
  def _set_backup_active(self, v, load=False):
    """
    Setter method for backup_active, mapped from YANG variable /network_instances/network_instance/afts/next_hop_groups/next_hop_group/state/backup_active (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_backup_active is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_backup_active() directly.

    YANG Description: Set to true if and only if the device no longer forwards traffic
using the primary NextHops of this NextHopGroup and instead uses
the specified backup-next-hop-group. This leaf should be set to
false if the backup-next-hop-group is either unspecified or unused
by the device.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="backup-active", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """backup_active must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="backup-active", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)""",
        })

    self.__backup_active = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_backup_active(self):
    self.__backup_active = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="backup-active", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)

  id = __builtin__.property(_get_id)
  next_hop_group_name = __builtin__.property(_get_next_hop_group_name)
  programmed_id = __builtin__.property(_get_programmed_id)
  color = __builtin__.property(_get_color)
  backup_next_hop_group = __builtin__.property(_get_backup_next_hop_group)
  backup_active = __builtin__.property(_get_backup_active)


  _pyangbind_elements = OrderedDict([('id', id), ('next_hop_group_name', next_hop_group_name), ('programmed_id', programmed_id), ('color', color), ('backup_next_hop_group', backup_next_hop_group), ('backup_active', backup_active), ])


class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance-l2 - based on the path /network-instances/network-instance/afts/next-hop-groups/next-hop-group/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state parameters relating to next-hop-groups.
  """
  __slots__ = ('_path_helper', '_extmethods', '__id','__next_hop_group_name','__programmed_id','__color','__backup_next_hop_group','__backup_active',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__id = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint64', is_config=False)
    self.__next_hop_group_name = YANGDynClass(base=str, is_leaf=True, yang_name="next-hop-group-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='string', is_config=False)
    self.__programmed_id = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="programmed-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint64', is_config=False)
    self.__color = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="color", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint64', is_config=False)
    self.__backup_next_hop_group = YANGDynClass(base=str, is_leaf=True, yang_name="backup-next-hop-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    self.__backup_active = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="backup-active", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'afts', 'next-hop-groups', 'next-hop-group', 'state']

  def _get_id(self):
    """
    Getter method for id, mapped from YANG variable /network_instances/network_instance/afts/next_hop_groups/next_hop_group/state/id (uint64)

    YANG Description: A unique identifier for the next-hop-group. This index
is not expected to be consistent across reboots, or
reprogramming of the next-hop-group. When updating
a next-hop-group, if the group is removed by the system
or assigned an alternate identifier, the system should
send telemetry notifications deleting the previous
identifier. If the identifier of the next-hop-group
is changed, all AFT entries that reference it must
also be updated.
    """
    return self.__id
      
  def _set_id(self, v, load=False):
    """
    Setter method for id, mapped from YANG variable /network_instances/network_instance/afts/next_hop_groups/next_hop_group/state/id (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_id() directly.

    YANG Description: A unique identifier for the next-hop-group. This index
is not expected to be consistent across reboots, or
reprogramming of the next-hop-group. When updating
a next-hop-group, if the group is removed by the system
or assigned an alternate identifier, the system should
send telemetry notifications deleting the previous
identifier. If the identifier of the next-hop-group
is changed, all AFT entries that reference it must
also be updated.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """id must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint64', is_config=False)""",
        })

    self.__id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_id(self):
    self.__id = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint64', is_config=False)


  def _get_next_hop_group_name(self):
    """
    Getter method for next_hop_group_name, mapped from YANG variable /network_instances/network_instance/afts/next_hop_groups/next_hop_group/state/next_hop_group_name (string)

    YANG Description: Where applicable, this leaf is a unique identifier string for the
next-hop-group. It is an arbitrary name for the group, that is
supported by vendors and is exposed for telemetry.
    """
    return self.__next_hop_group_name
      
  def _set_next_hop_group_name(self, v, load=False):
    """
    Setter method for next_hop_group_name, mapped from YANG variable /network_instances/network_instance/afts/next_hop_groups/next_hop_group/state/next_hop_group_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_next_hop_group_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_next_hop_group_name() directly.

    YANG Description: Where applicable, this leaf is a unique identifier string for the
next-hop-group. It is an arbitrary name for the group, that is
supported by vendors and is exposed for telemetry.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="next-hop-group-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """next_hop_group_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="next-hop-group-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='string', is_config=False)""",
        })

    self.__next_hop_group_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_next_hop_group_name(self):
    self.__next_hop_group_name = YANGDynClass(base=str, is_leaf=True, yang_name="next-hop-group-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='string', is_config=False)


  def _get_programmed_id(self):
    """
    Getter method for programmed_id, mapped from YANG variable /network_instances/network_instance/afts/next_hop_groups/next_hop_group/state/programmed_id (uint64)

    YANG Description: In some routing protocols or route injection mechanisms it
is possible to supply the ID of the next-hop-group via
configuration or the protocol itself. In some systems, it
may not be possible to use this same ID when returning the
NHG via telemetry.

This leaf reflects the ID of the next-hop group that was
used by the original programming mechanism.

This leaf allows a client to create an association between
a programmed next-hop's original ID, and the ID that is
extracted via telemetry as a key in the next-hop-group AFT
list.
    """
    return self.__programmed_id
      
  def _set_programmed_id(self, v, load=False):
    """
    Setter method for programmed_id, mapped from YANG variable /network_instances/network_instance/afts/next_hop_groups/next_hop_group/state/programmed_id (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_programmed_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_programmed_id() directly.

    YANG Description: In some routing protocols or route injection mechanisms it
is possible to supply the ID of the next-hop-group via
configuration or the protocol itself. In some systems, it
may not be possible to use this same ID when returning the
NHG via telemetry.

This leaf reflects the ID of the next-hop group that was
used by the original programming mechanism.

This leaf allows a client to create an association between
a programmed next-hop's original ID, and the ID that is
extracted via telemetry as a key in the next-hop-group AFT
list.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="programmed-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """programmed_id must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="programmed-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint64', is_config=False)""",
        })

    self.__programmed_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_programmed_id(self):
    self.__programmed_id = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="programmed-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint64', is_config=False)


  def _get_color(self):
    """
    Getter method for color, mapped from YANG variable /network_instances/network_instance/afts/next_hop_groups/next_hop_group/state/color (uint64)

    YANG Description: An arbitrary colour that is used as an identifier for the next-hop
group. Some next-hop resolutions may utilise the colour to select
the particular next-hop-group that a routing entry should be resolved
to. In this case, next-hop-group selection may be based on colour
matches rather than the protocol specified next-hop.

Regardless of whether the next-hop-group's specified colour is
used to select an AFT's active forwarding entry, the next-hop-group
referenced by an entry should be the currently active value.

Next-hop-groups that are installed on the system through a protocol
that allows injection of such entries (e.g., BGP using the SR-TE
Policy SAFI, or gRPC-based RIB programming) should have the colour
specified in the injecting protocol within this leaf.
    """
    return self.__color
      
  def _set_color(self, v, load=False):
    """
    Setter method for color, mapped from YANG variable /network_instances/network_instance/afts/next_hop_groups/next_hop_group/state/color (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_color is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_color() directly.

    YANG Description: An arbitrary colour that is used as an identifier for the next-hop
group. Some next-hop resolutions may utilise the colour to select
the particular next-hop-group that a routing entry should be resolved
to. In this case, next-hop-group selection may be based on colour
matches rather than the protocol specified next-hop.

Regardless of whether the next-hop-group's specified colour is
used to select an AFT's active forwarding entry, the next-hop-group
referenced by an entry should be the currently active value.

Next-hop-groups that are installed on the system through a protocol
that allows injection of such entries (e.g., BGP using the SR-TE
Policy SAFI, or gRPC-based RIB programming) should have the colour
specified in the injecting protocol within this leaf.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="color", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """color must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="color", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint64', is_config=False)""",
        })

    self.__color = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_color(self):
    self.__color = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="color", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='uint64', is_config=False)


  def _get_backup_next_hop_group(self):
    """
    Getter method for backup_next_hop_group, mapped from YANG variable /network_instances/network_instance/afts/next_hop_groups/next_hop_group/state/backup_next_hop_group (leafref)

    YANG Description: The backup next-hop-group for the current group. When all
entries within the next-hop group become unusable, the backup
next-hop group is used if specified.
    """
    return self.__backup_next_hop_group
      
  def _set_backup_next_hop_group(self, v, load=False):
    """
    Setter method for backup_next_hop_group, mapped from YANG variable /network_instances/network_instance/afts/next_hop_groups/next_hop_group/state/backup_next_hop_group (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_backup_next_hop_group is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_backup_next_hop_group() directly.

    YANG Description: The backup next-hop-group for the current group. When all
entries within the next-hop group become unusable, the backup
next-hop group is used if specified.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="backup-next-hop-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """backup_next_hop_group must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="backup-next-hop-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)""",
        })

    self.__backup_next_hop_group = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_backup_next_hop_group(self):
    self.__backup_next_hop_group = YANGDynClass(base=str, is_leaf=True, yang_name="backup-next-hop-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=False)


  def _get_backup_active(self):
    """
    Getter method for backup_active, mapped from YANG variable /network_instances/network_instance/afts/next_hop_groups/next_hop_group/state/backup_active (boolean)

    YANG Description: Set to true if and only if the device no longer forwards traffic
using the primary NextHops of this NextHopGroup and instead uses
the specified backup-next-hop-group. This leaf should be set to
false if the backup-next-hop-group is either unspecified or unused
by the device.
    """
    return self.__backup_active
      
  def _set_backup_active(self, v, load=False):
    """
    Setter method for backup_active, mapped from YANG variable /network_instances/network_instance/afts/next_hop_groups/next_hop_group/state/backup_active (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_backup_active is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_backup_active() directly.

    YANG Description: Set to true if and only if the device no longer forwards traffic
using the primary NextHops of this NextHopGroup and instead uses
the specified backup-next-hop-group. This leaf should be set to
false if the backup-next-hop-group is either unspecified or unused
by the device.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="backup-active", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """backup_active must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="backup-active", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)""",
        })

    self.__backup_active = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_backup_active(self):
    self.__backup_active = YANGDynClass(base=YANGBool, default=YANGBool("false"), is_leaf=True, yang_name="backup-active", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='boolean', is_config=False)

  id = __builtin__.property(_get_id)
  next_hop_group_name = __builtin__.property(_get_next_hop_group_name)
  programmed_id = __builtin__.property(_get_programmed_id)
  color = __builtin__.property(_get_color)
  backup_next_hop_group = __builtin__.property(_get_backup_next_hop_group)
  backup_active = __builtin__.property(_get_backup_active)


  _pyangbind_elements = OrderedDict([('id', id), ('next_hop_group_name', next_hop_group_name), ('programmed_id', programmed_id), ('color', color), ('backup_next_hop_group', backup_next_hop_group), ('backup_active', backup_active), ])


