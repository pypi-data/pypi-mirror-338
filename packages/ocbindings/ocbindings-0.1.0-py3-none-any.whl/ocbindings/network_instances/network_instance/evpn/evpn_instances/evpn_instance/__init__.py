# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
from . import config
from . import state
from . import import_export_policy
from . import vxlan
from . import pbb
class evpn_instance(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance - based on the path /network-instances/network-instance/evpn/evpn-instances/evpn-instance. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: An EVPN instance (EVI) comprises Customer Edge devices
(CEs) that are connected to Provider Edge devices (PEs). One
network instance (representing a single MAC VRF) can
participate in one or more EVPN Instances. For each EVPN instance
in which the forwarding instance participates an
EVPN instance needs to be created.

The model supports BGP MPLS-Based Ethernet VPNs
(RFC 7432) and  Network Virtualization Overlay Solution
Using Ethernet VPN (RFC 8365). The use of MPLS or VXLAN
is selected via the encapsulation container within
EVPN instance. One use case requiring participating in
two EVIs is the Interconnect Solution for EVPN Overlay
networks (see draft-ietf-bess-dci-evpn-overlay-10)
  """
  __slots__ = ('_path_helper', '_extmethods', '__evi','__config','__state','__import_export_policy','__vxlan','__pbb',)

  _yang_name = 'evpn-instance'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__evi = YANGDynClass(base=str, is_leaf=True, yang_name="evi", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=True)
    self.__config = YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    self.__import_export_policy = YANGDynClass(base=import_export_policy.import_export_policy, is_container='container', yang_name="import-export-policy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)
    self.__vxlan = YANGDynClass(base=vxlan.vxlan, is_container='container', yang_name="vxlan", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)
    self.__pbb = YANGDynClass(base=pbb.pbb, is_container='container', yang_name="pbb", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'evpn', 'evpn-instances', 'evpn-instance']

  def _get_evi(self):
    """
    Getter method for evi, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/evi (leafref)

    YANG Description: EVPN Intance (EVI) identifier
    """
    return self.__evi
      
  def _set_evi(self, v, load=False):
    """
    Setter method for evi, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/evi (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_evi is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_evi() directly.

    YANG Description: EVPN Intance (EVI) identifier
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="evi", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """evi must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="evi", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=True)""",
        })

    self.__evi = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_evi(self):
    self.__evi = YANGDynClass(base=str, is_leaf=True, yang_name="evi", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=True)


  def _get_config(self):
    """
    Getter method for config, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/config (container)

    YANG Description: EVPN Configuration parameters for
the participation in an EVPN Intance.
    """
    return self.__config
      
  def _set_config(self, v, load=False):
    """
    Setter method for config, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config() directly.

    YANG Description: EVPN Configuration parameters for
the participation in an EVPN Intance.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)""",
        })

    self.__config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config(self):
    self.__config = YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/state (container)

    YANG Description: EVPN State parameters for
the participation in an EVPN Intance.
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: EVPN State parameters for
the participation in an EVPN Intance.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)


  def _get_import_export_policy(self):
    """
    Getter method for import_export_policy, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/import_export_policy (container)

    YANG Description: Top container to set the import and export policies
associated with a EVI
    """
    return self.__import_export_policy
      
  def _set_import_export_policy(self, v, load=False):
    """
    Setter method for import_export_policy, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/import_export_policy (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_import_export_policy is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_import_export_policy() directly.

    YANG Description: Top container to set the import and export policies
associated with a EVI
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=import_export_policy.import_export_policy, is_container='container', yang_name="import-export-policy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """import_export_policy must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=import_export_policy.import_export_policy, is_container='container', yang_name="import-export-policy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)""",
        })

    self.__import_export_policy = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_import_export_policy(self):
    self.__import_export_policy = YANGDynClass(base=import_export_policy.import_export_policy, is_container='container', yang_name="import-export-policy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)


  def _get_vxlan(self):
    """
    Getter method for vxlan, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/vxlan (container)

    YANG Description: Top container related to Overlay Solution in EVPN.
    """
    return self.__vxlan
      
  def _set_vxlan(self, v, load=False):
    """
    Setter method for vxlan, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/vxlan (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_vxlan is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_vxlan() directly.

    YANG Description: Top container related to Overlay Solution in EVPN.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=vxlan.vxlan, is_container='container', yang_name="vxlan", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """vxlan must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=vxlan.vxlan, is_container='container', yang_name="vxlan", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)""",
        })

    self.__vxlan = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_vxlan(self):
    self.__vxlan = YANGDynClass(base=vxlan.vxlan, is_container='container', yang_name="vxlan", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)


  def _get_pbb(self):
    """
    Getter method for pbb, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/pbb (container)

    YANG Description: Container for EVPN with PBB PE functionality
for scaling over MPLS,
    """
    return self.__pbb
      
  def _set_pbb(self, v, load=False):
    """
    Setter method for pbb, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/pbb (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_pbb is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_pbb() directly.

    YANG Description: Container for EVPN with PBB PE functionality
for scaling over MPLS,
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=pbb.pbb, is_container='container', yang_name="pbb", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """pbb must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=pbb.pbb, is_container='container', yang_name="pbb", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)""",
        })

    self.__pbb = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_pbb(self):
    self.__pbb = YANGDynClass(base=pbb.pbb, is_container='container', yang_name="pbb", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)

  evi = __builtin__.property(_get_evi, _set_evi)
  config = __builtin__.property(_get_config, _set_config)
  state = __builtin__.property(_get_state)
  import_export_policy = __builtin__.property(_get_import_export_policy, _set_import_export_policy)
  vxlan = __builtin__.property(_get_vxlan, _set_vxlan)
  pbb = __builtin__.property(_get_pbb, _set_pbb)


  _pyangbind_elements = OrderedDict([('evi', evi), ('config', config), ('state', state), ('import_export_policy', import_export_policy), ('vxlan', vxlan), ('pbb', pbb), ])


from . import config
from . import state
from . import import_export_policy
from . import vxlan
from . import pbb
class evpn_instance(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance-l2 - based on the path /network-instances/network-instance/evpn/evpn-instances/evpn-instance. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: An EVPN instance (EVI) comprises Customer Edge devices
(CEs) that are connected to Provider Edge devices (PEs). One
network instance (representing a single MAC VRF) can
participate in one or more EVPN Instances. For each EVPN instance
in which the forwarding instance participates an
EVPN instance needs to be created.

The model supports BGP MPLS-Based Ethernet VPNs
(RFC 7432) and  Network Virtualization Overlay Solution
Using Ethernet VPN (RFC 8365). The use of MPLS or VXLAN
is selected via the encapsulation container within
EVPN instance. One use case requiring participating in
two EVIs is the Interconnect Solution for EVPN Overlay
networks (see draft-ietf-bess-dci-evpn-overlay-10)
  """
  __slots__ = ('_path_helper', '_extmethods', '__evi','__config','__state','__import_export_policy','__vxlan','__pbb',)

  _yang_name = 'evpn-instance'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__evi = YANGDynClass(base=str, is_leaf=True, yang_name="evi", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=True)
    self.__config = YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    self.__import_export_policy = YANGDynClass(base=import_export_policy.import_export_policy, is_container='container', yang_name="import-export-policy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)
    self.__vxlan = YANGDynClass(base=vxlan.vxlan, is_container='container', yang_name="vxlan", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)
    self.__pbb = YANGDynClass(base=pbb.pbb, is_container='container', yang_name="pbb", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'evpn', 'evpn-instances', 'evpn-instance']

  def _get_evi(self):
    """
    Getter method for evi, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/evi (leafref)

    YANG Description: EVPN Intance (EVI) identifier
    """
    return self.__evi
      
  def _set_evi(self, v, load=False):
    """
    Setter method for evi, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/evi (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_evi is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_evi() directly.

    YANG Description: EVPN Intance (EVI) identifier
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="evi", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """evi must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="evi", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=True)""",
        })

    self.__evi = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_evi(self):
    self.__evi = YANGDynClass(base=str, is_leaf=True, yang_name="evi", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=True)


  def _get_config(self):
    """
    Getter method for config, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/config (container)

    YANG Description: EVPN Configuration parameters for
the participation in an EVPN Intance.
    """
    return self.__config
      
  def _set_config(self, v, load=False):
    """
    Setter method for config, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config() directly.

    YANG Description: EVPN Configuration parameters for
the participation in an EVPN Intance.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)""",
        })

    self.__config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config(self):
    self.__config = YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/state (container)

    YANG Description: EVPN State parameters for
the participation in an EVPN Intance.
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: EVPN State parameters for
the participation in an EVPN Intance.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)


  def _get_import_export_policy(self):
    """
    Getter method for import_export_policy, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/import_export_policy (container)

    YANG Description: Top container to set the import and export policies
associated with a EVI
    """
    return self.__import_export_policy
      
  def _set_import_export_policy(self, v, load=False):
    """
    Setter method for import_export_policy, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/import_export_policy (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_import_export_policy is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_import_export_policy() directly.

    YANG Description: Top container to set the import and export policies
associated with a EVI
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=import_export_policy.import_export_policy, is_container='container', yang_name="import-export-policy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """import_export_policy must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=import_export_policy.import_export_policy, is_container='container', yang_name="import-export-policy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)""",
        })

    self.__import_export_policy = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_import_export_policy(self):
    self.__import_export_policy = YANGDynClass(base=import_export_policy.import_export_policy, is_container='container', yang_name="import-export-policy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)


  def _get_vxlan(self):
    """
    Getter method for vxlan, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/vxlan (container)

    YANG Description: Top container related to Overlay Solution in EVPN.
    """
    return self.__vxlan
      
  def _set_vxlan(self, v, load=False):
    """
    Setter method for vxlan, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/vxlan (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_vxlan is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_vxlan() directly.

    YANG Description: Top container related to Overlay Solution in EVPN.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=vxlan.vxlan, is_container='container', yang_name="vxlan", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """vxlan must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=vxlan.vxlan, is_container='container', yang_name="vxlan", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)""",
        })

    self.__vxlan = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_vxlan(self):
    self.__vxlan = YANGDynClass(base=vxlan.vxlan, is_container='container', yang_name="vxlan", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)


  def _get_pbb(self):
    """
    Getter method for pbb, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/pbb (container)

    YANG Description: Container for EVPN with PBB PE functionality
for scaling over MPLS,
    """
    return self.__pbb
      
  def _set_pbb(self, v, load=False):
    """
    Setter method for pbb, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/pbb (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_pbb is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_pbb() directly.

    YANG Description: Container for EVPN with PBB PE functionality
for scaling over MPLS,
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=pbb.pbb, is_container='container', yang_name="pbb", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """pbb must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=pbb.pbb, is_container='container', yang_name="pbb", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)""",
        })

    self.__pbb = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_pbb(self):
    self.__pbb = YANGDynClass(base=pbb.pbb, is_container='container', yang_name="pbb", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)

  evi = __builtin__.property(_get_evi, _set_evi)
  config = __builtin__.property(_get_config, _set_config)
  state = __builtin__.property(_get_state)
  import_export_policy = __builtin__.property(_get_import_export_policy, _set_import_export_policy)
  vxlan = __builtin__.property(_get_vxlan, _set_vxlan)
  pbb = __builtin__.property(_get_pbb, _set_pbb)


  _pyangbind_elements = OrderedDict([('evi', evi), ('config', config), ('state', state), ('import_export_policy', import_export_policy), ('vxlan', vxlan), ('pbb', pbb), ])


from . import config
from . import state
from . import import_export_policy
from . import vxlan
from . import pbb
class evpn_instance(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance - based on the path /network-instances/network-instance/evpn/evpn-instances/evpn-instance. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: An EVPN instance (EVI) comprises Customer Edge devices
(CEs) that are connected to Provider Edge devices (PEs). One
network instance (representing a single MAC VRF) can
participate in one or more EVPN Instances. For each EVPN instance
in which the forwarding instance participates an
EVPN instance needs to be created.

The model supports BGP MPLS-Based Ethernet VPNs
(RFC 7432) and  Network Virtualization Overlay Solution
Using Ethernet VPN (RFC 8365). The use of MPLS or VXLAN
is selected via the encapsulation container within
EVPN instance. One use case requiring participating in
two EVIs is the Interconnect Solution for EVPN Overlay
networks (see draft-ietf-bess-dci-evpn-overlay-10)
  """
  __slots__ = ('_path_helper', '_extmethods', '__evi','__config','__state','__import_export_policy','__vxlan','__pbb',)

  _yang_name = 'evpn-instance'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__evi = YANGDynClass(base=str, is_leaf=True, yang_name="evi", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=True)
    self.__config = YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    self.__import_export_policy = YANGDynClass(base=import_export_policy.import_export_policy, is_container='container', yang_name="import-export-policy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)
    self.__vxlan = YANGDynClass(base=vxlan.vxlan, is_container='container', yang_name="vxlan", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)
    self.__pbb = YANGDynClass(base=pbb.pbb, is_container='container', yang_name="pbb", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'evpn', 'evpn-instances', 'evpn-instance']

  def _get_evi(self):
    """
    Getter method for evi, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/evi (leafref)

    YANG Description: EVPN Intance (EVI) identifier
    """
    return self.__evi
      
  def _set_evi(self, v, load=False):
    """
    Setter method for evi, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/evi (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_evi is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_evi() directly.

    YANG Description: EVPN Intance (EVI) identifier
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="evi", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """evi must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="evi", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=True)""",
        })

    self.__evi = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_evi(self):
    self.__evi = YANGDynClass(base=str, is_leaf=True, yang_name="evi", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=True)


  def _get_config(self):
    """
    Getter method for config, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/config (container)

    YANG Description: EVPN Configuration parameters for
the participation in an EVPN Intance.
    """
    return self.__config
      
  def _set_config(self, v, load=False):
    """
    Setter method for config, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config() directly.

    YANG Description: EVPN Configuration parameters for
the participation in an EVPN Intance.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)""",
        })

    self.__config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config(self):
    self.__config = YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/state (container)

    YANG Description: EVPN State parameters for
the participation in an EVPN Intance.
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: EVPN State parameters for
the participation in an EVPN Intance.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)


  def _get_import_export_policy(self):
    """
    Getter method for import_export_policy, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/import_export_policy (container)

    YANG Description: Top container to set the import and export policies
associated with a EVI
    """
    return self.__import_export_policy
      
  def _set_import_export_policy(self, v, load=False):
    """
    Setter method for import_export_policy, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/import_export_policy (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_import_export_policy is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_import_export_policy() directly.

    YANG Description: Top container to set the import and export policies
associated with a EVI
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=import_export_policy.import_export_policy, is_container='container', yang_name="import-export-policy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """import_export_policy must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=import_export_policy.import_export_policy, is_container='container', yang_name="import-export-policy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)""",
        })

    self.__import_export_policy = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_import_export_policy(self):
    self.__import_export_policy = YANGDynClass(base=import_export_policy.import_export_policy, is_container='container', yang_name="import-export-policy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)


  def _get_vxlan(self):
    """
    Getter method for vxlan, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/vxlan (container)

    YANG Description: Top container related to Overlay Solution in EVPN.
    """
    return self.__vxlan
      
  def _set_vxlan(self, v, load=False):
    """
    Setter method for vxlan, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/vxlan (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_vxlan is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_vxlan() directly.

    YANG Description: Top container related to Overlay Solution in EVPN.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=vxlan.vxlan, is_container='container', yang_name="vxlan", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """vxlan must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=vxlan.vxlan, is_container='container', yang_name="vxlan", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)""",
        })

    self.__vxlan = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_vxlan(self):
    self.__vxlan = YANGDynClass(base=vxlan.vxlan, is_container='container', yang_name="vxlan", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)


  def _get_pbb(self):
    """
    Getter method for pbb, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/pbb (container)

    YANG Description: Container for EVPN with PBB PE functionality
for scaling over MPLS,
    """
    return self.__pbb
      
  def _set_pbb(self, v, load=False):
    """
    Setter method for pbb, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/pbb (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_pbb is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_pbb() directly.

    YANG Description: Container for EVPN with PBB PE functionality
for scaling over MPLS,
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=pbb.pbb, is_container='container', yang_name="pbb", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """pbb must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=pbb.pbb, is_container='container', yang_name="pbb", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)""",
        })

    self.__pbb = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_pbb(self):
    self.__pbb = YANGDynClass(base=pbb.pbb, is_container='container', yang_name="pbb", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)

  evi = __builtin__.property(_get_evi, _set_evi)
  config = __builtin__.property(_get_config, _set_config)
  state = __builtin__.property(_get_state)
  import_export_policy = __builtin__.property(_get_import_export_policy, _set_import_export_policy)
  vxlan = __builtin__.property(_get_vxlan, _set_vxlan)
  pbb = __builtin__.property(_get_pbb, _set_pbb)


  _pyangbind_elements = OrderedDict([('evi', evi), ('config', config), ('state', state), ('import_export_policy', import_export_policy), ('vxlan', vxlan), ('pbb', pbb), ])


from . import config
from . import state
from . import import_export_policy
from . import vxlan
from . import pbb
class evpn_instance(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance-l2 - based on the path /network-instances/network-instance/evpn/evpn-instances/evpn-instance. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: An EVPN instance (EVI) comprises Customer Edge devices
(CEs) that are connected to Provider Edge devices (PEs). One
network instance (representing a single MAC VRF) can
participate in one or more EVPN Instances. For each EVPN instance
in which the forwarding instance participates an
EVPN instance needs to be created.

The model supports BGP MPLS-Based Ethernet VPNs
(RFC 7432) and  Network Virtualization Overlay Solution
Using Ethernet VPN (RFC 8365). The use of MPLS or VXLAN
is selected via the encapsulation container within
EVPN instance. One use case requiring participating in
two EVIs is the Interconnect Solution for EVPN Overlay
networks (see draft-ietf-bess-dci-evpn-overlay-10)
  """
  __slots__ = ('_path_helper', '_extmethods', '__evi','__config','__state','__import_export_policy','__vxlan','__pbb',)

  _yang_name = 'evpn-instance'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__evi = YANGDynClass(base=str, is_leaf=True, yang_name="evi", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=True)
    self.__config = YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    self.__import_export_policy = YANGDynClass(base=import_export_policy.import_export_policy, is_container='container', yang_name="import-export-policy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)
    self.__vxlan = YANGDynClass(base=vxlan.vxlan, is_container='container', yang_name="vxlan", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)
    self.__pbb = YANGDynClass(base=pbb.pbb, is_container='container', yang_name="pbb", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'evpn', 'evpn-instances', 'evpn-instance']

  def _get_evi(self):
    """
    Getter method for evi, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/evi (leafref)

    YANG Description: EVPN Intance (EVI) identifier
    """
    return self.__evi
      
  def _set_evi(self, v, load=False):
    """
    Setter method for evi, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/evi (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_evi is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_evi() directly.

    YANG Description: EVPN Intance (EVI) identifier
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="evi", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """evi must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="evi", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=True)""",
        })

    self.__evi = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_evi(self):
    self.__evi = YANGDynClass(base=str, is_leaf=True, yang_name="evi", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='leafref', is_config=True)


  def _get_config(self):
    """
    Getter method for config, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/config (container)

    YANG Description: EVPN Configuration parameters for
the participation in an EVPN Intance.
    """
    return self.__config
      
  def _set_config(self, v, load=False):
    """
    Setter method for config, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config() directly.

    YANG Description: EVPN Configuration parameters for
the participation in an EVPN Intance.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)""",
        })

    self.__config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config(self):
    self.__config = YANGDynClass(base=config.config, is_container='container', yang_name="config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/state (container)

    YANG Description: EVPN State parameters for
the participation in an EVPN Intance.
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/state (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: EVPN State parameters for
the participation in an EVPN Intance.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=state.state, is_container='container', yang_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)


  def _get_import_export_policy(self):
    """
    Getter method for import_export_policy, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/import_export_policy (container)

    YANG Description: Top container to set the import and export policies
associated with a EVI
    """
    return self.__import_export_policy
      
  def _set_import_export_policy(self, v, load=False):
    """
    Setter method for import_export_policy, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/import_export_policy (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_import_export_policy is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_import_export_policy() directly.

    YANG Description: Top container to set the import and export policies
associated with a EVI
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=import_export_policy.import_export_policy, is_container='container', yang_name="import-export-policy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """import_export_policy must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=import_export_policy.import_export_policy, is_container='container', yang_name="import-export-policy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)""",
        })

    self.__import_export_policy = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_import_export_policy(self):
    self.__import_export_policy = YANGDynClass(base=import_export_policy.import_export_policy, is_container='container', yang_name="import-export-policy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)


  def _get_vxlan(self):
    """
    Getter method for vxlan, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/vxlan (container)

    YANG Description: Top container related to Overlay Solution in EVPN.
    """
    return self.__vxlan
      
  def _set_vxlan(self, v, load=False):
    """
    Setter method for vxlan, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/vxlan (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_vxlan is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_vxlan() directly.

    YANG Description: Top container related to Overlay Solution in EVPN.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=vxlan.vxlan, is_container='container', yang_name="vxlan", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """vxlan must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=vxlan.vxlan, is_container='container', yang_name="vxlan", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)""",
        })

    self.__vxlan = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_vxlan(self):
    self.__vxlan = YANGDynClass(base=vxlan.vxlan, is_container='container', yang_name="vxlan", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)


  def _get_pbb(self):
    """
    Getter method for pbb, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/pbb (container)

    YANG Description: Container for EVPN with PBB PE functionality
for scaling over MPLS,
    """
    return self.__pbb
      
  def _set_pbb(self, v, load=False):
    """
    Setter method for pbb, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/pbb (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_pbb is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_pbb() directly.

    YANG Description: Container for EVPN with PBB PE functionality
for scaling over MPLS,
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=pbb.pbb, is_container='container', yang_name="pbb", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """pbb must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=pbb.pbb, is_container='container', yang_name="pbb", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)""",
        })

    self.__pbb = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_pbb(self):
    self.__pbb = YANGDynClass(base=pbb.pbb, is_container='container', yang_name="pbb", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=True)

  evi = __builtin__.property(_get_evi, _set_evi)
  config = __builtin__.property(_get_config, _set_config)
  state = __builtin__.property(_get_state)
  import_export_policy = __builtin__.property(_get_import_export_policy, _set_import_export_policy)
  vxlan = __builtin__.property(_get_vxlan, _set_vxlan)
  pbb = __builtin__.property(_get_pbb, _set_pbb)


  _pyangbind_elements = OrderedDict([('evi', evi), ('config', config), ('state', state), ('import_export_policy', import_export_policy), ('vxlan', vxlan), ('pbb', pbb), ])


