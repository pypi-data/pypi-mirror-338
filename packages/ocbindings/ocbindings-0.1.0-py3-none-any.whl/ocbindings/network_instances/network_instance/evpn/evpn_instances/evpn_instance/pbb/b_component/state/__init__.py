# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance - based on the path /network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: State variables for the b-components.
  """
  __slots__ = ('_path_helper', '_extmethods', '__b_component_name','__backbone_src_mac',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__b_component_name = YANGDynClass(base=str, is_leaf=True, yang_name="b-component-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='string', is_config=False)
    self.__backbone_src_mac = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'}), is_leaf=True, yang_name="backbone-src-mac", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:mac-address', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'evpn', 'evpn-instances', 'evpn-instance', 'pbb', 'b-component', 'state']

  def _get_b_component_name(self):
    """
    Getter method for b_component_name, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/pbb/b_component/state/b_component_name (string)

    YANG Description: Type of the associated b-component
    """
    return self.__b_component_name
      
  def _set_b_component_name(self, v, load=False):
    """
    Setter method for b_component_name, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/pbb/b_component/state/b_component_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_b_component_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_b_component_name() directly.

    YANG Description: Type of the associated b-component
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="b-component-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """b_component_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="b-component-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='string', is_config=False)""",
        })

    self.__b_component_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_b_component_name(self):
    self.__b_component_name = YANGDynClass(base=str, is_leaf=True, yang_name="b-component-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='string', is_config=False)


  def _get_backbone_src_mac(self):
    """
    Getter method for backbone_src_mac, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/pbb/b_component/state/backbone_src_mac (oc-yang:mac-address)

    YANG Description: EVPN will run independently in both components,
the I-component MAC-VRF and B-component MAC-VRF.
The backbone-src-mac assigns the b-component MAC.
    """
    return self.__backbone_src_mac
      
  def _set_backbone_src_mac(self, v, load=False):
    """
    Setter method for backbone_src_mac, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/pbb/b_component/state/backbone_src_mac (oc-yang:mac-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_backbone_src_mac is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_backbone_src_mac() directly.

    YANG Description: EVPN will run independently in both components,
the I-component MAC-VRF and B-component MAC-VRF.
The backbone-src-mac assigns the b-component MAC.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'}), is_leaf=True, yang_name="backbone-src-mac", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:mac-address', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """backbone_src_mac must be of a type compatible with oc-yang:mac-address""",
          'defined-type': "oc-yang:mac-address",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'}), is_leaf=True, yang_name="backbone-src-mac", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:mac-address', is_config=False)""",
        })

    self.__backbone_src_mac = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_backbone_src_mac(self):
    self.__backbone_src_mac = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'}), is_leaf=True, yang_name="backbone-src-mac", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:mac-address', is_config=False)

  b_component_name = __builtin__.property(_get_b_component_name)
  backbone_src_mac = __builtin__.property(_get_backbone_src_mac)


  _pyangbind_elements = OrderedDict([('b_component_name', b_component_name), ('backbone_src_mac', backbone_src_mac), ])


class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance-l2 - based on the path /network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: State variables for the b-components.
  """
  __slots__ = ('_path_helper', '_extmethods', '__b_component_name','__backbone_src_mac',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__b_component_name = YANGDynClass(base=str, is_leaf=True, yang_name="b-component-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='string', is_config=False)
    self.__backbone_src_mac = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'}), is_leaf=True, yang_name="backbone-src-mac", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:mac-address', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'evpn', 'evpn-instances', 'evpn-instance', 'pbb', 'b-component', 'state']

  def _get_b_component_name(self):
    """
    Getter method for b_component_name, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/pbb/b_component/state/b_component_name (string)

    YANG Description: Type of the associated b-component
    """
    return self.__b_component_name
      
  def _set_b_component_name(self, v, load=False):
    """
    Setter method for b_component_name, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/pbb/b_component/state/b_component_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_b_component_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_b_component_name() directly.

    YANG Description: Type of the associated b-component
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="b-component-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """b_component_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="b-component-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='string', is_config=False)""",
        })

    self.__b_component_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_b_component_name(self):
    self.__b_component_name = YANGDynClass(base=str, is_leaf=True, yang_name="b-component-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='string', is_config=False)


  def _get_backbone_src_mac(self):
    """
    Getter method for backbone_src_mac, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/pbb/b_component/state/backbone_src_mac (oc-yang:mac-address)

    YANG Description: EVPN will run independently in both components,
the I-component MAC-VRF and B-component MAC-VRF.
The backbone-src-mac assigns the b-component MAC.
    """
    return self.__backbone_src_mac
      
  def _set_backbone_src_mac(self, v, load=False):
    """
    Setter method for backbone_src_mac, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/pbb/b_component/state/backbone_src_mac (oc-yang:mac-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_backbone_src_mac is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_backbone_src_mac() directly.

    YANG Description: EVPN will run independently in both components,
the I-component MAC-VRF and B-component MAC-VRF.
The backbone-src-mac assigns the b-component MAC.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'}), is_leaf=True, yang_name="backbone-src-mac", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:mac-address', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """backbone_src_mac must be of a type compatible with oc-yang:mac-address""",
          'defined-type': "oc-yang:mac-address",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'}), is_leaf=True, yang_name="backbone-src-mac", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:mac-address', is_config=False)""",
        })

    self.__backbone_src_mac = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_backbone_src_mac(self):
    self.__backbone_src_mac = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'}), is_leaf=True, yang_name="backbone-src-mac", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:mac-address', is_config=False)

  b_component_name = __builtin__.property(_get_b_component_name)
  backbone_src_mac = __builtin__.property(_get_backbone_src_mac)


  _pyangbind_elements = OrderedDict([('b_component_name', b_component_name), ('backbone_src_mac', backbone_src_mac), ])


class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance - based on the path /network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: State variables for the b-components.
  """
  __slots__ = ('_path_helper', '_extmethods', '__b_component_name','__backbone_src_mac',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__b_component_name = YANGDynClass(base=str, is_leaf=True, yang_name="b-component-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='string', is_config=False)
    self.__backbone_src_mac = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'}), is_leaf=True, yang_name="backbone-src-mac", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:mac-address', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'evpn', 'evpn-instances', 'evpn-instance', 'pbb', 'b-component', 'state']

  def _get_b_component_name(self):
    """
    Getter method for b_component_name, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/pbb/b_component/state/b_component_name (string)

    YANG Description: Type of the associated b-component
    """
    return self.__b_component_name
      
  def _set_b_component_name(self, v, load=False):
    """
    Setter method for b_component_name, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/pbb/b_component/state/b_component_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_b_component_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_b_component_name() directly.

    YANG Description: Type of the associated b-component
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="b-component-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """b_component_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="b-component-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='string', is_config=False)""",
        })

    self.__b_component_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_b_component_name(self):
    self.__b_component_name = YANGDynClass(base=str, is_leaf=True, yang_name="b-component-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='string', is_config=False)


  def _get_backbone_src_mac(self):
    """
    Getter method for backbone_src_mac, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/pbb/b_component/state/backbone_src_mac (oc-yang:mac-address)

    YANG Description: EVPN will run independently in both components,
the I-component MAC-VRF and B-component MAC-VRF.
The backbone-src-mac assigns the b-component MAC.
    """
    return self.__backbone_src_mac
      
  def _set_backbone_src_mac(self, v, load=False):
    """
    Setter method for backbone_src_mac, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/pbb/b_component/state/backbone_src_mac (oc-yang:mac-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_backbone_src_mac is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_backbone_src_mac() directly.

    YANG Description: EVPN will run independently in both components,
the I-component MAC-VRF and B-component MAC-VRF.
The backbone-src-mac assigns the b-component MAC.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'}), is_leaf=True, yang_name="backbone-src-mac", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:mac-address', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """backbone_src_mac must be of a type compatible with oc-yang:mac-address""",
          'defined-type': "oc-yang:mac-address",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'}), is_leaf=True, yang_name="backbone-src-mac", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:mac-address', is_config=False)""",
        })

    self.__backbone_src_mac = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_backbone_src_mac(self):
    self.__backbone_src_mac = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'}), is_leaf=True, yang_name="backbone-src-mac", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:mac-address', is_config=False)

  b_component_name = __builtin__.property(_get_b_component_name)
  backbone_src_mac = __builtin__.property(_get_backbone_src_mac)


  _pyangbind_elements = OrderedDict([('b_component_name', b_component_name), ('backbone_src_mac', backbone_src_mac), ])


class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance-l2 - based on the path /network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: State variables for the b-components.
  """
  __slots__ = ('_path_helper', '_extmethods', '__b_component_name','__backbone_src_mac',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__b_component_name = YANGDynClass(base=str, is_leaf=True, yang_name="b-component-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='string', is_config=False)
    self.__backbone_src_mac = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'}), is_leaf=True, yang_name="backbone-src-mac", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:mac-address', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'evpn', 'evpn-instances', 'evpn-instance', 'pbb', 'b-component', 'state']

  def _get_b_component_name(self):
    """
    Getter method for b_component_name, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/pbb/b_component/state/b_component_name (string)

    YANG Description: Type of the associated b-component
    """
    return self.__b_component_name
      
  def _set_b_component_name(self, v, load=False):
    """
    Setter method for b_component_name, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/pbb/b_component/state/b_component_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_b_component_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_b_component_name() directly.

    YANG Description: Type of the associated b-component
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="b-component-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """b_component_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="b-component-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='string', is_config=False)""",
        })

    self.__b_component_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_b_component_name(self):
    self.__b_component_name = YANGDynClass(base=str, is_leaf=True, yang_name="b-component-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='string', is_config=False)


  def _get_backbone_src_mac(self):
    """
    Getter method for backbone_src_mac, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/pbb/b_component/state/backbone_src_mac (oc-yang:mac-address)

    YANG Description: EVPN will run independently in both components,
the I-component MAC-VRF and B-component MAC-VRF.
The backbone-src-mac assigns the b-component MAC.
    """
    return self.__backbone_src_mac
      
  def _set_backbone_src_mac(self, v, load=False):
    """
    Setter method for backbone_src_mac, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance/pbb/b_component/state/backbone_src_mac (oc-yang:mac-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_backbone_src_mac is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_backbone_src_mac() directly.

    YANG Description: EVPN will run independently in both components,
the I-component MAC-VRF and B-component MAC-VRF.
The backbone-src-mac assigns the b-component MAC.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'}), is_leaf=True, yang_name="backbone-src-mac", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:mac-address', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """backbone_src_mac must be of a type compatible with oc-yang:mac-address""",
          'defined-type': "oc-yang:mac-address",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'}), is_leaf=True, yang_name="backbone-src-mac", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:mac-address', is_config=False)""",
        })

    self.__backbone_src_mac = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_backbone_src_mac(self):
    self.__backbone_src_mac = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_dict={'pattern': '[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'}), is_leaf=True, yang_name="backbone-src-mac", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='oc-yang:mac-address', is_config=False)

  b_component_name = __builtin__.property(_get_b_component_name)
  backbone_src_mac = __builtin__.property(_get_backbone_src_mac)


  _pyangbind_elements = OrderedDict([('b_component_name', b_component_name), ('backbone_src_mac', backbone_src_mac), ])


