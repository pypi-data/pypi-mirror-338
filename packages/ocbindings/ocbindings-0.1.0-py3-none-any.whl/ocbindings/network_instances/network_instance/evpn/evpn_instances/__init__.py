# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
from . import evpn_instance
class evpn_instances(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance - based on the path /network-instances/network-instance/evpn/evpn-instances. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration attributes of the EVPN Instance
  """
  __slots__ = ('_path_helper', '_extmethods', '__evpn_instance',)

  _yang_name = 'evpn-instances'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__evpn_instance = YANGDynClass(base=YANGListType("evi",evpn_instance.evpn_instance, yang_name="evpn-instance", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='evi', extensions=None), is_container='list', yang_name="evpn-instance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='list', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'evpn', 'evpn-instances']

  def _get_evpn_instance(self):
    """
    Getter method for evpn_instance, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance (list)

    YANG Description: An EVPN instance (EVI) comprises Customer Edge devices
(CEs) that are connected to Provider Edge devices (PEs). One
network instance (representing a single MAC VRF) can
participate in one or more EVPN Instances. For each EVPN instance
in which the forwarding instance participates an
EVPN instance needs to be created.

The model supports BGP MPLS-Based Ethernet VPNs
(RFC 7432) and  Network Virtualization Overlay Solution
Using Ethernet VPN (RFC 8365). The use of MPLS or VXLAN
is selected via the encapsulation container within
EVPN instance. One use case requiring participating in
two EVIs is the Interconnect Solution for EVPN Overlay
networks (see draft-ietf-bess-dci-evpn-overlay-10)
    """
    return self.__evpn_instance
      
  def _set_evpn_instance(self, v, load=False):
    """
    Setter method for evpn_instance, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_evpn_instance is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_evpn_instance() directly.

    YANG Description: An EVPN instance (EVI) comprises Customer Edge devices
(CEs) that are connected to Provider Edge devices (PEs). One
network instance (representing a single MAC VRF) can
participate in one or more EVPN Instances. For each EVPN instance
in which the forwarding instance participates an
EVPN instance needs to be created.

The model supports BGP MPLS-Based Ethernet VPNs
(RFC 7432) and  Network Virtualization Overlay Solution
Using Ethernet VPN (RFC 8365). The use of MPLS or VXLAN
is selected via the encapsulation container within
EVPN instance. One use case requiring participating in
two EVIs is the Interconnect Solution for EVPN Overlay
networks (see draft-ietf-bess-dci-evpn-overlay-10)
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("evi",evpn_instance.evpn_instance, yang_name="evpn-instance", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='evi', extensions=None), is_container='list', yang_name="evpn-instance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """evpn_instance must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("evi",evpn_instance.evpn_instance, yang_name="evpn-instance", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='evi', extensions=None), is_container='list', yang_name="evpn-instance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='list', is_config=True)""",
        })

    self.__evpn_instance = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_evpn_instance(self):
    self.__evpn_instance = YANGDynClass(base=YANGListType("evi",evpn_instance.evpn_instance, yang_name="evpn-instance", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='evi', extensions=None), is_container='list', yang_name="evpn-instance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='list', is_config=True)

  evpn_instance = __builtin__.property(_get_evpn_instance, _set_evpn_instance)


  _pyangbind_elements = OrderedDict([('evpn_instance', evpn_instance), ])


from . import evpn_instance
class evpn_instances(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance-l2 - based on the path /network-instances/network-instance/evpn/evpn-instances. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration attributes of the EVPN Instance
  """
  __slots__ = ('_path_helper', '_extmethods', '__evpn_instance',)

  _yang_name = 'evpn-instances'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__evpn_instance = YANGDynClass(base=YANGListType("evi",evpn_instance.evpn_instance, yang_name="evpn-instance", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='evi', extensions=None), is_container='list', yang_name="evpn-instance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='list', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'evpn', 'evpn-instances']

  def _get_evpn_instance(self):
    """
    Getter method for evpn_instance, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance (list)

    YANG Description: An EVPN instance (EVI) comprises Customer Edge devices
(CEs) that are connected to Provider Edge devices (PEs). One
network instance (representing a single MAC VRF) can
participate in one or more EVPN Instances. For each EVPN instance
in which the forwarding instance participates an
EVPN instance needs to be created.

The model supports BGP MPLS-Based Ethernet VPNs
(RFC 7432) and  Network Virtualization Overlay Solution
Using Ethernet VPN (RFC 8365). The use of MPLS or VXLAN
is selected via the encapsulation container within
EVPN instance. One use case requiring participating in
two EVIs is the Interconnect Solution for EVPN Overlay
networks (see draft-ietf-bess-dci-evpn-overlay-10)
    """
    return self.__evpn_instance
      
  def _set_evpn_instance(self, v, load=False):
    """
    Setter method for evpn_instance, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_evpn_instance is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_evpn_instance() directly.

    YANG Description: An EVPN instance (EVI) comprises Customer Edge devices
(CEs) that are connected to Provider Edge devices (PEs). One
network instance (representing a single MAC VRF) can
participate in one or more EVPN Instances. For each EVPN instance
in which the forwarding instance participates an
EVPN instance needs to be created.

The model supports BGP MPLS-Based Ethernet VPNs
(RFC 7432) and  Network Virtualization Overlay Solution
Using Ethernet VPN (RFC 8365). The use of MPLS or VXLAN
is selected via the encapsulation container within
EVPN instance. One use case requiring participating in
two EVIs is the Interconnect Solution for EVPN Overlay
networks (see draft-ietf-bess-dci-evpn-overlay-10)
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("evi",evpn_instance.evpn_instance, yang_name="evpn-instance", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='evi', extensions=None), is_container='list', yang_name="evpn-instance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """evpn_instance must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("evi",evpn_instance.evpn_instance, yang_name="evpn-instance", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='evi', extensions=None), is_container='list', yang_name="evpn-instance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='list', is_config=True)""",
        })

    self.__evpn_instance = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_evpn_instance(self):
    self.__evpn_instance = YANGDynClass(base=YANGListType("evi",evpn_instance.evpn_instance, yang_name="evpn-instance", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='evi', extensions=None), is_container='list', yang_name="evpn-instance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='list', is_config=True)

  evpn_instance = __builtin__.property(_get_evpn_instance, _set_evpn_instance)


  _pyangbind_elements = OrderedDict([('evpn_instance', evpn_instance), ])


from . import evpn_instance
class evpn_instances(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance - based on the path /network-instances/network-instance/evpn/evpn-instances. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration attributes of the EVPN Instance
  """
  __slots__ = ('_path_helper', '_extmethods', '__evpn_instance',)

  _yang_name = 'evpn-instances'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__evpn_instance = YANGDynClass(base=YANGListType("evi",evpn_instance.evpn_instance, yang_name="evpn-instance", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='evi', extensions=None), is_container='list', yang_name="evpn-instance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='list', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'evpn', 'evpn-instances']

  def _get_evpn_instance(self):
    """
    Getter method for evpn_instance, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance (list)

    YANG Description: An EVPN instance (EVI) comprises Customer Edge devices
(CEs) that are connected to Provider Edge devices (PEs). One
network instance (representing a single MAC VRF) can
participate in one or more EVPN Instances. For each EVPN instance
in which the forwarding instance participates an
EVPN instance needs to be created.

The model supports BGP MPLS-Based Ethernet VPNs
(RFC 7432) and  Network Virtualization Overlay Solution
Using Ethernet VPN (RFC 8365). The use of MPLS or VXLAN
is selected via the encapsulation container within
EVPN instance. One use case requiring participating in
two EVIs is the Interconnect Solution for EVPN Overlay
networks (see draft-ietf-bess-dci-evpn-overlay-10)
    """
    return self.__evpn_instance
      
  def _set_evpn_instance(self, v, load=False):
    """
    Setter method for evpn_instance, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_evpn_instance is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_evpn_instance() directly.

    YANG Description: An EVPN instance (EVI) comprises Customer Edge devices
(CEs) that are connected to Provider Edge devices (PEs). One
network instance (representing a single MAC VRF) can
participate in one or more EVPN Instances. For each EVPN instance
in which the forwarding instance participates an
EVPN instance needs to be created.

The model supports BGP MPLS-Based Ethernet VPNs
(RFC 7432) and  Network Virtualization Overlay Solution
Using Ethernet VPN (RFC 8365). The use of MPLS or VXLAN
is selected via the encapsulation container within
EVPN instance. One use case requiring participating in
two EVIs is the Interconnect Solution for EVPN Overlay
networks (see draft-ietf-bess-dci-evpn-overlay-10)
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("evi",evpn_instance.evpn_instance, yang_name="evpn-instance", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='evi', extensions=None), is_container='list', yang_name="evpn-instance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """evpn_instance must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("evi",evpn_instance.evpn_instance, yang_name="evpn-instance", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='evi', extensions=None), is_container='list', yang_name="evpn-instance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='list', is_config=True)""",
        })

    self.__evpn_instance = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_evpn_instance(self):
    self.__evpn_instance = YANGDynClass(base=YANGListType("evi",evpn_instance.evpn_instance, yang_name="evpn-instance", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='evi', extensions=None), is_container='list', yang_name="evpn-instance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='list', is_config=True)

  evpn_instance = __builtin__.property(_get_evpn_instance, _set_evpn_instance)


  _pyangbind_elements = OrderedDict([('evpn_instance', evpn_instance), ])


from . import evpn_instance
class evpn_instances(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance-l2 - based on the path /network-instances/network-instance/evpn/evpn-instances. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration attributes of the EVPN Instance
  """
  __slots__ = ('_path_helper', '_extmethods', '__evpn_instance',)

  _yang_name = 'evpn-instances'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__evpn_instance = YANGDynClass(base=YANGListType("evi",evpn_instance.evpn_instance, yang_name="evpn-instance", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='evi', extensions=None), is_container='list', yang_name="evpn-instance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='list', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'evpn', 'evpn-instances']

  def _get_evpn_instance(self):
    """
    Getter method for evpn_instance, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance (list)

    YANG Description: An EVPN instance (EVI) comprises Customer Edge devices
(CEs) that are connected to Provider Edge devices (PEs). One
network instance (representing a single MAC VRF) can
participate in one or more EVPN Instances. For each EVPN instance
in which the forwarding instance participates an
EVPN instance needs to be created.

The model supports BGP MPLS-Based Ethernet VPNs
(RFC 7432) and  Network Virtualization Overlay Solution
Using Ethernet VPN (RFC 8365). The use of MPLS or VXLAN
is selected via the encapsulation container within
EVPN instance. One use case requiring participating in
two EVIs is the Interconnect Solution for EVPN Overlay
networks (see draft-ietf-bess-dci-evpn-overlay-10)
    """
    return self.__evpn_instance
      
  def _set_evpn_instance(self, v, load=False):
    """
    Setter method for evpn_instance, mapped from YANG variable /network_instances/network_instance/evpn/evpn_instances/evpn_instance (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_evpn_instance is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_evpn_instance() directly.

    YANG Description: An EVPN instance (EVI) comprises Customer Edge devices
(CEs) that are connected to Provider Edge devices (PEs). One
network instance (representing a single MAC VRF) can
participate in one or more EVPN Instances. For each EVPN instance
in which the forwarding instance participates an
EVPN instance needs to be created.

The model supports BGP MPLS-Based Ethernet VPNs
(RFC 7432) and  Network Virtualization Overlay Solution
Using Ethernet VPN (RFC 8365). The use of MPLS or VXLAN
is selected via the encapsulation container within
EVPN instance. One use case requiring participating in
two EVIs is the Interconnect Solution for EVPN Overlay
networks (see draft-ietf-bess-dci-evpn-overlay-10)
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("evi",evpn_instance.evpn_instance, yang_name="evpn-instance", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='evi', extensions=None), is_container='list', yang_name="evpn-instance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """evpn_instance must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("evi",evpn_instance.evpn_instance, yang_name="evpn-instance", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='evi', extensions=None), is_container='list', yang_name="evpn-instance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='list', is_config=True)""",
        })

    self.__evpn_instance = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_evpn_instance(self):
    self.__evpn_instance = YANGDynClass(base=YANGListType("evi",evpn_instance.evpn_instance, yang_name="evpn-instance", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='evi', extensions=None), is_container='list', yang_name="evpn-instance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='list', is_config=True)

  evpn_instance = __builtin__.property(_get_evpn_instance, _set_evpn_instance)


  _pyangbind_elements = OrderedDict([('evpn_instance', evpn_instance), ])


