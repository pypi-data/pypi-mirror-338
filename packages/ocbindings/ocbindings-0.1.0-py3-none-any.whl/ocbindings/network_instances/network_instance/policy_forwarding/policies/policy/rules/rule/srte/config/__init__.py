# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
class config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance - based on the path /network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/srte/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration parameters associated with SR-TE policies.
  """
  __slots__ = ('_path_helper', '_extmethods', '__mpls_bsid','__srte_endpoint','__srte_color','__srte_preference',)

  _yang_name = 'config'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__mpls_bsid = YANGDynClass(base=[RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['16..1048575']}),RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'IPV4_EXPLICIT_NULL': {'value': 0}, 'ROUTER_ALERT': {'value': 1}, 'IPV6_EXPLICIT_NULL': {'value': 2}, 'IMPLICIT_NULL': {'value': 3}, 'ENTROPY_LABEL_INDICATOR': {'value': 7}, 'NO_LABEL': {}},),], is_leaf=True, yang_name="mpls-bsid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/policy-forwarding/sr-te', defining_module='openconfig-pf-srte', yang_type='oc-mplst:mpls-label', is_config=True)
    self.__srte_endpoint = YANGDynClass(base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),], is_leaf=True, yang_name="srte-endpoint", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/policy-forwarding/sr-te', defining_module='openconfig-pf-srte', yang_type='oc-inet:ip-address', is_config=True)
    self.__srte_color = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="srte-color", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/policy-forwarding/sr-te', defining_module='openconfig-pf-srte', yang_type='uint32', is_config=True)
    self.__srte_preference = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="srte-preference", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/policy-forwarding/sr-te', defining_module='openconfig-pf-srte', yang_type='uint32', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'policy-forwarding', 'policies', 'policy', 'rules', 'rule', 'srte', 'config']

  def _get_mpls_bsid(self):
    """
    Getter method for mpls_bsid, mapped from YANG variable /network_instances/network_instance/policy_forwarding/policies/policy/rules/rule/srte/config/mpls_bsid (oc-mplst:mpls-label)

    YANG Description: The Binding SID (BSID) to be matched expressed as an MPLS label. Packets
that are ingress to the system with the top-most label matching
the SID value specified in this leaf should be forwarded according
to the policy. The top-most label (the specified Binding SID)
must be popped from the label stack by the system.
    """
    return self.__mpls_bsid
      
  def _set_mpls_bsid(self, v, load=False):
    """
    Setter method for mpls_bsid, mapped from YANG variable /network_instances/network_instance/policy_forwarding/policies/policy/rules/rule/srte/config/mpls_bsid (oc-mplst:mpls-label)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mpls_bsid is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mpls_bsid() directly.

    YANG Description: The Binding SID (BSID) to be matched expressed as an MPLS label. Packets
that are ingress to the system with the top-most label matching
the SID value specified in this leaf should be forwarded according
to the policy. The top-most label (the specified Binding SID)
must be popped from the label stack by the system.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['16..1048575']}),RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'IPV4_EXPLICIT_NULL': {'value': 0}, 'ROUTER_ALERT': {'value': 1}, 'IPV6_EXPLICIT_NULL': {'value': 2}, 'IMPLICIT_NULL': {'value': 3}, 'ENTROPY_LABEL_INDICATOR': {'value': 7}, 'NO_LABEL': {}},),], is_leaf=True, yang_name="mpls-bsid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/policy-forwarding/sr-te', defining_module='openconfig-pf-srte', yang_type='oc-mplst:mpls-label', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mpls_bsid must be of a type compatible with oc-mplst:mpls-label""",
          'defined-type': "oc-mplst:mpls-label",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['16..1048575']}),RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'IPV4_EXPLICIT_NULL': {'value': 0}, 'ROUTER_ALERT': {'value': 1}, 'IPV6_EXPLICIT_NULL': {'value': 2}, 'IMPLICIT_NULL': {'value': 3}, 'ENTROPY_LABEL_INDICATOR': {'value': 7}, 'NO_LABEL': {}},),], is_leaf=True, yang_name="mpls-bsid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/policy-forwarding/sr-te', defining_module='openconfig-pf-srte', yang_type='oc-mplst:mpls-label', is_config=True)""",
        })

    self.__mpls_bsid = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mpls_bsid(self):
    self.__mpls_bsid = YANGDynClass(base=[RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['16..1048575']}),RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'IPV4_EXPLICIT_NULL': {'value': 0}, 'ROUTER_ALERT': {'value': 1}, 'IPV6_EXPLICIT_NULL': {'value': 2}, 'IMPLICIT_NULL': {'value': 3}, 'ENTROPY_LABEL_INDICATOR': {'value': 7}, 'NO_LABEL': {}},),], is_leaf=True, yang_name="mpls-bsid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/policy-forwarding/sr-te', defining_module='openconfig-pf-srte', yang_type='oc-mplst:mpls-label', is_config=True)


  def _get_srte_endpoint(self):
    """
    Getter method for srte_endpoint, mapped from YANG variable /network_instances/network_instance/policy_forwarding/policies/policy/rules/rule/srte/config/srte_endpoint (oc-inet:ip-address)

    YANG Description: When the policy forwarding rule is used for RIB resolution
to a Segment Routing Traffic Engineering path, the policy is used
when the required endpoint (which may be the protocol next-hop)
matches the endpoint address specified in this
leaf. When the leaf is set to all zeros (0.0.0.0 or ::), the endpoint
acts as a wildcard in the policy resolution.
    """
    return self.__srte_endpoint
      
  def _set_srte_endpoint(self, v, load=False):
    """
    Setter method for srte_endpoint, mapped from YANG variable /network_instances/network_instance/policy_forwarding/policies/policy/rules/rule/srte/config/srte_endpoint (oc-inet:ip-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_srte_endpoint is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_srte_endpoint() directly.

    YANG Description: When the policy forwarding rule is used for RIB resolution
to a Segment Routing Traffic Engineering path, the policy is used
when the required endpoint (which may be the protocol next-hop)
matches the endpoint address specified in this
leaf. When the leaf is set to all zeros (0.0.0.0 or ::), the endpoint
acts as a wildcard in the policy resolution.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),], is_leaf=True, yang_name="srte-endpoint", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/policy-forwarding/sr-te', defining_module='openconfig-pf-srte', yang_type='oc-inet:ip-address', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """srte_endpoint must be of a type compatible with oc-inet:ip-address""",
          'defined-type': "oc-inet:ip-address",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),], is_leaf=True, yang_name="srte-endpoint", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/policy-forwarding/sr-te', defining_module='openconfig-pf-srte', yang_type='oc-inet:ip-address', is_config=True)""",
        })

    self.__srte_endpoint = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_srte_endpoint(self):
    self.__srte_endpoint = YANGDynClass(base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),], is_leaf=True, yang_name="srte-endpoint", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/policy-forwarding/sr-te', defining_module='openconfig-pf-srte', yang_type='oc-inet:ip-address', is_config=True)


  def _get_srte_color(self):
    """
    Getter method for srte_color, mapped from YANG variable /network_instances/network_instance/policy_forwarding/policies/policy/rules/rule/srte/config/srte_color (uint32)

    YANG Description: When the policy forwarding rule is used for RIB resolution to a
specific Segment Routing Traffic Engineering path, the policy is
used when the colour required in the policy (which may be specified
based on the value of a BGP extended colour community) matches the
value of this leaf. The colour being set to 0 indicates that the
colour is a wildcard in the policy resolution.
    """
    return self.__srte_color
      
  def _set_srte_color(self, v, load=False):
    """
    Setter method for srte_color, mapped from YANG variable /network_instances/network_instance/policy_forwarding/policies/policy/rules/rule/srte/config/srte_color (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_srte_color is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_srte_color() directly.

    YANG Description: When the policy forwarding rule is used for RIB resolution to a
specific Segment Routing Traffic Engineering path, the policy is
used when the colour required in the policy (which may be specified
based on the value of a BGP extended colour community) matches the
value of this leaf. The colour being set to 0 indicates that the
colour is a wildcard in the policy resolution.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="srte-color", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/policy-forwarding/sr-te', defining_module='openconfig-pf-srte', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """srte_color must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="srte-color", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/policy-forwarding/sr-te', defining_module='openconfig-pf-srte', yang_type='uint32', is_config=True)""",
        })

    self.__srte_color = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_srte_color(self):
    self.__srte_color = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="srte-color", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/policy-forwarding/sr-te', defining_module='openconfig-pf-srte', yang_type='uint32', is_config=True)


  def _get_srte_preference(self):
    """
    Getter method for srte_preference, mapped from YANG variable /network_instances/network_instance/policy_forwarding/policies/policy/rules/rule/srte/config/srte_preference (uint32)

    YANG Description: When there are multiple policy forwarding rules specified for
a particular SR-TE endpoint. The preference is used to resolve
between them. These rules may be learnt from a dynamic routing
protocol, or interface to the device, or from other static
entries configured on the system.
    """
    return self.__srte_preference
      
  def _set_srte_preference(self, v, load=False):
    """
    Setter method for srte_preference, mapped from YANG variable /network_instances/network_instance/policy_forwarding/policies/policy/rules/rule/srte/config/srte_preference (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_srte_preference is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_srte_preference() directly.

    YANG Description: When there are multiple policy forwarding rules specified for
a particular SR-TE endpoint. The preference is used to resolve
between them. These rules may be learnt from a dynamic routing
protocol, or interface to the device, or from other static
entries configured on the system.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="srte-preference", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/policy-forwarding/sr-te', defining_module='openconfig-pf-srte', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """srte_preference must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="srte-preference", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/policy-forwarding/sr-te', defining_module='openconfig-pf-srte', yang_type='uint32', is_config=True)""",
        })

    self.__srte_preference = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_srte_preference(self):
    self.__srte_preference = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="srte-preference", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/policy-forwarding/sr-te', defining_module='openconfig-pf-srte', yang_type='uint32', is_config=True)

  mpls_bsid = __builtin__.property(_get_mpls_bsid, _set_mpls_bsid)
  srte_endpoint = __builtin__.property(_get_srte_endpoint, _set_srte_endpoint)
  srte_color = __builtin__.property(_get_srte_color, _set_srte_color)
  srte_preference = __builtin__.property(_get_srte_preference, _set_srte_preference)


  _pyangbind_elements = OrderedDict([('mpls_bsid', mpls_bsid), ('srte_endpoint', srte_endpoint), ('srte_color', srte_color), ('srte_preference', srte_preference), ])


class config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance-l2 - based on the path /network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/srte/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration parameters associated with SR-TE policies.
  """
  __slots__ = ('_path_helper', '_extmethods', '__mpls_bsid','__srte_endpoint','__srte_color','__srte_preference',)

  _yang_name = 'config'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__mpls_bsid = YANGDynClass(base=[RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['16..1048575']}),RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'IPV4_EXPLICIT_NULL': {'value': 0}, 'ROUTER_ALERT': {'value': 1}, 'IPV6_EXPLICIT_NULL': {'value': 2}, 'IMPLICIT_NULL': {'value': 3}, 'ENTROPY_LABEL_INDICATOR': {'value': 7}, 'NO_LABEL': {}},),], is_leaf=True, yang_name="mpls-bsid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/policy-forwarding/sr-te', defining_module='openconfig-pf-srte', yang_type='oc-mplst:mpls-label', is_config=True)
    self.__srte_endpoint = YANGDynClass(base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),], is_leaf=True, yang_name="srte-endpoint", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/policy-forwarding/sr-te', defining_module='openconfig-pf-srte', yang_type='oc-inet:ip-address', is_config=True)
    self.__srte_color = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="srte-color", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/policy-forwarding/sr-te', defining_module='openconfig-pf-srte', yang_type='uint32', is_config=True)
    self.__srte_preference = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="srte-preference", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/policy-forwarding/sr-te', defining_module='openconfig-pf-srte', yang_type='uint32', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'policy-forwarding', 'policies', 'policy', 'rules', 'rule', 'srte', 'config']

  def _get_mpls_bsid(self):
    """
    Getter method for mpls_bsid, mapped from YANG variable /network_instances/network_instance/policy_forwarding/policies/policy/rules/rule/srte/config/mpls_bsid (oc-mplst:mpls-label)

    YANG Description: The Binding SID (BSID) to be matched expressed as an MPLS label. Packets
that are ingress to the system with the top-most label matching
the SID value specified in this leaf should be forwarded according
to the policy. The top-most label (the specified Binding SID)
must be popped from the label stack by the system.
    """
    return self.__mpls_bsid
      
  def _set_mpls_bsid(self, v, load=False):
    """
    Setter method for mpls_bsid, mapped from YANG variable /network_instances/network_instance/policy_forwarding/policies/policy/rules/rule/srte/config/mpls_bsid (oc-mplst:mpls-label)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mpls_bsid is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mpls_bsid() directly.

    YANG Description: The Binding SID (BSID) to be matched expressed as an MPLS label. Packets
that are ingress to the system with the top-most label matching
the SID value specified in this leaf should be forwarded according
to the policy. The top-most label (the specified Binding SID)
must be popped from the label stack by the system.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['16..1048575']}),RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'IPV4_EXPLICIT_NULL': {'value': 0}, 'ROUTER_ALERT': {'value': 1}, 'IPV6_EXPLICIT_NULL': {'value': 2}, 'IMPLICIT_NULL': {'value': 3}, 'ENTROPY_LABEL_INDICATOR': {'value': 7}, 'NO_LABEL': {}},),], is_leaf=True, yang_name="mpls-bsid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/policy-forwarding/sr-te', defining_module='openconfig-pf-srte', yang_type='oc-mplst:mpls-label', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mpls_bsid must be of a type compatible with oc-mplst:mpls-label""",
          'defined-type': "oc-mplst:mpls-label",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['16..1048575']}),RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'IPV4_EXPLICIT_NULL': {'value': 0}, 'ROUTER_ALERT': {'value': 1}, 'IPV6_EXPLICIT_NULL': {'value': 2}, 'IMPLICIT_NULL': {'value': 3}, 'ENTROPY_LABEL_INDICATOR': {'value': 7}, 'NO_LABEL': {}},),], is_leaf=True, yang_name="mpls-bsid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/policy-forwarding/sr-te', defining_module='openconfig-pf-srte', yang_type='oc-mplst:mpls-label', is_config=True)""",
        })

    self.__mpls_bsid = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mpls_bsid(self):
    self.__mpls_bsid = YANGDynClass(base=[RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['16..1048575']}),RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'IPV4_EXPLICIT_NULL': {'value': 0}, 'ROUTER_ALERT': {'value': 1}, 'IPV6_EXPLICIT_NULL': {'value': 2}, 'IMPLICIT_NULL': {'value': 3}, 'ENTROPY_LABEL_INDICATOR': {'value': 7}, 'NO_LABEL': {}},),], is_leaf=True, yang_name="mpls-bsid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/policy-forwarding/sr-te', defining_module='openconfig-pf-srte', yang_type='oc-mplst:mpls-label', is_config=True)


  def _get_srte_endpoint(self):
    """
    Getter method for srte_endpoint, mapped from YANG variable /network_instances/network_instance/policy_forwarding/policies/policy/rules/rule/srte/config/srte_endpoint (oc-inet:ip-address)

    YANG Description: When the policy forwarding rule is used for RIB resolution
to a Segment Routing Traffic Engineering path, the policy is used
when the required endpoint (which may be the protocol next-hop)
matches the endpoint address specified in this
leaf. When the leaf is set to all zeros (0.0.0.0 or ::), the endpoint
acts as a wildcard in the policy resolution.
    """
    return self.__srte_endpoint
      
  def _set_srte_endpoint(self, v, load=False):
    """
    Setter method for srte_endpoint, mapped from YANG variable /network_instances/network_instance/policy_forwarding/policies/policy/rules/rule/srte/config/srte_endpoint (oc-inet:ip-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_srte_endpoint is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_srte_endpoint() directly.

    YANG Description: When the policy forwarding rule is used for RIB resolution
to a Segment Routing Traffic Engineering path, the policy is used
when the required endpoint (which may be the protocol next-hop)
matches the endpoint address specified in this
leaf. When the leaf is set to all zeros (0.0.0.0 or ::), the endpoint
acts as a wildcard in the policy resolution.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),], is_leaf=True, yang_name="srte-endpoint", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/policy-forwarding/sr-te', defining_module='openconfig-pf-srte', yang_type='oc-inet:ip-address', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """srte_endpoint must be of a type compatible with oc-inet:ip-address""",
          'defined-type': "oc-inet:ip-address",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),], is_leaf=True, yang_name="srte-endpoint", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/policy-forwarding/sr-te', defining_module='openconfig-pf-srte', yang_type='oc-inet:ip-address', is_config=True)""",
        })

    self.__srte_endpoint = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_srte_endpoint(self):
    self.__srte_endpoint = YANGDynClass(base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),], is_leaf=True, yang_name="srte-endpoint", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/policy-forwarding/sr-te', defining_module='openconfig-pf-srte', yang_type='oc-inet:ip-address', is_config=True)


  def _get_srte_color(self):
    """
    Getter method for srte_color, mapped from YANG variable /network_instances/network_instance/policy_forwarding/policies/policy/rules/rule/srte/config/srte_color (uint32)

    YANG Description: When the policy forwarding rule is used for RIB resolution to a
specific Segment Routing Traffic Engineering path, the policy is
used when the colour required in the policy (which may be specified
based on the value of a BGP extended colour community) matches the
value of this leaf. The colour being set to 0 indicates that the
colour is a wildcard in the policy resolution.
    """
    return self.__srte_color
      
  def _set_srte_color(self, v, load=False):
    """
    Setter method for srte_color, mapped from YANG variable /network_instances/network_instance/policy_forwarding/policies/policy/rules/rule/srte/config/srte_color (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_srte_color is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_srte_color() directly.

    YANG Description: When the policy forwarding rule is used for RIB resolution to a
specific Segment Routing Traffic Engineering path, the policy is
used when the colour required in the policy (which may be specified
based on the value of a BGP extended colour community) matches the
value of this leaf. The colour being set to 0 indicates that the
colour is a wildcard in the policy resolution.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="srte-color", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/policy-forwarding/sr-te', defining_module='openconfig-pf-srte', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """srte_color must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="srte-color", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/policy-forwarding/sr-te', defining_module='openconfig-pf-srte', yang_type='uint32', is_config=True)""",
        })

    self.__srte_color = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_srte_color(self):
    self.__srte_color = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="srte-color", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/policy-forwarding/sr-te', defining_module='openconfig-pf-srte', yang_type='uint32', is_config=True)


  def _get_srte_preference(self):
    """
    Getter method for srte_preference, mapped from YANG variable /network_instances/network_instance/policy_forwarding/policies/policy/rules/rule/srte/config/srte_preference (uint32)

    YANG Description: When there are multiple policy forwarding rules specified for
a particular SR-TE endpoint. The preference is used to resolve
between them. These rules may be learnt from a dynamic routing
protocol, or interface to the device, or from other static
entries configured on the system.
    """
    return self.__srte_preference
      
  def _set_srte_preference(self, v, load=False):
    """
    Setter method for srte_preference, mapped from YANG variable /network_instances/network_instance/policy_forwarding/policies/policy/rules/rule/srte/config/srte_preference (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_srte_preference is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_srte_preference() directly.

    YANG Description: When there are multiple policy forwarding rules specified for
a particular SR-TE endpoint. The preference is used to resolve
between them. These rules may be learnt from a dynamic routing
protocol, or interface to the device, or from other static
entries configured on the system.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="srte-preference", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/policy-forwarding/sr-te', defining_module='openconfig-pf-srte', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """srte_preference must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="srte-preference", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/policy-forwarding/sr-te', defining_module='openconfig-pf-srte', yang_type='uint32', is_config=True)""",
        })

    self.__srte_preference = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_srte_preference(self):
    self.__srte_preference = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="srte-preference", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/policy-forwarding/sr-te', defining_module='openconfig-pf-srte', yang_type='uint32', is_config=True)

  mpls_bsid = __builtin__.property(_get_mpls_bsid, _set_mpls_bsid)
  srte_endpoint = __builtin__.property(_get_srte_endpoint, _set_srte_endpoint)
  srte_color = __builtin__.property(_get_srte_color, _set_srte_color)
  srte_preference = __builtin__.property(_get_srte_preference, _set_srte_preference)


  _pyangbind_elements = OrderedDict([('mpls_bsid', mpls_bsid), ('srte_endpoint', srte_endpoint), ('srte_color', srte_color), ('srte_preference', srte_preference), ])


class config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance - based on the path /network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/srte/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration parameters associated with SR-TE policies.
  """
  __slots__ = ('_path_helper', '_extmethods', '__mpls_bsid','__srte_endpoint','__srte_color','__srte_preference',)

  _yang_name = 'config'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__mpls_bsid = YANGDynClass(base=[RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['16..1048575']}),RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'IPV4_EXPLICIT_NULL': {'value': 0}, 'ROUTER_ALERT': {'value': 1}, 'IPV6_EXPLICIT_NULL': {'value': 2}, 'IMPLICIT_NULL': {'value': 3}, 'ENTROPY_LABEL_INDICATOR': {'value': 7}, 'NO_LABEL': {}},),], is_leaf=True, yang_name="mpls-bsid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/policy-forwarding/sr-te', defining_module='openconfig-pf-srte', yang_type='oc-mplst:mpls-label', is_config=True)
    self.__srte_endpoint = YANGDynClass(base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),], is_leaf=True, yang_name="srte-endpoint", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/policy-forwarding/sr-te', defining_module='openconfig-pf-srte', yang_type='oc-inet:ip-address', is_config=True)
    self.__srte_color = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="srte-color", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/policy-forwarding/sr-te', defining_module='openconfig-pf-srte', yang_type='uint32', is_config=True)
    self.__srte_preference = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="srte-preference", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/policy-forwarding/sr-te', defining_module='openconfig-pf-srte', yang_type='uint32', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'policy-forwarding', 'policies', 'policy', 'rules', 'rule', 'srte', 'config']

  def _get_mpls_bsid(self):
    """
    Getter method for mpls_bsid, mapped from YANG variable /network_instances/network_instance/policy_forwarding/policies/policy/rules/rule/srte/config/mpls_bsid (oc-mplst:mpls-label)

    YANG Description: The Binding SID (BSID) to be matched expressed as an MPLS label. Packets
that are ingress to the system with the top-most label matching
the SID value specified in this leaf should be forwarded according
to the policy. The top-most label (the specified Binding SID)
must be popped from the label stack by the system.
    """
    return self.__mpls_bsid
      
  def _set_mpls_bsid(self, v, load=False):
    """
    Setter method for mpls_bsid, mapped from YANG variable /network_instances/network_instance/policy_forwarding/policies/policy/rules/rule/srte/config/mpls_bsid (oc-mplst:mpls-label)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mpls_bsid is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mpls_bsid() directly.

    YANG Description: The Binding SID (BSID) to be matched expressed as an MPLS label. Packets
that are ingress to the system with the top-most label matching
the SID value specified in this leaf should be forwarded according
to the policy. The top-most label (the specified Binding SID)
must be popped from the label stack by the system.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['16..1048575']}),RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'IPV4_EXPLICIT_NULL': {'value': 0}, 'ROUTER_ALERT': {'value': 1}, 'IPV6_EXPLICIT_NULL': {'value': 2}, 'IMPLICIT_NULL': {'value': 3}, 'ENTROPY_LABEL_INDICATOR': {'value': 7}, 'NO_LABEL': {}},),], is_leaf=True, yang_name="mpls-bsid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/policy-forwarding/sr-te', defining_module='openconfig-pf-srte', yang_type='oc-mplst:mpls-label', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mpls_bsid must be of a type compatible with oc-mplst:mpls-label""",
          'defined-type': "oc-mplst:mpls-label",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['16..1048575']}),RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'IPV4_EXPLICIT_NULL': {'value': 0}, 'ROUTER_ALERT': {'value': 1}, 'IPV6_EXPLICIT_NULL': {'value': 2}, 'IMPLICIT_NULL': {'value': 3}, 'ENTROPY_LABEL_INDICATOR': {'value': 7}, 'NO_LABEL': {}},),], is_leaf=True, yang_name="mpls-bsid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/policy-forwarding/sr-te', defining_module='openconfig-pf-srte', yang_type='oc-mplst:mpls-label', is_config=True)""",
        })

    self.__mpls_bsid = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mpls_bsid(self):
    self.__mpls_bsid = YANGDynClass(base=[RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['16..1048575']}),RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'IPV4_EXPLICIT_NULL': {'value': 0}, 'ROUTER_ALERT': {'value': 1}, 'IPV6_EXPLICIT_NULL': {'value': 2}, 'IMPLICIT_NULL': {'value': 3}, 'ENTROPY_LABEL_INDICATOR': {'value': 7}, 'NO_LABEL': {}},),], is_leaf=True, yang_name="mpls-bsid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/policy-forwarding/sr-te', defining_module='openconfig-pf-srte', yang_type='oc-mplst:mpls-label', is_config=True)


  def _get_srte_endpoint(self):
    """
    Getter method for srte_endpoint, mapped from YANG variable /network_instances/network_instance/policy_forwarding/policies/policy/rules/rule/srte/config/srte_endpoint (oc-inet:ip-address)

    YANG Description: When the policy forwarding rule is used for RIB resolution
to a Segment Routing Traffic Engineering path, the policy is used
when the required endpoint (which may be the protocol next-hop)
matches the endpoint address specified in this
leaf. When the leaf is set to all zeros (0.0.0.0 or ::), the endpoint
acts as a wildcard in the policy resolution.
    """
    return self.__srte_endpoint
      
  def _set_srte_endpoint(self, v, load=False):
    """
    Setter method for srte_endpoint, mapped from YANG variable /network_instances/network_instance/policy_forwarding/policies/policy/rules/rule/srte/config/srte_endpoint (oc-inet:ip-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_srte_endpoint is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_srte_endpoint() directly.

    YANG Description: When the policy forwarding rule is used for RIB resolution
to a Segment Routing Traffic Engineering path, the policy is used
when the required endpoint (which may be the protocol next-hop)
matches the endpoint address specified in this
leaf. When the leaf is set to all zeros (0.0.0.0 or ::), the endpoint
acts as a wildcard in the policy resolution.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),], is_leaf=True, yang_name="srte-endpoint", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/policy-forwarding/sr-te', defining_module='openconfig-pf-srte', yang_type='oc-inet:ip-address', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """srte_endpoint must be of a type compatible with oc-inet:ip-address""",
          'defined-type': "oc-inet:ip-address",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),], is_leaf=True, yang_name="srte-endpoint", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/policy-forwarding/sr-te', defining_module='openconfig-pf-srte', yang_type='oc-inet:ip-address', is_config=True)""",
        })

    self.__srte_endpoint = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_srte_endpoint(self):
    self.__srte_endpoint = YANGDynClass(base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),], is_leaf=True, yang_name="srte-endpoint", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/policy-forwarding/sr-te', defining_module='openconfig-pf-srte', yang_type='oc-inet:ip-address', is_config=True)


  def _get_srte_color(self):
    """
    Getter method for srte_color, mapped from YANG variable /network_instances/network_instance/policy_forwarding/policies/policy/rules/rule/srte/config/srte_color (uint32)

    YANG Description: When the policy forwarding rule is used for RIB resolution to a
specific Segment Routing Traffic Engineering path, the policy is
used when the colour required in the policy (which may be specified
based on the value of a BGP extended colour community) matches the
value of this leaf. The colour being set to 0 indicates that the
colour is a wildcard in the policy resolution.
    """
    return self.__srte_color
      
  def _set_srte_color(self, v, load=False):
    """
    Setter method for srte_color, mapped from YANG variable /network_instances/network_instance/policy_forwarding/policies/policy/rules/rule/srte/config/srte_color (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_srte_color is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_srte_color() directly.

    YANG Description: When the policy forwarding rule is used for RIB resolution to a
specific Segment Routing Traffic Engineering path, the policy is
used when the colour required in the policy (which may be specified
based on the value of a BGP extended colour community) matches the
value of this leaf. The colour being set to 0 indicates that the
colour is a wildcard in the policy resolution.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="srte-color", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/policy-forwarding/sr-te', defining_module='openconfig-pf-srte', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """srte_color must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="srte-color", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/policy-forwarding/sr-te', defining_module='openconfig-pf-srte', yang_type='uint32', is_config=True)""",
        })

    self.__srte_color = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_srte_color(self):
    self.__srte_color = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="srte-color", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/policy-forwarding/sr-te', defining_module='openconfig-pf-srte', yang_type='uint32', is_config=True)


  def _get_srte_preference(self):
    """
    Getter method for srte_preference, mapped from YANG variable /network_instances/network_instance/policy_forwarding/policies/policy/rules/rule/srte/config/srte_preference (uint32)

    YANG Description: When there are multiple policy forwarding rules specified for
a particular SR-TE endpoint. The preference is used to resolve
between them. These rules may be learnt from a dynamic routing
protocol, or interface to the device, or from other static
entries configured on the system.
    """
    return self.__srte_preference
      
  def _set_srte_preference(self, v, load=False):
    """
    Setter method for srte_preference, mapped from YANG variable /network_instances/network_instance/policy_forwarding/policies/policy/rules/rule/srte/config/srte_preference (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_srte_preference is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_srte_preference() directly.

    YANG Description: When there are multiple policy forwarding rules specified for
a particular SR-TE endpoint. The preference is used to resolve
between them. These rules may be learnt from a dynamic routing
protocol, or interface to the device, or from other static
entries configured on the system.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="srte-preference", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/policy-forwarding/sr-te', defining_module='openconfig-pf-srte', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """srte_preference must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="srte-preference", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/policy-forwarding/sr-te', defining_module='openconfig-pf-srte', yang_type='uint32', is_config=True)""",
        })

    self.__srte_preference = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_srte_preference(self):
    self.__srte_preference = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="srte-preference", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/policy-forwarding/sr-te', defining_module='openconfig-pf-srte', yang_type='uint32', is_config=True)

  mpls_bsid = __builtin__.property(_get_mpls_bsid, _set_mpls_bsid)
  srte_endpoint = __builtin__.property(_get_srte_endpoint, _set_srte_endpoint)
  srte_color = __builtin__.property(_get_srte_color, _set_srte_color)
  srte_preference = __builtin__.property(_get_srte_preference, _set_srte_preference)


  _pyangbind_elements = OrderedDict([('mpls_bsid', mpls_bsid), ('srte_endpoint', srte_endpoint), ('srte_color', srte_color), ('srte_preference', srte_preference), ])


class config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance-l2 - based on the path /network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/srte/config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configuration parameters associated with SR-TE policies.
  """
  __slots__ = ('_path_helper', '_extmethods', '__mpls_bsid','__srte_endpoint','__srte_color','__srte_preference',)

  _yang_name = 'config'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__mpls_bsid = YANGDynClass(base=[RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['16..1048575']}),RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'IPV4_EXPLICIT_NULL': {'value': 0}, 'ROUTER_ALERT': {'value': 1}, 'IPV6_EXPLICIT_NULL': {'value': 2}, 'IMPLICIT_NULL': {'value': 3}, 'ENTROPY_LABEL_INDICATOR': {'value': 7}, 'NO_LABEL': {}},),], is_leaf=True, yang_name="mpls-bsid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/policy-forwarding/sr-te', defining_module='openconfig-pf-srte', yang_type='oc-mplst:mpls-label', is_config=True)
    self.__srte_endpoint = YANGDynClass(base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),], is_leaf=True, yang_name="srte-endpoint", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/policy-forwarding/sr-te', defining_module='openconfig-pf-srte', yang_type='oc-inet:ip-address', is_config=True)
    self.__srte_color = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="srte-color", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/policy-forwarding/sr-te', defining_module='openconfig-pf-srte', yang_type='uint32', is_config=True)
    self.__srte_preference = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="srte-preference", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/policy-forwarding/sr-te', defining_module='openconfig-pf-srte', yang_type='uint32', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'policy-forwarding', 'policies', 'policy', 'rules', 'rule', 'srte', 'config']

  def _get_mpls_bsid(self):
    """
    Getter method for mpls_bsid, mapped from YANG variable /network_instances/network_instance/policy_forwarding/policies/policy/rules/rule/srte/config/mpls_bsid (oc-mplst:mpls-label)

    YANG Description: The Binding SID (BSID) to be matched expressed as an MPLS label. Packets
that are ingress to the system with the top-most label matching
the SID value specified in this leaf should be forwarded according
to the policy. The top-most label (the specified Binding SID)
must be popped from the label stack by the system.
    """
    return self.__mpls_bsid
      
  def _set_mpls_bsid(self, v, load=False):
    """
    Setter method for mpls_bsid, mapped from YANG variable /network_instances/network_instance/policy_forwarding/policies/policy/rules/rule/srte/config/mpls_bsid (oc-mplst:mpls-label)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mpls_bsid is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mpls_bsid() directly.

    YANG Description: The Binding SID (BSID) to be matched expressed as an MPLS label. Packets
that are ingress to the system with the top-most label matching
the SID value specified in this leaf should be forwarded according
to the policy. The top-most label (the specified Binding SID)
must be popped from the label stack by the system.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['16..1048575']}),RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'IPV4_EXPLICIT_NULL': {'value': 0}, 'ROUTER_ALERT': {'value': 1}, 'IPV6_EXPLICIT_NULL': {'value': 2}, 'IMPLICIT_NULL': {'value': 3}, 'ENTROPY_LABEL_INDICATOR': {'value': 7}, 'NO_LABEL': {}},),], is_leaf=True, yang_name="mpls-bsid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/policy-forwarding/sr-te', defining_module='openconfig-pf-srte', yang_type='oc-mplst:mpls-label', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mpls_bsid must be of a type compatible with oc-mplst:mpls-label""",
          'defined-type': "oc-mplst:mpls-label",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['16..1048575']}),RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'IPV4_EXPLICIT_NULL': {'value': 0}, 'ROUTER_ALERT': {'value': 1}, 'IPV6_EXPLICIT_NULL': {'value': 2}, 'IMPLICIT_NULL': {'value': 3}, 'ENTROPY_LABEL_INDICATOR': {'value': 7}, 'NO_LABEL': {}},),], is_leaf=True, yang_name="mpls-bsid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/policy-forwarding/sr-te', defining_module='openconfig-pf-srte', yang_type='oc-mplst:mpls-label', is_config=True)""",
        })

    self.__mpls_bsid = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mpls_bsid(self):
    self.__mpls_bsid = YANGDynClass(base=[RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': ['16..1048575']}),RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'IPV4_EXPLICIT_NULL': {'value': 0}, 'ROUTER_ALERT': {'value': 1}, 'IPV6_EXPLICIT_NULL': {'value': 2}, 'IMPLICIT_NULL': {'value': 3}, 'ENTROPY_LABEL_INDICATOR': {'value': 7}, 'NO_LABEL': {}},),], is_leaf=True, yang_name="mpls-bsid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/policy-forwarding/sr-te', defining_module='openconfig-pf-srte', yang_type='oc-mplst:mpls-label', is_config=True)


  def _get_srte_endpoint(self):
    """
    Getter method for srte_endpoint, mapped from YANG variable /network_instances/network_instance/policy_forwarding/policies/policy/rules/rule/srte/config/srte_endpoint (oc-inet:ip-address)

    YANG Description: When the policy forwarding rule is used for RIB resolution
to a Segment Routing Traffic Engineering path, the policy is used
when the required endpoint (which may be the protocol next-hop)
matches the endpoint address specified in this
leaf. When the leaf is set to all zeros (0.0.0.0 or ::), the endpoint
acts as a wildcard in the policy resolution.
    """
    return self.__srte_endpoint
      
  def _set_srte_endpoint(self, v, load=False):
    """
    Setter method for srte_endpoint, mapped from YANG variable /network_instances/network_instance/policy_forwarding/policies/policy/rules/rule/srte/config/srte_endpoint (oc-inet:ip-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_srte_endpoint is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_srte_endpoint() directly.

    YANG Description: When the policy forwarding rule is used for RIB resolution
to a Segment Routing Traffic Engineering path, the policy is used
when the required endpoint (which may be the protocol next-hop)
matches the endpoint address specified in this
leaf. When the leaf is set to all zeros (0.0.0.0 or ::), the endpoint
acts as a wildcard in the policy resolution.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),], is_leaf=True, yang_name="srte-endpoint", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/policy-forwarding/sr-te', defining_module='openconfig-pf-srte', yang_type='oc-inet:ip-address', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """srte_endpoint must be of a type compatible with oc-inet:ip-address""",
          'defined-type': "oc-inet:ip-address",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),], is_leaf=True, yang_name="srte-endpoint", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/policy-forwarding/sr-te', defining_module='openconfig-pf-srte', yang_type='oc-inet:ip-address', is_config=True)""",
        })

    self.__srte_endpoint = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_srte_endpoint(self):
    self.__srte_endpoint = YANGDynClass(base=[RestrictedClassType(base_type=str, restriction_dict={'pattern': '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}'}),RestrictedClassType(base_type=str, restriction_dict={'pattern': '(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))'}),], is_leaf=True, yang_name="srte-endpoint", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/policy-forwarding/sr-te', defining_module='openconfig-pf-srte', yang_type='oc-inet:ip-address', is_config=True)


  def _get_srte_color(self):
    """
    Getter method for srte_color, mapped from YANG variable /network_instances/network_instance/policy_forwarding/policies/policy/rules/rule/srte/config/srte_color (uint32)

    YANG Description: When the policy forwarding rule is used for RIB resolution to a
specific Segment Routing Traffic Engineering path, the policy is
used when the colour required in the policy (which may be specified
based on the value of a BGP extended colour community) matches the
value of this leaf. The colour being set to 0 indicates that the
colour is a wildcard in the policy resolution.
    """
    return self.__srte_color
      
  def _set_srte_color(self, v, load=False):
    """
    Setter method for srte_color, mapped from YANG variable /network_instances/network_instance/policy_forwarding/policies/policy/rules/rule/srte/config/srte_color (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_srte_color is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_srte_color() directly.

    YANG Description: When the policy forwarding rule is used for RIB resolution to a
specific Segment Routing Traffic Engineering path, the policy is
used when the colour required in the policy (which may be specified
based on the value of a BGP extended colour community) matches the
value of this leaf. The colour being set to 0 indicates that the
colour is a wildcard in the policy resolution.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="srte-color", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/policy-forwarding/sr-te', defining_module='openconfig-pf-srte', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """srte_color must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="srte-color", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/policy-forwarding/sr-te', defining_module='openconfig-pf-srte', yang_type='uint32', is_config=True)""",
        })

    self.__srte_color = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_srte_color(self):
    self.__srte_color = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="srte-color", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/policy-forwarding/sr-te', defining_module='openconfig-pf-srte', yang_type='uint32', is_config=True)


  def _get_srte_preference(self):
    """
    Getter method for srte_preference, mapped from YANG variable /network_instances/network_instance/policy_forwarding/policies/policy/rules/rule/srte/config/srte_preference (uint32)

    YANG Description: When there are multiple policy forwarding rules specified for
a particular SR-TE endpoint. The preference is used to resolve
between them. These rules may be learnt from a dynamic routing
protocol, or interface to the device, or from other static
entries configured on the system.
    """
    return self.__srte_preference
      
  def _set_srte_preference(self, v, load=False):
    """
    Setter method for srte_preference, mapped from YANG variable /network_instances/network_instance/policy_forwarding/policies/policy/rules/rule/srte/config/srte_preference (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_srte_preference is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_srte_preference() directly.

    YANG Description: When there are multiple policy forwarding rules specified for
a particular SR-TE endpoint. The preference is used to resolve
between them. These rules may be learnt from a dynamic routing
protocol, or interface to the device, or from other static
entries configured on the system.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="srte-preference", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/policy-forwarding/sr-te', defining_module='openconfig-pf-srte', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """srte_preference must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="srte-preference", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/policy-forwarding/sr-te', defining_module='openconfig-pf-srte', yang_type='uint32', is_config=True)""",
        })

    self.__srte_preference = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_srte_preference(self):
    self.__srte_preference = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="srte-preference", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/policy-forwarding/sr-te', defining_module='openconfig-pf-srte', yang_type='uint32', is_config=True)

  mpls_bsid = __builtin__.property(_get_mpls_bsid, _set_mpls_bsid)
  srte_endpoint = __builtin__.property(_get_srte_endpoint, _set_srte_endpoint)
  srte_color = __builtin__.property(_get_srte_color, _set_srte_color)
  srte_preference = __builtin__.property(_get_srte_preference, _set_srte_preference)


  _pyangbind_elements = OrderedDict([('mpls_bsid', mpls_bsid), ('srte_endpoint', srte_endpoint), ('srte_color', srte_color), ('srte_preference', srte_preference), ])


