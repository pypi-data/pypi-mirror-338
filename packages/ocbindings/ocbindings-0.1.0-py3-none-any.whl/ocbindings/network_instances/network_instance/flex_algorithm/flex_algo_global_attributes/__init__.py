# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
from . import srlgs
from . import flex_algo_admin_groups
class flex_algo_global_attributes(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance - based on the path /network-instances/network-instance/flex-algorithm/flex-algo-global-attributes. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Flexible Algorithm global attributes
  """
  __slots__ = ('_path_helper', '_extmethods', '__srlgs','__flex_algo_admin_groups',)

  _yang_name = 'flex-algo-global-attributes'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__srlgs = YANGDynClass(base=srlgs.srlgs, is_container='container', yang_name="srlgs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='container', is_config=True)
    self.__flex_algo_admin_groups = YANGDynClass(base=flex_algo_admin_groups.flex_algo_admin_groups, is_container='container', yang_name="flex-algo-admin-groups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'flex-algorithm', 'flex-algo-global-attributes']

  def _get_srlgs(self):
    """
    Getter method for srlgs, mapped from YANG variable /network_instances/network_instance/flex_algorithm/flex_algo_global_attributes/srlgs (container)

    YANG Description: Shared risk link groups attributes
    """
    return self.__srlgs
      
  def _set_srlgs(self, v, load=False):
    """
    Setter method for srlgs, mapped from YANG variable /network_instances/network_instance/flex_algorithm/flex_algo_global_attributes/srlgs (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_srlgs is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_srlgs() directly.

    YANG Description: Shared risk link groups attributes
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=srlgs.srlgs, is_container='container', yang_name="srlgs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """srlgs must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=srlgs.srlgs, is_container='container', yang_name="srlgs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='container', is_config=True)""",
        })

    self.__srlgs = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_srlgs(self):
    self.__srlgs = YANGDynClass(base=srlgs.srlgs, is_container='container', yang_name="srlgs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='container', is_config=True)


  def _get_flex_algo_admin_groups(self):
    """
    Getter method for flex_algo_admin_groups, mapped from YANG variable /network_instances/network_instance/flex_algorithm/flex_algo_global_attributes/flex_algo_admin_groups (container)

    YANG Description: Top-level container for admin-groups configuration
and state
    """
    return self.__flex_algo_admin_groups
      
  def _set_flex_algo_admin_groups(self, v, load=False):
    """
    Setter method for flex_algo_admin_groups, mapped from YANG variable /network_instances/network_instance/flex_algorithm/flex_algo_global_attributes/flex_algo_admin_groups (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_flex_algo_admin_groups is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_flex_algo_admin_groups() directly.

    YANG Description: Top-level container for admin-groups configuration
and state
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=flex_algo_admin_groups.flex_algo_admin_groups, is_container='container', yang_name="flex-algo-admin-groups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """flex_algo_admin_groups must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=flex_algo_admin_groups.flex_algo_admin_groups, is_container='container', yang_name="flex-algo-admin-groups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='container', is_config=True)""",
        })

    self.__flex_algo_admin_groups = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_flex_algo_admin_groups(self):
    self.__flex_algo_admin_groups = YANGDynClass(base=flex_algo_admin_groups.flex_algo_admin_groups, is_container='container', yang_name="flex-algo-admin-groups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='container', is_config=True)

  srlgs = __builtin__.property(_get_srlgs, _set_srlgs)
  flex_algo_admin_groups = __builtin__.property(_get_flex_algo_admin_groups, _set_flex_algo_admin_groups)


  _pyangbind_elements = OrderedDict([('srlgs', srlgs), ('flex_algo_admin_groups', flex_algo_admin_groups), ])


from . import srlgs
from . import flex_algo_admin_groups
class flex_algo_global_attributes(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance-l2 - based on the path /network-instances/network-instance/flex-algorithm/flex-algo-global-attributes. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Flexible Algorithm global attributes
  """
  __slots__ = ('_path_helper', '_extmethods', '__srlgs','__flex_algo_admin_groups',)

  _yang_name = 'flex-algo-global-attributes'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__srlgs = YANGDynClass(base=srlgs.srlgs, is_container='container', yang_name="srlgs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='container', is_config=True)
    self.__flex_algo_admin_groups = YANGDynClass(base=flex_algo_admin_groups.flex_algo_admin_groups, is_container='container', yang_name="flex-algo-admin-groups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'flex-algorithm', 'flex-algo-global-attributes']

  def _get_srlgs(self):
    """
    Getter method for srlgs, mapped from YANG variable /network_instances/network_instance/flex_algorithm/flex_algo_global_attributes/srlgs (container)

    YANG Description: Shared risk link groups attributes
    """
    return self.__srlgs
      
  def _set_srlgs(self, v, load=False):
    """
    Setter method for srlgs, mapped from YANG variable /network_instances/network_instance/flex_algorithm/flex_algo_global_attributes/srlgs (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_srlgs is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_srlgs() directly.

    YANG Description: Shared risk link groups attributes
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=srlgs.srlgs, is_container='container', yang_name="srlgs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """srlgs must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=srlgs.srlgs, is_container='container', yang_name="srlgs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='container', is_config=True)""",
        })

    self.__srlgs = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_srlgs(self):
    self.__srlgs = YANGDynClass(base=srlgs.srlgs, is_container='container', yang_name="srlgs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='container', is_config=True)


  def _get_flex_algo_admin_groups(self):
    """
    Getter method for flex_algo_admin_groups, mapped from YANG variable /network_instances/network_instance/flex_algorithm/flex_algo_global_attributes/flex_algo_admin_groups (container)

    YANG Description: Top-level container for admin-groups configuration
and state
    """
    return self.__flex_algo_admin_groups
      
  def _set_flex_algo_admin_groups(self, v, load=False):
    """
    Setter method for flex_algo_admin_groups, mapped from YANG variable /network_instances/network_instance/flex_algorithm/flex_algo_global_attributes/flex_algo_admin_groups (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_flex_algo_admin_groups is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_flex_algo_admin_groups() directly.

    YANG Description: Top-level container for admin-groups configuration
and state
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=flex_algo_admin_groups.flex_algo_admin_groups, is_container='container', yang_name="flex-algo-admin-groups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """flex_algo_admin_groups must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=flex_algo_admin_groups.flex_algo_admin_groups, is_container='container', yang_name="flex-algo-admin-groups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='container', is_config=True)""",
        })

    self.__flex_algo_admin_groups = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_flex_algo_admin_groups(self):
    self.__flex_algo_admin_groups = YANGDynClass(base=flex_algo_admin_groups.flex_algo_admin_groups, is_container='container', yang_name="flex-algo-admin-groups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='container', is_config=True)

  srlgs = __builtin__.property(_get_srlgs, _set_srlgs)
  flex_algo_admin_groups = __builtin__.property(_get_flex_algo_admin_groups, _set_flex_algo_admin_groups)


  _pyangbind_elements = OrderedDict([('srlgs', srlgs), ('flex_algo_admin_groups', flex_algo_admin_groups), ])


from . import srlgs
from . import flex_algo_admin_groups
class flex_algo_global_attributes(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance - based on the path /network-instances/network-instance/flex-algorithm/flex-algo-global-attributes. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Flexible Algorithm global attributes
  """
  __slots__ = ('_path_helper', '_extmethods', '__srlgs','__flex_algo_admin_groups',)

  _yang_name = 'flex-algo-global-attributes'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__srlgs = YANGDynClass(base=srlgs.srlgs, is_container='container', yang_name="srlgs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='container', is_config=True)
    self.__flex_algo_admin_groups = YANGDynClass(base=flex_algo_admin_groups.flex_algo_admin_groups, is_container='container', yang_name="flex-algo-admin-groups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'flex-algorithm', 'flex-algo-global-attributes']

  def _get_srlgs(self):
    """
    Getter method for srlgs, mapped from YANG variable /network_instances/network_instance/flex_algorithm/flex_algo_global_attributes/srlgs (container)

    YANG Description: Shared risk link groups attributes
    """
    return self.__srlgs
      
  def _set_srlgs(self, v, load=False):
    """
    Setter method for srlgs, mapped from YANG variable /network_instances/network_instance/flex_algorithm/flex_algo_global_attributes/srlgs (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_srlgs is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_srlgs() directly.

    YANG Description: Shared risk link groups attributes
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=srlgs.srlgs, is_container='container', yang_name="srlgs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """srlgs must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=srlgs.srlgs, is_container='container', yang_name="srlgs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='container', is_config=True)""",
        })

    self.__srlgs = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_srlgs(self):
    self.__srlgs = YANGDynClass(base=srlgs.srlgs, is_container='container', yang_name="srlgs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='container', is_config=True)


  def _get_flex_algo_admin_groups(self):
    """
    Getter method for flex_algo_admin_groups, mapped from YANG variable /network_instances/network_instance/flex_algorithm/flex_algo_global_attributes/flex_algo_admin_groups (container)

    YANG Description: Top-level container for admin-groups configuration
and state
    """
    return self.__flex_algo_admin_groups
      
  def _set_flex_algo_admin_groups(self, v, load=False):
    """
    Setter method for flex_algo_admin_groups, mapped from YANG variable /network_instances/network_instance/flex_algorithm/flex_algo_global_attributes/flex_algo_admin_groups (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_flex_algo_admin_groups is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_flex_algo_admin_groups() directly.

    YANG Description: Top-level container for admin-groups configuration
and state
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=flex_algo_admin_groups.flex_algo_admin_groups, is_container='container', yang_name="flex-algo-admin-groups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """flex_algo_admin_groups must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=flex_algo_admin_groups.flex_algo_admin_groups, is_container='container', yang_name="flex-algo-admin-groups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='container', is_config=True)""",
        })

    self.__flex_algo_admin_groups = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_flex_algo_admin_groups(self):
    self.__flex_algo_admin_groups = YANGDynClass(base=flex_algo_admin_groups.flex_algo_admin_groups, is_container='container', yang_name="flex-algo-admin-groups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='container', is_config=True)

  srlgs = __builtin__.property(_get_srlgs, _set_srlgs)
  flex_algo_admin_groups = __builtin__.property(_get_flex_algo_admin_groups, _set_flex_algo_admin_groups)


  _pyangbind_elements = OrderedDict([('srlgs', srlgs), ('flex_algo_admin_groups', flex_algo_admin_groups), ])


from . import srlgs
from . import flex_algo_admin_groups
class flex_algo_global_attributes(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-network-instance-l2 - based on the path /network-instances/network-instance/flex-algorithm/flex-algo-global-attributes. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Flexible Algorithm global attributes
  """
  __slots__ = ('_path_helper', '_extmethods', '__srlgs','__flex_algo_admin_groups',)

  _yang_name = 'flex-algo-global-attributes'
  _yang_namespace = 'http://openconfig.net/yang/network-instance'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__srlgs = YANGDynClass(base=srlgs.srlgs, is_container='container', yang_name="srlgs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='container', is_config=True)
    self.__flex_algo_admin_groups = YANGDynClass(base=flex_algo_admin_groups.flex_algo_admin_groups, is_container='container', yang_name="flex-algo-admin-groups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['network-instances', 'network-instance', 'flex-algorithm', 'flex-algo-global-attributes']

  def _get_srlgs(self):
    """
    Getter method for srlgs, mapped from YANG variable /network_instances/network_instance/flex_algorithm/flex_algo_global_attributes/srlgs (container)

    YANG Description: Shared risk link groups attributes
    """
    return self.__srlgs
      
  def _set_srlgs(self, v, load=False):
    """
    Setter method for srlgs, mapped from YANG variable /network_instances/network_instance/flex_algorithm/flex_algo_global_attributes/srlgs (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_srlgs is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_srlgs() directly.

    YANG Description: Shared risk link groups attributes
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=srlgs.srlgs, is_container='container', yang_name="srlgs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """srlgs must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=srlgs.srlgs, is_container='container', yang_name="srlgs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='container', is_config=True)""",
        })

    self.__srlgs = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_srlgs(self):
    self.__srlgs = YANGDynClass(base=srlgs.srlgs, is_container='container', yang_name="srlgs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='container', is_config=True)


  def _get_flex_algo_admin_groups(self):
    """
    Getter method for flex_algo_admin_groups, mapped from YANG variable /network_instances/network_instance/flex_algorithm/flex_algo_global_attributes/flex_algo_admin_groups (container)

    YANG Description: Top-level container for admin-groups configuration
and state
    """
    return self.__flex_algo_admin_groups
      
  def _set_flex_algo_admin_groups(self, v, load=False):
    """
    Setter method for flex_algo_admin_groups, mapped from YANG variable /network_instances/network_instance/flex_algorithm/flex_algo_global_attributes/flex_algo_admin_groups (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_flex_algo_admin_groups is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_flex_algo_admin_groups() directly.

    YANG Description: Top-level container for admin-groups configuration
and state
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=flex_algo_admin_groups.flex_algo_admin_groups, is_container='container', yang_name="flex-algo-admin-groups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """flex_algo_admin_groups must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=flex_algo_admin_groups.flex_algo_admin_groups, is_container='container', yang_name="flex-algo-admin-groups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='container', is_config=True)""",
        })

    self.__flex_algo_admin_groups = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_flex_algo_admin_groups(self):
    self.__flex_algo_admin_groups = YANGDynClass(base=flex_algo_admin_groups.flex_algo_admin_groups, is_container='container', yang_name="flex-algo-admin-groups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/flexalgo', defining_module='openconfig-flexalgo', yang_type='container', is_config=True)

  srlgs = __builtin__.property(_get_srlgs, _set_srlgs)
  flex_algo_admin_groups = __builtin__.property(_get_flex_algo_admin_groups, _set_flex_algo_admin_groups)


  _pyangbind_elements = OrderedDict([('srlgs', srlgs), ('flex_algo_admin_groups', flex_algo_admin_groups), ])


