# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
from . import instances
from . import transparent_clock_default_ds
from . import transparent_clock_ports
class ptp(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-ptp - based on the path /ptp. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Contains all YANG nodes for the PTP data sets. This hierarchy can be
augmented with YANG nodes for a specific vendor or PTP Profile.
  """
  __slots__ = ('_path_helper', '_extmethods', '__instances','__transparent_clock_default_ds','__transparent_clock_ports',)

  _yang_name = 'ptp'
  _yang_namespace = 'http://openconfig.net/yang/ptp'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__instances = YANGDynClass(base=instances.instances, is_container='container', yang_name="instances", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='container', is_config=True)
    self.__transparent_clock_default_ds = YANGDynClass(base=transparent_clock_default_ds.transparent_clock_default_ds, is_container='container', yang_name="transparent-clock-default-ds", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='container', is_config=True)
    self.__transparent_clock_ports = YANGDynClass(base=transparent_clock_ports.transparent_clock_ports, is_container='container', yang_name="transparent-clock-ports", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['ptp']

  def _get_instances(self):
    """
    Getter method for instances, mapped from YANG variable /ptp/instances (container)

    YANG Description: YANG container that is used to get all PTP Instances. YANG does not
allow get of all elements in a YANG list, so a YANG container wrapping
the YANG list is provided for that purpose. The naming convention uses
plural for the wrapping YANG container, and singular for the YANG list.
    """
    return self.__instances
      
  def _set_instances(self, v, load=False):
    """
    Setter method for instances, mapped from YANG variable /ptp/instances (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_instances is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_instances() directly.

    YANG Description: YANG container that is used to get all PTP Instances. YANG does not
allow get of all elements in a YANG list, so a YANG container wrapping
the YANG list is provided for that purpose. The naming convention uses
plural for the wrapping YANG container, and singular for the YANG list.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=instances.instances, is_container='container', yang_name="instances", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """instances must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=instances.instances, is_container='container', yang_name="instances", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='container', is_config=True)""",
        })

    self.__instances = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_instances(self):
    self.__instances = YANGDynClass(base=instances.instances, is_container='container', yang_name="instances", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='container', is_config=True)


  def _get_transparent_clock_default_ds(self):
    """
    Getter method for transparent_clock_default_ds, mapped from YANG variable /ptp/transparent_clock_default_ds (container)

    YANG Description: This default data set was specified in
IEEE Std 1588-2008, and under some interpretations,
it applied to all domains, which in turn means that it
represents multiple Transparent Clocks.
In IEEE Std 1588-2019, this data set is specified as
applying to the PTP Node (all domains), but the data set is
deprecated. For new designs, the standard recommends that
Transparent Clocks use the PTP Instance data sets
(i.e., /ptp/instances/instance[]), such that each
Transparent Clock supports a single PTP Instance and
domain.
    """
    return self.__transparent_clock_default_ds
      
  def _set_transparent_clock_default_ds(self, v, load=False):
    """
    Setter method for transparent_clock_default_ds, mapped from YANG variable /ptp/transparent_clock_default_ds (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_transparent_clock_default_ds is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_transparent_clock_default_ds() directly.

    YANG Description: This default data set was specified in
IEEE Std 1588-2008, and under some interpretations,
it applied to all domains, which in turn means that it
represents multiple Transparent Clocks.
In IEEE Std 1588-2019, this data set is specified as
applying to the PTP Node (all domains), but the data set is
deprecated. For new designs, the standard recommends that
Transparent Clocks use the PTP Instance data sets
(i.e., /ptp/instances/instance[]), such that each
Transparent Clock supports a single PTP Instance and
domain.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=transparent_clock_default_ds.transparent_clock_default_ds, is_container='container', yang_name="transparent-clock-default-ds", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """transparent_clock_default_ds must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=transparent_clock_default_ds.transparent_clock_default_ds, is_container='container', yang_name="transparent-clock-default-ds", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='container', is_config=True)""",
        })

    self.__transparent_clock_default_ds = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_transparent_clock_default_ds(self):
    self.__transparent_clock_default_ds = YANGDynClass(base=transparent_clock_default_ds.transparent_clock_default_ds, is_container='container', yang_name="transparent-clock-default-ds", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='container', is_config=True)


  def _get_transparent_clock_ports(self):
    """
    Getter method for transparent_clock_ports, mapped from YANG variable /ptp/transparent_clock_ports (container)

    YANG Description: YANG container that is used to get all ports of the
IEEE Std 1588 transparentClockPortDS.
YANG does not allow get of all elements in a YANG list,
so a YANG container wrapping the YANG list is provided for
that purpose. The naming convention uses plural for the
wrapping YANG container, and singular for the YANG list.
    """
    return self.__transparent_clock_ports
      
  def _set_transparent_clock_ports(self, v, load=False):
    """
    Setter method for transparent_clock_ports, mapped from YANG variable /ptp/transparent_clock_ports (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_transparent_clock_ports is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_transparent_clock_ports() directly.

    YANG Description: YANG container that is used to get all ports of the
IEEE Std 1588 transparentClockPortDS.
YANG does not allow get of all elements in a YANG list,
so a YANG container wrapping the YANG list is provided for
that purpose. The naming convention uses plural for the
wrapping YANG container, and singular for the YANG list.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=transparent_clock_ports.transparent_clock_ports, is_container='container', yang_name="transparent-clock-ports", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """transparent_clock_ports must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=transparent_clock_ports.transparent_clock_ports, is_container='container', yang_name="transparent-clock-ports", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='container', is_config=True)""",
        })

    self.__transparent_clock_ports = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_transparent_clock_ports(self):
    self.__transparent_clock_ports = YANGDynClass(base=transparent_clock_ports.transparent_clock_ports, is_container='container', yang_name="transparent-clock-ports", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='container', is_config=True)

  instances = __builtin__.property(_get_instances, _set_instances)
  transparent_clock_default_ds = __builtin__.property(_get_transparent_clock_default_ds, _set_transparent_clock_default_ds)
  transparent_clock_ports = __builtin__.property(_get_transparent_clock_ports, _set_transparent_clock_ports)


  _pyangbind_elements = OrderedDict([('instances', instances), ('transparent_clock_default_ds', transparent_clock_default_ds), ('transparent_clock_ports', transparent_clock_ports), ])


from . import instances
from . import transparent_clock_default_ds
from . import transparent_clock_ports
class ptp(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-ptp - based on the path /ptp. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Contains all YANG nodes for the PTP data sets. This hierarchy can be
augmented with YANG nodes for a specific vendor or PTP Profile.
  """
  __slots__ = ('_path_helper', '_extmethods', '__instances','__transparent_clock_default_ds','__transparent_clock_ports',)

  _yang_name = 'ptp'
  _yang_namespace = 'http://openconfig.net/yang/ptp'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__instances = YANGDynClass(base=instances.instances, is_container='container', yang_name="instances", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='container', is_config=True)
    self.__transparent_clock_default_ds = YANGDynClass(base=transparent_clock_default_ds.transparent_clock_default_ds, is_container='container', yang_name="transparent-clock-default-ds", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='container', is_config=True)
    self.__transparent_clock_ports = YANGDynClass(base=transparent_clock_ports.transparent_clock_ports, is_container='container', yang_name="transparent-clock-ports", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['ptp']

  def _get_instances(self):
    """
    Getter method for instances, mapped from YANG variable /ptp/instances (container)

    YANG Description: YANG container that is used to get all PTP Instances. YANG does not
allow get of all elements in a YANG list, so a YANG container wrapping
the YANG list is provided for that purpose. The naming convention uses
plural for the wrapping YANG container, and singular for the YANG list.
    """
    return self.__instances
      
  def _set_instances(self, v, load=False):
    """
    Setter method for instances, mapped from YANG variable /ptp/instances (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_instances is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_instances() directly.

    YANG Description: YANG container that is used to get all PTP Instances. YANG does not
allow get of all elements in a YANG list, so a YANG container wrapping
the YANG list is provided for that purpose. The naming convention uses
plural for the wrapping YANG container, and singular for the YANG list.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=instances.instances, is_container='container', yang_name="instances", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """instances must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=instances.instances, is_container='container', yang_name="instances", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='container', is_config=True)""",
        })

    self.__instances = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_instances(self):
    self.__instances = YANGDynClass(base=instances.instances, is_container='container', yang_name="instances", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='container', is_config=True)


  def _get_transparent_clock_default_ds(self):
    """
    Getter method for transparent_clock_default_ds, mapped from YANG variable /ptp/transparent_clock_default_ds (container)

    YANG Description: This default data set was specified in
IEEE Std 1588-2008, and under some interpretations,
it applied to all domains, which in turn means that it
represents multiple Transparent Clocks.
In IEEE Std 1588-2019, this data set is specified as
applying to the PTP Node (all domains), but the data set is
deprecated. For new designs, the standard recommends that
Transparent Clocks use the PTP Instance data sets
(i.e., /ptp/instances/instance[]), such that each
Transparent Clock supports a single PTP Instance and
domain.
    """
    return self.__transparent_clock_default_ds
      
  def _set_transparent_clock_default_ds(self, v, load=False):
    """
    Setter method for transparent_clock_default_ds, mapped from YANG variable /ptp/transparent_clock_default_ds (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_transparent_clock_default_ds is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_transparent_clock_default_ds() directly.

    YANG Description: This default data set was specified in
IEEE Std 1588-2008, and under some interpretations,
it applied to all domains, which in turn means that it
represents multiple Transparent Clocks.
In IEEE Std 1588-2019, this data set is specified as
applying to the PTP Node (all domains), but the data set is
deprecated. For new designs, the standard recommends that
Transparent Clocks use the PTP Instance data sets
(i.e., /ptp/instances/instance[]), such that each
Transparent Clock supports a single PTP Instance and
domain.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=transparent_clock_default_ds.transparent_clock_default_ds, is_container='container', yang_name="transparent-clock-default-ds", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """transparent_clock_default_ds must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=transparent_clock_default_ds.transparent_clock_default_ds, is_container='container', yang_name="transparent-clock-default-ds", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='container', is_config=True)""",
        })

    self.__transparent_clock_default_ds = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_transparent_clock_default_ds(self):
    self.__transparent_clock_default_ds = YANGDynClass(base=transparent_clock_default_ds.transparent_clock_default_ds, is_container='container', yang_name="transparent-clock-default-ds", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='container', is_config=True)


  def _get_transparent_clock_ports(self):
    """
    Getter method for transparent_clock_ports, mapped from YANG variable /ptp/transparent_clock_ports (container)

    YANG Description: YANG container that is used to get all ports of the
IEEE Std 1588 transparentClockPortDS.
YANG does not allow get of all elements in a YANG list,
so a YANG container wrapping the YANG list is provided for
that purpose. The naming convention uses plural for the
wrapping YANG container, and singular for the YANG list.
    """
    return self.__transparent_clock_ports
      
  def _set_transparent_clock_ports(self, v, load=False):
    """
    Setter method for transparent_clock_ports, mapped from YANG variable /ptp/transparent_clock_ports (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_transparent_clock_ports is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_transparent_clock_ports() directly.

    YANG Description: YANG container that is used to get all ports of the
IEEE Std 1588 transparentClockPortDS.
YANG does not allow get of all elements in a YANG list,
so a YANG container wrapping the YANG list is provided for
that purpose. The naming convention uses plural for the
wrapping YANG container, and singular for the YANG list.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=transparent_clock_ports.transparent_clock_ports, is_container='container', yang_name="transparent-clock-ports", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """transparent_clock_ports must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=transparent_clock_ports.transparent_clock_ports, is_container='container', yang_name="transparent-clock-ports", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='container', is_config=True)""",
        })

    self.__transparent_clock_ports = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_transparent_clock_ports(self):
    self.__transparent_clock_ports = YANGDynClass(base=transparent_clock_ports.transparent_clock_ports, is_container='container', yang_name="transparent-clock-ports", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='container', is_config=True)

  instances = __builtin__.property(_get_instances, _set_instances)
  transparent_clock_default_ds = __builtin__.property(_get_transparent_clock_default_ds, _set_transparent_clock_default_ds)
  transparent_clock_ports = __builtin__.property(_get_transparent_clock_ports, _set_transparent_clock_ports)


  _pyangbind_elements = OrderedDict([('instances', instances), ('transparent_clock_default_ds', transparent_clock_default_ds), ('transparent_clock_ports', transparent_clock_ports), ])


