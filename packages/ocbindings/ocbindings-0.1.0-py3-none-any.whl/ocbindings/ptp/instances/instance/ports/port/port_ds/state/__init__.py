# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-ptp - based on the path /ptp/instances/instance/ports/port/port-ds/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state data of port data set of the clock
  """
  __slots__ = ('_path_helper', '_extmethods', '__log_announce_interval','__announce_receipt_timeout','__log_sync_interval','__delay_mechanism','__log_min_pdelay_req_interval','__version_number','__log_min_delay_req_interval','__unicast_multicast','__port_state','__peer_mean_path_delay',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/ptp'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__log_announce_interval = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['-128..127']}, int_size=8), is_leaf=True, yang_name="log-announce-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='int8', is_config=False)
    self.__announce_receipt_timeout = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="announce-receipt-timeout", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='uint8', is_config=False)
    self.__log_sync_interval = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['-128..127']}, int_size=8), is_leaf=True, yang_name="log-sync-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='int8', is_config=False)
    self.__delay_mechanism = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'E2E': {'value': 1}, 'P2P': {'value': 2}, 'DISABLED': {'value': 254}},), is_leaf=True, yang_name="delay-mechanism", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='oc-ptp-types:delay-mechanism-enumeration', is_config=False)
    self.__log_min_pdelay_req_interval = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['-128..127']}, int_size=8), is_leaf=True, yang_name="log-min-pdelay-req-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='int8', is_config=False)
    self.__version_number = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="version-number", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='uint8', is_config=False)
    self.__log_min_delay_req_interval = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['-128..127']}, int_size=8), is_leaf=True, yang_name="log-min-delay-req-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='int8', is_config=False)
    self.__unicast_multicast = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'UNICAST': {'value': 1}, 'MULTICAST': {'value': 2}},), is_leaf=True, yang_name="unicast-multicast", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='oc-ptp-types:unicast-multicast-enumeration', is_config=False)
    self.__port_state = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'INITIALIZING': {'value': 1}, 'FAULTY': {'value': 2}, 'DISABLED': {'value': 3}, 'LISTENING': {'value': 4}, 'PRE_MASTER': {'value': 5}, 'MASTER': {'value': 6}, 'PASSIVE': {'value': 7}, 'UNCALIBRATED': {'value': 8}, 'SLAVE': {'value': 9}},), is_leaf=True, yang_name="port-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='oc-ptp-types:port-state-enumeration', is_config=False)
    self.__peer_mean_path_delay = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="peer-mean-path-delay", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='oc-ptp-types:time-interval', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['ptp', 'instances', 'instance', 'ports', 'port', 'port-ds', 'state']

  def _get_log_announce_interval(self):
    """
    Getter method for log_announce_interval, mapped from YANG variable /ptp/instances/instance/ports/port/port_ds/state/log_announce_interval (int8)

    YANG Description: Logarithm to the base 2 of the mean IEEE Std 1588
announceInterval, the time interval between
successive Announce messages sent by a PTP Port.
    """
    return self.__log_announce_interval
      
  def _set_log_announce_interval(self, v, load=False):
    """
    Setter method for log_announce_interval, mapped from YANG variable /ptp/instances/instance/ports/port/port_ds/state/log_announce_interval (int8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_log_announce_interval is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_log_announce_interval() directly.

    YANG Description: Logarithm to the base 2 of the mean IEEE Std 1588
announceInterval, the time interval between
successive Announce messages sent by a PTP Port.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['-128..127']}, int_size=8), is_leaf=True, yang_name="log-announce-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='int8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """log_announce_interval must be of a type compatible with int8""",
          'defined-type': "int8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['-128..127']}, int_size=8), is_leaf=True, yang_name="log-announce-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='int8', is_config=False)""",
        })

    self.__log_announce_interval = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_log_announce_interval(self):
    self.__log_announce_interval = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['-128..127']}, int_size=8), is_leaf=True, yang_name="log-announce-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='int8', is_config=False)


  def _get_announce_receipt_timeout(self):
    """
    Getter method for announce_receipt_timeout, mapped from YANG variable /ptp/instances/instance/ports/port/port_ds/state/announce_receipt_timeout (uint8)

    YANG Description: The integral multiple of IEEE Std 1588
announceInterval that must pass without receipt of
an Announce message before the occurrence of the
event ANNOUNCE_RECEIPT_TIMEOUT_EXPIRES. The range
shall be 2 to 255 subject to further restrictions of
the applicable PTP Profile. While 2 is permissible,
normally the value should be at least 3.
    """
    return self.__announce_receipt_timeout
      
  def _set_announce_receipt_timeout(self, v, load=False):
    """
    Setter method for announce_receipt_timeout, mapped from YANG variable /ptp/instances/instance/ports/port/port_ds/state/announce_receipt_timeout (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_announce_receipt_timeout is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_announce_receipt_timeout() directly.

    YANG Description: The integral multiple of IEEE Std 1588
announceInterval that must pass without receipt of
an Announce message before the occurrence of the
event ANNOUNCE_RECEIPT_TIMEOUT_EXPIRES. The range
shall be 2 to 255 subject to further restrictions of
the applicable PTP Profile. While 2 is permissible,
normally the value should be at least 3.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="announce-receipt-timeout", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='uint8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """announce_receipt_timeout must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="announce-receipt-timeout", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='uint8', is_config=False)""",
        })

    self.__announce_receipt_timeout = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_announce_receipt_timeout(self):
    self.__announce_receipt_timeout = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="announce-receipt-timeout", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='uint8', is_config=False)


  def _get_log_sync_interval(self):
    """
    Getter method for log_sync_interval, mapped from YANG variable /ptp/instances/instance/ports/port/port_ds/state/log_sync_interval (int8)

    YANG Description: Logarithm to the base 2 of the mean IEEE Std 1588
syncInterval, the time interval between successive
Sync messages, when transmitted as multicast
messages. The rates for unicast transmissions are
negotiated separately on a per PTP Port basis and
are not constrained by this leaf.
    """
    return self.__log_sync_interval
      
  def _set_log_sync_interval(self, v, load=False):
    """
    Setter method for log_sync_interval, mapped from YANG variable /ptp/instances/instance/ports/port/port_ds/state/log_sync_interval (int8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_log_sync_interval is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_log_sync_interval() directly.

    YANG Description: Logarithm to the base 2 of the mean IEEE Std 1588
syncInterval, the time interval between successive
Sync messages, when transmitted as multicast
messages. The rates for unicast transmissions are
negotiated separately on a per PTP Port basis and
are not constrained by this leaf.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['-128..127']}, int_size=8), is_leaf=True, yang_name="log-sync-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='int8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """log_sync_interval must be of a type compatible with int8""",
          'defined-type': "int8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['-128..127']}, int_size=8), is_leaf=True, yang_name="log-sync-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='int8', is_config=False)""",
        })

    self.__log_sync_interval = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_log_sync_interval(self):
    self.__log_sync_interval = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['-128..127']}, int_size=8), is_leaf=True, yang_name="log-sync-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='int8', is_config=False)


  def _get_delay_mechanism(self):
    """
    Getter method for delay_mechanism, mapped from YANG variable /ptp/instances/instance/ports/port/port_ds/state/delay_mechanism (oc-ptp-types:delay-mechanism-enumeration)

    YANG Description: The path delay measuring mechanism used by the PTP
Port in computing <meanDelay> (propagation delay).
    """
    return self.__delay_mechanism
      
  def _set_delay_mechanism(self, v, load=False):
    """
    Setter method for delay_mechanism, mapped from YANG variable /ptp/instances/instance/ports/port/port_ds/state/delay_mechanism (oc-ptp-types:delay-mechanism-enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_delay_mechanism is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_delay_mechanism() directly.

    YANG Description: The path delay measuring mechanism used by the PTP
Port in computing <meanDelay> (propagation delay).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'E2E': {'value': 1}, 'P2P': {'value': 2}, 'DISABLED': {'value': 254}},), is_leaf=True, yang_name="delay-mechanism", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='oc-ptp-types:delay-mechanism-enumeration', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """delay_mechanism must be of a type compatible with oc-ptp-types:delay-mechanism-enumeration""",
          'defined-type': "oc-ptp-types:delay-mechanism-enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'E2E': {'value': 1}, 'P2P': {'value': 2}, 'DISABLED': {'value': 254}},), is_leaf=True, yang_name="delay-mechanism", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='oc-ptp-types:delay-mechanism-enumeration', is_config=False)""",
        })

    self.__delay_mechanism = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_delay_mechanism(self):
    self.__delay_mechanism = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'E2E': {'value': 1}, 'P2P': {'value': 2}, 'DISABLED': {'value': 254}},), is_leaf=True, yang_name="delay-mechanism", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='oc-ptp-types:delay-mechanism-enumeration', is_config=False)


  def _get_log_min_pdelay_req_interval(self):
    """
    Getter method for log_min_pdelay_req_interval, mapped from YANG variable /ptp/instances/instance/ports/port/port_ds/state/log_min_pdelay_req_interval (int8)

    YANG Description: Logarithm to the base 2 of the IEEE Std 1588
minPdelayReqInterval, the minimum permitted
mean time interval between successive Pdelay_Req
messages sent over a PTP Link.
    """
    return self.__log_min_pdelay_req_interval
      
  def _set_log_min_pdelay_req_interval(self, v, load=False):
    """
    Setter method for log_min_pdelay_req_interval, mapped from YANG variable /ptp/instances/instance/ports/port/port_ds/state/log_min_pdelay_req_interval (int8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_log_min_pdelay_req_interval is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_log_min_pdelay_req_interval() directly.

    YANG Description: Logarithm to the base 2 of the IEEE Std 1588
minPdelayReqInterval, the minimum permitted
mean time interval between successive Pdelay_Req
messages sent over a PTP Link.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['-128..127']}, int_size=8), is_leaf=True, yang_name="log-min-pdelay-req-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='int8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """log_min_pdelay_req_interval must be of a type compatible with int8""",
          'defined-type': "int8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['-128..127']}, int_size=8), is_leaf=True, yang_name="log-min-pdelay-req-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='int8', is_config=False)""",
        })

    self.__log_min_pdelay_req_interval = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_log_min_pdelay_req_interval(self):
    self.__log_min_pdelay_req_interval = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['-128..127']}, int_size=8), is_leaf=True, yang_name="log-min-pdelay-req-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='int8', is_config=False)


  def _get_version_number(self):
    """
    Getter method for version_number, mapped from YANG variable /ptp/instances/instance/ports/port/port_ds/state/version_number (uint8)

    YANG Description: The PTP major version in use on the PTP Port.
NOTE - This indicates the version of the
IEEE 1588 standard, and not the version of an
applicable PTP Profile.
    """
    return self.__version_number
      
  def _set_version_number(self, v, load=False):
    """
    Setter method for version_number, mapped from YANG variable /ptp/instances/instance/ports/port/port_ds/state/version_number (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_version_number is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_version_number() directly.

    YANG Description: The PTP major version in use on the PTP Port.
NOTE - This indicates the version of the
IEEE 1588 standard, and not the version of an
applicable PTP Profile.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="version-number", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='uint8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """version_number must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="version-number", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='uint8', is_config=False)""",
        })

    self.__version_number = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_version_number(self):
    self.__version_number = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="version-number", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='uint8', is_config=False)


  def _get_log_min_delay_req_interval(self):
    """
    Getter method for log_min_delay_req_interval, mapped from YANG variable /ptp/instances/instance/ports/port/port_ds/state/log_min_delay_req_interval (int8)

    YANG Description: Logarithm to the base 2 of the IEEE Std 1588
minDelayReqInterval, the minimum permitted
mean time interval between successive Delay_Req
messages sent by a Slave PTP Instance.
    """
    return self.__log_min_delay_req_interval
      
  def _set_log_min_delay_req_interval(self, v, load=False):
    """
    Setter method for log_min_delay_req_interval, mapped from YANG variable /ptp/instances/instance/ports/port/port_ds/state/log_min_delay_req_interval (int8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_log_min_delay_req_interval is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_log_min_delay_req_interval() directly.

    YANG Description: Logarithm to the base 2 of the IEEE Std 1588
minDelayReqInterval, the minimum permitted
mean time interval between successive Delay_Req
messages sent by a Slave PTP Instance.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['-128..127']}, int_size=8), is_leaf=True, yang_name="log-min-delay-req-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='int8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """log_min_delay_req_interval must be of a type compatible with int8""",
          'defined-type': "int8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['-128..127']}, int_size=8), is_leaf=True, yang_name="log-min-delay-req-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='int8', is_config=False)""",
        })

    self.__log_min_delay_req_interval = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_log_min_delay_req_interval(self):
    self.__log_min_delay_req_interval = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['-128..127']}, int_size=8), is_leaf=True, yang_name="log-min-delay-req-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='int8', is_config=False)


  def _get_unicast_multicast(self):
    """
    Getter method for unicast_multicast, mapped from YANG variable /ptp/instances/instance/ports/port/port_ds/state/unicast_multicast (oc-ptp-types:unicast-multicast-enumeration)

    YANG Description: Whether the network transport uses unicast or
multicast communication
    """
    return self.__unicast_multicast
      
  def _set_unicast_multicast(self, v, load=False):
    """
    Setter method for unicast_multicast, mapped from YANG variable /ptp/instances/instance/ports/port/port_ds/state/unicast_multicast (oc-ptp-types:unicast-multicast-enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_unicast_multicast is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_unicast_multicast() directly.

    YANG Description: Whether the network transport uses unicast or
multicast communication
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'UNICAST': {'value': 1}, 'MULTICAST': {'value': 2}},), is_leaf=True, yang_name="unicast-multicast", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='oc-ptp-types:unicast-multicast-enumeration', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """unicast_multicast must be of a type compatible with oc-ptp-types:unicast-multicast-enumeration""",
          'defined-type': "oc-ptp-types:unicast-multicast-enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'UNICAST': {'value': 1}, 'MULTICAST': {'value': 2}},), is_leaf=True, yang_name="unicast-multicast", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='oc-ptp-types:unicast-multicast-enumeration', is_config=False)""",
        })

    self.__unicast_multicast = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_unicast_multicast(self):
    self.__unicast_multicast = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'UNICAST': {'value': 1}, 'MULTICAST': {'value': 2}},), is_leaf=True, yang_name="unicast-multicast", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='oc-ptp-types:unicast-multicast-enumeration', is_config=False)


  def _get_port_state(self):
    """
    Getter method for port_state, mapped from YANG variable /ptp/instances/instance/ports/port/port_ds/state/port_state (oc-ptp-types:port-state-enumeration)

    YANG Description: Current state of the protocol engine associated
with this PTP Port.
    """
    return self.__port_state
      
  def _set_port_state(self, v, load=False):
    """
    Setter method for port_state, mapped from YANG variable /ptp/instances/instance/ports/port/port_ds/state/port_state (oc-ptp-types:port-state-enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_port_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_port_state() directly.

    YANG Description: Current state of the protocol engine associated
with this PTP Port.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'INITIALIZING': {'value': 1}, 'FAULTY': {'value': 2}, 'DISABLED': {'value': 3}, 'LISTENING': {'value': 4}, 'PRE_MASTER': {'value': 5}, 'MASTER': {'value': 6}, 'PASSIVE': {'value': 7}, 'UNCALIBRATED': {'value': 8}, 'SLAVE': {'value': 9}},), is_leaf=True, yang_name="port-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='oc-ptp-types:port-state-enumeration', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """port_state must be of a type compatible with oc-ptp-types:port-state-enumeration""",
          'defined-type': "oc-ptp-types:port-state-enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'INITIALIZING': {'value': 1}, 'FAULTY': {'value': 2}, 'DISABLED': {'value': 3}, 'LISTENING': {'value': 4}, 'PRE_MASTER': {'value': 5}, 'MASTER': {'value': 6}, 'PASSIVE': {'value': 7}, 'UNCALIBRATED': {'value': 8}, 'SLAVE': {'value': 9}},), is_leaf=True, yang_name="port-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='oc-ptp-types:port-state-enumeration', is_config=False)""",
        })

    self.__port_state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_port_state(self):
    self.__port_state = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'INITIALIZING': {'value': 1}, 'FAULTY': {'value': 2}, 'DISABLED': {'value': 3}, 'LISTENING': {'value': 4}, 'PRE_MASTER': {'value': 5}, 'MASTER': {'value': 6}, 'PASSIVE': {'value': 7}, 'UNCALIBRATED': {'value': 8}, 'SLAVE': {'value': 9}},), is_leaf=True, yang_name="port-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='oc-ptp-types:port-state-enumeration', is_config=False)


  def _get_peer_mean_path_delay(self):
    """
    Getter method for peer_mean_path_delay, mapped from YANG variable /ptp/instances/instance/ports/port/port_ds/state/peer_mean_path_delay (oc-ptp-types:time-interval)

    YANG Description: In IEEE Std 1588-2008, this data set member was
called portDS.peerMeanPathDelay. While the
specification of this member is retained in the
current standard, the member is renamed to
portDS.meanLinkDelay (i.e., ../mean-link-delay).
This change is consistent with other changes that
ensure clarity and consistency of naming, where
- 'path' is associated with the
 request-response mechanism
- 'link' is associated with the
 peer-to-peer delay mechanism
    """
    return self.__peer_mean_path_delay
      
  def _set_peer_mean_path_delay(self, v, load=False):
    """
    Setter method for peer_mean_path_delay, mapped from YANG variable /ptp/instances/instance/ports/port/port_ds/state/peer_mean_path_delay (oc-ptp-types:time-interval)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_peer_mean_path_delay is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_peer_mean_path_delay() directly.

    YANG Description: In IEEE Std 1588-2008, this data set member was
called portDS.peerMeanPathDelay. While the
specification of this member is retained in the
current standard, the member is renamed to
portDS.meanLinkDelay (i.e., ../mean-link-delay).
This change is consistent with other changes that
ensure clarity and consistency of naming, where
- 'path' is associated with the
 request-response mechanism
- 'link' is associated with the
 peer-to-peer delay mechanism
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="peer-mean-path-delay", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='oc-ptp-types:time-interval', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """peer_mean_path_delay must be of a type compatible with oc-ptp-types:time-interval""",
          'defined-type': "oc-ptp-types:time-interval",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="peer-mean-path-delay", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='oc-ptp-types:time-interval', is_config=False)""",
        })

    self.__peer_mean_path_delay = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_peer_mean_path_delay(self):
    self.__peer_mean_path_delay = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="peer-mean-path-delay", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='oc-ptp-types:time-interval', is_config=False)

  log_announce_interval = __builtin__.property(_get_log_announce_interval)
  announce_receipt_timeout = __builtin__.property(_get_announce_receipt_timeout)
  log_sync_interval = __builtin__.property(_get_log_sync_interval)
  delay_mechanism = __builtin__.property(_get_delay_mechanism)
  log_min_pdelay_req_interval = __builtin__.property(_get_log_min_pdelay_req_interval)
  version_number = __builtin__.property(_get_version_number)
  log_min_delay_req_interval = __builtin__.property(_get_log_min_delay_req_interval)
  unicast_multicast = __builtin__.property(_get_unicast_multicast)
  port_state = __builtin__.property(_get_port_state)
  peer_mean_path_delay = __builtin__.property(_get_peer_mean_path_delay)


  _pyangbind_elements = OrderedDict([('log_announce_interval', log_announce_interval), ('announce_receipt_timeout', announce_receipt_timeout), ('log_sync_interval', log_sync_interval), ('delay_mechanism', delay_mechanism), ('log_min_pdelay_req_interval', log_min_pdelay_req_interval), ('version_number', version_number), ('log_min_delay_req_interval', log_min_delay_req_interval), ('unicast_multicast', unicast_multicast), ('port_state', port_state), ('peer_mean_path_delay', peer_mean_path_delay), ])


class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-ptp - based on the path /ptp/instances/instance/ports/port/port-ds/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state data of port data set of the clock
  """
  __slots__ = ('_path_helper', '_extmethods', '__log_announce_interval','__announce_receipt_timeout','__log_sync_interval','__delay_mechanism','__log_min_pdelay_req_interval','__version_number','__log_min_delay_req_interval','__unicast_multicast','__port_state','__peer_mean_path_delay',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/ptp'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__log_announce_interval = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['-128..127']}, int_size=8), is_leaf=True, yang_name="log-announce-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='int8', is_config=False)
    self.__announce_receipt_timeout = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="announce-receipt-timeout", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='uint8', is_config=False)
    self.__log_sync_interval = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['-128..127']}, int_size=8), is_leaf=True, yang_name="log-sync-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='int8', is_config=False)
    self.__delay_mechanism = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'E2E': {'value': 1}, 'P2P': {'value': 2}, 'DISABLED': {'value': 254}},), is_leaf=True, yang_name="delay-mechanism", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='oc-ptp-types:delay-mechanism-enumeration', is_config=False)
    self.__log_min_pdelay_req_interval = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['-128..127']}, int_size=8), is_leaf=True, yang_name="log-min-pdelay-req-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='int8', is_config=False)
    self.__version_number = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="version-number", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='uint8', is_config=False)
    self.__log_min_delay_req_interval = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['-128..127']}, int_size=8), is_leaf=True, yang_name="log-min-delay-req-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='int8', is_config=False)
    self.__unicast_multicast = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'UNICAST': {'value': 1}, 'MULTICAST': {'value': 2}},), is_leaf=True, yang_name="unicast-multicast", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='oc-ptp-types:unicast-multicast-enumeration', is_config=False)
    self.__port_state = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'INITIALIZING': {'value': 1}, 'FAULTY': {'value': 2}, 'DISABLED': {'value': 3}, 'LISTENING': {'value': 4}, 'PRE_MASTER': {'value': 5}, 'MASTER': {'value': 6}, 'PASSIVE': {'value': 7}, 'UNCALIBRATED': {'value': 8}, 'SLAVE': {'value': 9}},), is_leaf=True, yang_name="port-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='oc-ptp-types:port-state-enumeration', is_config=False)
    self.__peer_mean_path_delay = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="peer-mean-path-delay", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='oc-ptp-types:time-interval', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['ptp', 'instances', 'instance', 'ports', 'port', 'port-ds', 'state']

  def _get_log_announce_interval(self):
    """
    Getter method for log_announce_interval, mapped from YANG variable /ptp/instances/instance/ports/port/port_ds/state/log_announce_interval (int8)

    YANG Description: Logarithm to the base 2 of the mean IEEE Std 1588
announceInterval, the time interval between
successive Announce messages sent by a PTP Port.
    """
    return self.__log_announce_interval
      
  def _set_log_announce_interval(self, v, load=False):
    """
    Setter method for log_announce_interval, mapped from YANG variable /ptp/instances/instance/ports/port/port_ds/state/log_announce_interval (int8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_log_announce_interval is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_log_announce_interval() directly.

    YANG Description: Logarithm to the base 2 of the mean IEEE Std 1588
announceInterval, the time interval between
successive Announce messages sent by a PTP Port.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['-128..127']}, int_size=8), is_leaf=True, yang_name="log-announce-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='int8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """log_announce_interval must be of a type compatible with int8""",
          'defined-type': "int8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['-128..127']}, int_size=8), is_leaf=True, yang_name="log-announce-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='int8', is_config=False)""",
        })

    self.__log_announce_interval = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_log_announce_interval(self):
    self.__log_announce_interval = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['-128..127']}, int_size=8), is_leaf=True, yang_name="log-announce-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='int8', is_config=False)


  def _get_announce_receipt_timeout(self):
    """
    Getter method for announce_receipt_timeout, mapped from YANG variable /ptp/instances/instance/ports/port/port_ds/state/announce_receipt_timeout (uint8)

    YANG Description: The integral multiple of IEEE Std 1588
announceInterval that must pass without receipt of
an Announce message before the occurrence of the
event ANNOUNCE_RECEIPT_TIMEOUT_EXPIRES. The range
shall be 2 to 255 subject to further restrictions of
the applicable PTP Profile. While 2 is permissible,
normally the value should be at least 3.
    """
    return self.__announce_receipt_timeout
      
  def _set_announce_receipt_timeout(self, v, load=False):
    """
    Setter method for announce_receipt_timeout, mapped from YANG variable /ptp/instances/instance/ports/port/port_ds/state/announce_receipt_timeout (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_announce_receipt_timeout is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_announce_receipt_timeout() directly.

    YANG Description: The integral multiple of IEEE Std 1588
announceInterval that must pass without receipt of
an Announce message before the occurrence of the
event ANNOUNCE_RECEIPT_TIMEOUT_EXPIRES. The range
shall be 2 to 255 subject to further restrictions of
the applicable PTP Profile. While 2 is permissible,
normally the value should be at least 3.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="announce-receipt-timeout", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='uint8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """announce_receipt_timeout must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="announce-receipt-timeout", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='uint8', is_config=False)""",
        })

    self.__announce_receipt_timeout = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_announce_receipt_timeout(self):
    self.__announce_receipt_timeout = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="announce-receipt-timeout", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='uint8', is_config=False)


  def _get_log_sync_interval(self):
    """
    Getter method for log_sync_interval, mapped from YANG variable /ptp/instances/instance/ports/port/port_ds/state/log_sync_interval (int8)

    YANG Description: Logarithm to the base 2 of the mean IEEE Std 1588
syncInterval, the time interval between successive
Sync messages, when transmitted as multicast
messages. The rates for unicast transmissions are
negotiated separately on a per PTP Port basis and
are not constrained by this leaf.
    """
    return self.__log_sync_interval
      
  def _set_log_sync_interval(self, v, load=False):
    """
    Setter method for log_sync_interval, mapped from YANG variable /ptp/instances/instance/ports/port/port_ds/state/log_sync_interval (int8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_log_sync_interval is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_log_sync_interval() directly.

    YANG Description: Logarithm to the base 2 of the mean IEEE Std 1588
syncInterval, the time interval between successive
Sync messages, when transmitted as multicast
messages. The rates for unicast transmissions are
negotiated separately on a per PTP Port basis and
are not constrained by this leaf.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['-128..127']}, int_size=8), is_leaf=True, yang_name="log-sync-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='int8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """log_sync_interval must be of a type compatible with int8""",
          'defined-type': "int8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['-128..127']}, int_size=8), is_leaf=True, yang_name="log-sync-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='int8', is_config=False)""",
        })

    self.__log_sync_interval = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_log_sync_interval(self):
    self.__log_sync_interval = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['-128..127']}, int_size=8), is_leaf=True, yang_name="log-sync-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='int8', is_config=False)


  def _get_delay_mechanism(self):
    """
    Getter method for delay_mechanism, mapped from YANG variable /ptp/instances/instance/ports/port/port_ds/state/delay_mechanism (oc-ptp-types:delay-mechanism-enumeration)

    YANG Description: The path delay measuring mechanism used by the PTP
Port in computing <meanDelay> (propagation delay).
    """
    return self.__delay_mechanism
      
  def _set_delay_mechanism(self, v, load=False):
    """
    Setter method for delay_mechanism, mapped from YANG variable /ptp/instances/instance/ports/port/port_ds/state/delay_mechanism (oc-ptp-types:delay-mechanism-enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_delay_mechanism is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_delay_mechanism() directly.

    YANG Description: The path delay measuring mechanism used by the PTP
Port in computing <meanDelay> (propagation delay).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'E2E': {'value': 1}, 'P2P': {'value': 2}, 'DISABLED': {'value': 254}},), is_leaf=True, yang_name="delay-mechanism", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='oc-ptp-types:delay-mechanism-enumeration', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """delay_mechanism must be of a type compatible with oc-ptp-types:delay-mechanism-enumeration""",
          'defined-type': "oc-ptp-types:delay-mechanism-enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'E2E': {'value': 1}, 'P2P': {'value': 2}, 'DISABLED': {'value': 254}},), is_leaf=True, yang_name="delay-mechanism", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='oc-ptp-types:delay-mechanism-enumeration', is_config=False)""",
        })

    self.__delay_mechanism = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_delay_mechanism(self):
    self.__delay_mechanism = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'E2E': {'value': 1}, 'P2P': {'value': 2}, 'DISABLED': {'value': 254}},), is_leaf=True, yang_name="delay-mechanism", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='oc-ptp-types:delay-mechanism-enumeration', is_config=False)


  def _get_log_min_pdelay_req_interval(self):
    """
    Getter method for log_min_pdelay_req_interval, mapped from YANG variable /ptp/instances/instance/ports/port/port_ds/state/log_min_pdelay_req_interval (int8)

    YANG Description: Logarithm to the base 2 of the IEEE Std 1588
minPdelayReqInterval, the minimum permitted
mean time interval between successive Pdelay_Req
messages sent over a PTP Link.
    """
    return self.__log_min_pdelay_req_interval
      
  def _set_log_min_pdelay_req_interval(self, v, load=False):
    """
    Setter method for log_min_pdelay_req_interval, mapped from YANG variable /ptp/instances/instance/ports/port/port_ds/state/log_min_pdelay_req_interval (int8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_log_min_pdelay_req_interval is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_log_min_pdelay_req_interval() directly.

    YANG Description: Logarithm to the base 2 of the IEEE Std 1588
minPdelayReqInterval, the minimum permitted
mean time interval between successive Pdelay_Req
messages sent over a PTP Link.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['-128..127']}, int_size=8), is_leaf=True, yang_name="log-min-pdelay-req-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='int8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """log_min_pdelay_req_interval must be of a type compatible with int8""",
          'defined-type': "int8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['-128..127']}, int_size=8), is_leaf=True, yang_name="log-min-pdelay-req-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='int8', is_config=False)""",
        })

    self.__log_min_pdelay_req_interval = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_log_min_pdelay_req_interval(self):
    self.__log_min_pdelay_req_interval = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['-128..127']}, int_size=8), is_leaf=True, yang_name="log-min-pdelay-req-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='int8', is_config=False)


  def _get_version_number(self):
    """
    Getter method for version_number, mapped from YANG variable /ptp/instances/instance/ports/port/port_ds/state/version_number (uint8)

    YANG Description: The PTP major version in use on the PTP Port.
NOTE - This indicates the version of the
IEEE 1588 standard, and not the version of an
applicable PTP Profile.
    """
    return self.__version_number
      
  def _set_version_number(self, v, load=False):
    """
    Setter method for version_number, mapped from YANG variable /ptp/instances/instance/ports/port/port_ds/state/version_number (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_version_number is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_version_number() directly.

    YANG Description: The PTP major version in use on the PTP Port.
NOTE - This indicates the version of the
IEEE 1588 standard, and not the version of an
applicable PTP Profile.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="version-number", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='uint8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """version_number must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="version-number", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='uint8', is_config=False)""",
        })

    self.__version_number = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_version_number(self):
    self.__version_number = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="version-number", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='uint8', is_config=False)


  def _get_log_min_delay_req_interval(self):
    """
    Getter method for log_min_delay_req_interval, mapped from YANG variable /ptp/instances/instance/ports/port/port_ds/state/log_min_delay_req_interval (int8)

    YANG Description: Logarithm to the base 2 of the IEEE Std 1588
minDelayReqInterval, the minimum permitted
mean time interval between successive Delay_Req
messages sent by a Slave PTP Instance.
    """
    return self.__log_min_delay_req_interval
      
  def _set_log_min_delay_req_interval(self, v, load=False):
    """
    Setter method for log_min_delay_req_interval, mapped from YANG variable /ptp/instances/instance/ports/port/port_ds/state/log_min_delay_req_interval (int8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_log_min_delay_req_interval is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_log_min_delay_req_interval() directly.

    YANG Description: Logarithm to the base 2 of the IEEE Std 1588
minDelayReqInterval, the minimum permitted
mean time interval between successive Delay_Req
messages sent by a Slave PTP Instance.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['-128..127']}, int_size=8), is_leaf=True, yang_name="log-min-delay-req-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='int8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """log_min_delay_req_interval must be of a type compatible with int8""",
          'defined-type': "int8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['-128..127']}, int_size=8), is_leaf=True, yang_name="log-min-delay-req-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='int8', is_config=False)""",
        })

    self.__log_min_delay_req_interval = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_log_min_delay_req_interval(self):
    self.__log_min_delay_req_interval = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['-128..127']}, int_size=8), is_leaf=True, yang_name="log-min-delay-req-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='int8', is_config=False)


  def _get_unicast_multicast(self):
    """
    Getter method for unicast_multicast, mapped from YANG variable /ptp/instances/instance/ports/port/port_ds/state/unicast_multicast (oc-ptp-types:unicast-multicast-enumeration)

    YANG Description: Whether the network transport uses unicast or
multicast communication
    """
    return self.__unicast_multicast
      
  def _set_unicast_multicast(self, v, load=False):
    """
    Setter method for unicast_multicast, mapped from YANG variable /ptp/instances/instance/ports/port/port_ds/state/unicast_multicast (oc-ptp-types:unicast-multicast-enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_unicast_multicast is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_unicast_multicast() directly.

    YANG Description: Whether the network transport uses unicast or
multicast communication
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'UNICAST': {'value': 1}, 'MULTICAST': {'value': 2}},), is_leaf=True, yang_name="unicast-multicast", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='oc-ptp-types:unicast-multicast-enumeration', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """unicast_multicast must be of a type compatible with oc-ptp-types:unicast-multicast-enumeration""",
          'defined-type': "oc-ptp-types:unicast-multicast-enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'UNICAST': {'value': 1}, 'MULTICAST': {'value': 2}},), is_leaf=True, yang_name="unicast-multicast", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='oc-ptp-types:unicast-multicast-enumeration', is_config=False)""",
        })

    self.__unicast_multicast = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_unicast_multicast(self):
    self.__unicast_multicast = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'UNICAST': {'value': 1}, 'MULTICAST': {'value': 2}},), is_leaf=True, yang_name="unicast-multicast", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='oc-ptp-types:unicast-multicast-enumeration', is_config=False)


  def _get_port_state(self):
    """
    Getter method for port_state, mapped from YANG variable /ptp/instances/instance/ports/port/port_ds/state/port_state (oc-ptp-types:port-state-enumeration)

    YANG Description: Current state of the protocol engine associated
with this PTP Port.
    """
    return self.__port_state
      
  def _set_port_state(self, v, load=False):
    """
    Setter method for port_state, mapped from YANG variable /ptp/instances/instance/ports/port/port_ds/state/port_state (oc-ptp-types:port-state-enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_port_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_port_state() directly.

    YANG Description: Current state of the protocol engine associated
with this PTP Port.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'INITIALIZING': {'value': 1}, 'FAULTY': {'value': 2}, 'DISABLED': {'value': 3}, 'LISTENING': {'value': 4}, 'PRE_MASTER': {'value': 5}, 'MASTER': {'value': 6}, 'PASSIVE': {'value': 7}, 'UNCALIBRATED': {'value': 8}, 'SLAVE': {'value': 9}},), is_leaf=True, yang_name="port-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='oc-ptp-types:port-state-enumeration', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """port_state must be of a type compatible with oc-ptp-types:port-state-enumeration""",
          'defined-type': "oc-ptp-types:port-state-enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'INITIALIZING': {'value': 1}, 'FAULTY': {'value': 2}, 'DISABLED': {'value': 3}, 'LISTENING': {'value': 4}, 'PRE_MASTER': {'value': 5}, 'MASTER': {'value': 6}, 'PASSIVE': {'value': 7}, 'UNCALIBRATED': {'value': 8}, 'SLAVE': {'value': 9}},), is_leaf=True, yang_name="port-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='oc-ptp-types:port-state-enumeration', is_config=False)""",
        })

    self.__port_state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_port_state(self):
    self.__port_state = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'INITIALIZING': {'value': 1}, 'FAULTY': {'value': 2}, 'DISABLED': {'value': 3}, 'LISTENING': {'value': 4}, 'PRE_MASTER': {'value': 5}, 'MASTER': {'value': 6}, 'PASSIVE': {'value': 7}, 'UNCALIBRATED': {'value': 8}, 'SLAVE': {'value': 9}},), is_leaf=True, yang_name="port-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='oc-ptp-types:port-state-enumeration', is_config=False)


  def _get_peer_mean_path_delay(self):
    """
    Getter method for peer_mean_path_delay, mapped from YANG variable /ptp/instances/instance/ports/port/port_ds/state/peer_mean_path_delay (oc-ptp-types:time-interval)

    YANG Description: In IEEE Std 1588-2008, this data set member was
called portDS.peerMeanPathDelay. While the
specification of this member is retained in the
current standard, the member is renamed to
portDS.meanLinkDelay (i.e., ../mean-link-delay).
This change is consistent with other changes that
ensure clarity and consistency of naming, where
- 'path' is associated with the
 request-response mechanism
- 'link' is associated with the
 peer-to-peer delay mechanism
    """
    return self.__peer_mean_path_delay
      
  def _set_peer_mean_path_delay(self, v, load=False):
    """
    Setter method for peer_mean_path_delay, mapped from YANG variable /ptp/instances/instance/ports/port/port_ds/state/peer_mean_path_delay (oc-ptp-types:time-interval)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_peer_mean_path_delay is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_peer_mean_path_delay() directly.

    YANG Description: In IEEE Std 1588-2008, this data set member was
called portDS.peerMeanPathDelay. While the
specification of this member is retained in the
current standard, the member is renamed to
portDS.meanLinkDelay (i.e., ../mean-link-delay).
This change is consistent with other changes that
ensure clarity and consistency of naming, where
- 'path' is associated with the
 request-response mechanism
- 'link' is associated with the
 peer-to-peer delay mechanism
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="peer-mean-path-delay", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='oc-ptp-types:time-interval', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """peer_mean_path_delay must be of a type compatible with oc-ptp-types:time-interval""",
          'defined-type': "oc-ptp-types:time-interval",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="peer-mean-path-delay", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='oc-ptp-types:time-interval', is_config=False)""",
        })

    self.__peer_mean_path_delay = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_peer_mean_path_delay(self):
    self.__peer_mean_path_delay = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="peer-mean-path-delay", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/ptp', defining_module='openconfig-ptp', yang_type='oc-ptp-types:time-interval', is_config=False)

  log_announce_interval = __builtin__.property(_get_log_announce_interval)
  announce_receipt_timeout = __builtin__.property(_get_announce_receipt_timeout)
  log_sync_interval = __builtin__.property(_get_log_sync_interval)
  delay_mechanism = __builtin__.property(_get_delay_mechanism)
  log_min_pdelay_req_interval = __builtin__.property(_get_log_min_pdelay_req_interval)
  version_number = __builtin__.property(_get_version_number)
  log_min_delay_req_interval = __builtin__.property(_get_log_min_delay_req_interval)
  unicast_multicast = __builtin__.property(_get_unicast_multicast)
  port_state = __builtin__.property(_get_port_state)
  peer_mean_path_delay = __builtin__.property(_get_peer_mean_path_delay)


  _pyangbind_elements = OrderedDict([('log_announce_interval', log_announce_interval), ('announce_receipt_timeout', announce_receipt_timeout), ('log_sync_interval', log_sync_interval), ('delay_mechanism', delay_mechanism), ('log_min_pdelay_req_interval', log_min_pdelay_req_interval), ('version_number', version_number), ('log_min_delay_req_interval', log_min_delay_req_interval), ('unicast_multicast', unicast_multicast), ('port_state', port_state), ('peer_mean_path_delay', peer_mean_path_delay), ])


