# -*- coding: utf-8 -*-
from operator import attrgetter
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.yangtypes import YANGBinary
from pyangbind.lib.yangtypes import YANGBitsType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal

import builtins as __builtin__
long = int
class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-wavelength-router - based on the path /wavelength-router/media-channels/channel/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state data 
  """
  __slots__ = ('_path_helper', '_extmethods', '__index','__name','__lower_frequency','__upper_frequency','__admin_status','__super_channel','__super_channel_parent','__ase_control_mode','__ase_injection_mode','__ase_injection_threshold','__ase_injection_delta','__media_channel_injection_offset','__attenuation_control_mode','__attenuation_control_range','__max_undershoot_compensation','__max_overshoot_compensation','__oper_status','__ase_status',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/wavelength-router'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__index = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='uint32', is_config=False)
    self.__name = YANGDynClass(base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='string', is_config=False)
    self.__lower_frequency = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="lower-frequency", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='oc-opt-types:frequency-type', is_config=False)
    self.__upper_frequency = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="upper-frequency", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='oc-opt-types:frequency-type', is_config=False)
    self.__admin_status = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'ENABLED': {}, 'DISABLED': {}, 'MAINT': {}},), is_leaf=True, yang_name="admin-status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='oc-opt-types:admin-state-type', is_config=False)
    self.__super_channel = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="super-channel", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='boolean', is_config=False)
    self.__super_channel_parent = YANGDynClass(base=str, is_leaf=True, yang_name="super-channel-parent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='leafref', is_config=False)
    self.__ase_control_mode = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'ASE_ENABLED': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'openconfig-wavelength-router:ASE_ENABLED': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'oc-wave-router:ASE_ENABLED': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'ASE_DISABLED': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'openconfig-wavelength-router:ASE_DISABLED': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'oc-wave-router:ASE_DISABLED': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'AUTO_ASE_ON_FAILURE': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'openconfig-wavelength-router:AUTO_ASE_ON_FAILURE': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'oc-wave-router:AUTO_ASE_ON_FAILURE': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'AUTO_ASE_FAILURE_AND_RESTORE': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'openconfig-wavelength-router:AUTO_ASE_FAILURE_AND_RESTORE': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'oc-wave-router:AUTO_ASE_FAILURE_AND_RESTORE': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}},), is_leaf=True, yang_name="ase-control-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='identityref', is_config=False)
    self.__ase_injection_mode = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'MODE_THRESHOLD': {}, 'MODE_DELTA': {}},), is_leaf=True, yang_name="ase-injection-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='enumeration', is_config=False)
    self.__ase_injection_threshold = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="ase-injection-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='decimal64', is_config=False)
    self.__ase_injection_delta = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="ase-injection-delta", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='decimal64', is_config=False)
    self.__media_channel_injection_offset = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="media-channel-injection-offset", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='decimal64', is_config=False)
    self.__attenuation_control_mode = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'ATTENUATION_FIXED_LOSS': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'openconfig-wavelength-router:ATTENUATION_FIXED_LOSS': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'oc-wave-router:ATTENUATION_FIXED_LOSS': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'ATTENUATION_DYNAMIC_LOSS': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'openconfig-wavelength-router:ATTENUATION_DYNAMIC_LOSS': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'oc-wave-router:ATTENUATION_DYNAMIC_LOSS': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'ATTENUATION_DYNAMIC_LOSS_DAMPED': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'openconfig-wavelength-router:ATTENUATION_DYNAMIC_LOSS_DAMPED': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'oc-wave-router:ATTENUATION_DYNAMIC_LOSS_DAMPED': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}},), is_leaf=True, yang_name="attenuation-control-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='identityref', is_config=False)
    self.__attenuation_control_range = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'CONTROL_RANGE_FULL': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'openconfig-wavelength-router:CONTROL_RANGE_FULL': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'oc-wave-router:CONTROL_RANGE_FULL': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'CONTROL_RANGE_LIMITED': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'openconfig-wavelength-router:CONTROL_RANGE_LIMITED': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'oc-wave-router:CONTROL_RANGE_LIMITED': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}},), is_leaf=True, yang_name="attenuation-control-range", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='identityref', is_config=False)
    self.__max_undershoot_compensation = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="max-undershoot-compensation", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='decimal64', is_config=False)
    self.__max_overshoot_compensation = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="max-overshoot-compensation", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='decimal64', is_config=False)
    self.__oper_status = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'UP': {}, 'DOWN': {}},), is_leaf=True, yang_name="oper-status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='enumeration', is_config=False)
    self.__ase_status = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'PRESENT': {}, 'NOT_PRESENT': {}},), is_leaf=True, yang_name="ase-status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='enumeration', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['wavelength-router', 'media-channels', 'channel', 'state']

  def _get_index(self):
    """
    Getter method for index, mapped from YANG variable /wavelength_router/media_channels/channel/state/index (uint32)

    YANG Description: Identifier for the defined media channel
    """
    return self.__index
      
  def _set_index(self, v, load=False):
    """
    Setter method for index, mapped from YANG variable /wavelength_router/media_channels/channel/state/index (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_index is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_index() directly.

    YANG Description: Identifier for the defined media channel
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """index must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='uint32', is_config=False)""",
        })

    self.__index = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_index(self):
    self.__index = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='uint32', is_config=False)


  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /wavelength_router/media_channels/channel/state/name (string)

    YANG Description: The user supplied name of the media channel
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /wavelength_router/media_channels/channel/state/name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: The user supplied name of the media channel
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='string', is_config=False)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='string', is_config=False)


  def _get_lower_frequency(self):
    """
    Getter method for lower_frequency, mapped from YANG variable /wavelength_router/media_channels/channel/state/lower_frequency (oc-opt-types:frequency-type)

    YANG Description: The lower frequency for the spectrum defined by this media
channel
    """
    return self.__lower_frequency
      
  def _set_lower_frequency(self, v, load=False):
    """
    Setter method for lower_frequency, mapped from YANG variable /wavelength_router/media_channels/channel/state/lower_frequency (oc-opt-types:frequency-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lower_frequency is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lower_frequency() directly.

    YANG Description: The lower frequency for the spectrum defined by this media
channel
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="lower-frequency", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='oc-opt-types:frequency-type', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lower_frequency must be of a type compatible with oc-opt-types:frequency-type""",
          'defined-type': "oc-opt-types:frequency-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="lower-frequency", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='oc-opt-types:frequency-type', is_config=False)""",
        })

    self.__lower_frequency = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lower_frequency(self):
    self.__lower_frequency = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="lower-frequency", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='oc-opt-types:frequency-type', is_config=False)


  def _get_upper_frequency(self):
    """
    Getter method for upper_frequency, mapped from YANG variable /wavelength_router/media_channels/channel/state/upper_frequency (oc-opt-types:frequency-type)

    YANG Description: The upper frequency for the spectrum defined by this media
channel
    """
    return self.__upper_frequency
      
  def _set_upper_frequency(self, v, load=False):
    """
    Setter method for upper_frequency, mapped from YANG variable /wavelength_router/media_channels/channel/state/upper_frequency (oc-opt-types:frequency-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_upper_frequency is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_upper_frequency() directly.

    YANG Description: The upper frequency for the spectrum defined by this media
channel
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="upper-frequency", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='oc-opt-types:frequency-type', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """upper_frequency must be of a type compatible with oc-opt-types:frequency-type""",
          'defined-type': "oc-opt-types:frequency-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="upper-frequency", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='oc-opt-types:frequency-type', is_config=False)""",
        })

    self.__upper_frequency = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_upper_frequency(self):
    self.__upper_frequency = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="upper-frequency", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='oc-opt-types:frequency-type', is_config=False)


  def _get_admin_status(self):
    """
    Getter method for admin_status, mapped from YANG variable /wavelength_router/media_channels/channel/state/admin_status (oc-opt-types:admin-state-type)

    YANG Description: Sets the admin status of the media channel
    """
    return self.__admin_status
      
  def _set_admin_status(self, v, load=False):
    """
    Setter method for admin_status, mapped from YANG variable /wavelength_router/media_channels/channel/state/admin_status (oc-opt-types:admin-state-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_admin_status is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_admin_status() directly.

    YANG Description: Sets the admin status of the media channel
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'ENABLED': {}, 'DISABLED': {}, 'MAINT': {}},), is_leaf=True, yang_name="admin-status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='oc-opt-types:admin-state-type', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """admin_status must be of a type compatible with oc-opt-types:admin-state-type""",
          'defined-type': "oc-opt-types:admin-state-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'ENABLED': {}, 'DISABLED': {}, 'MAINT': {}},), is_leaf=True, yang_name="admin-status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='oc-opt-types:admin-state-type', is_config=False)""",
        })

    self.__admin_status = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_admin_status(self):
    self.__admin_status = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'ENABLED': {}, 'DISABLED': {}, 'MAINT': {}},), is_leaf=True, yang_name="admin-status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='oc-opt-types:admin-state-type', is_config=False)


  def _get_super_channel(self):
    """
    Getter method for super_channel, mapped from YANG variable /wavelength_router/media_channels/channel/state/super_channel (boolean)

    YANG Description: True if the media channel is a super channel which
contains multiple media channels within it. The contained
media channels should fall within the boundaries of the
super channel. The device should raise an error if a media
channel crosses a super channel boundary. When using super
channels, spectrum power targets should be defined in either
the:
- port-spectrum-power-profiles for the port which matches the
  source port of the media channel representing the super
  channel
- media channels that are contained within the super
  channel, but not on the super channel itself
    """
    return self.__super_channel
      
  def _set_super_channel(self, v, load=False):
    """
    Setter method for super_channel, mapped from YANG variable /wavelength_router/media_channels/channel/state/super_channel (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_super_channel is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_super_channel() directly.

    YANG Description: True if the media channel is a super channel which
contains multiple media channels within it. The contained
media channels should fall within the boundaries of the
super channel. The device should raise an error if a media
channel crosses a super channel boundary. When using super
channels, spectrum power targets should be defined in either
the:
- port-spectrum-power-profiles for the port which matches the
  source port of the media channel representing the super
  channel
- media channels that are contained within the super
  channel, but not on the super channel itself
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="super-channel", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """super_channel must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="super-channel", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='boolean', is_config=False)""",
        })

    self.__super_channel = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_super_channel(self):
    self.__super_channel = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="super-channel", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='boolean', is_config=False)


  def _get_super_channel_parent(self):
    """
    Getter method for super_channel_parent, mapped from YANG variable /wavelength_router/media_channels/channel/state/super_channel_parent (leafref)

    YANG Description: If the media channel is contained within a super channel this
would specify the index of the super channel parent
    """
    return self.__super_channel_parent
      
  def _set_super_channel_parent(self, v, load=False):
    """
    Setter method for super_channel_parent, mapped from YANG variable /wavelength_router/media_channels/channel/state/super_channel_parent (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_super_channel_parent is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_super_channel_parent() directly.

    YANG Description: If the media channel is contained within a super channel this
would specify the index of the super channel parent
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="super-channel-parent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """super_channel_parent must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="super-channel-parent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='leafref', is_config=False)""",
        })

    self.__super_channel_parent = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_super_channel_parent(self):
    self.__super_channel_parent = YANGDynClass(base=str, is_leaf=True, yang_name="super-channel-parent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='leafref', is_config=False)


  def _get_ase_control_mode(self):
    """
    Getter method for ase_control_mode, mapped from YANG variable /wavelength_router/media_channels/channel/state/ase_control_mode (identityref)

    YANG Description: Sets the ASE control mode for the media channel.
The control mode defines if and when ASE noise is injected
on the media channel
    """
    return self.__ase_control_mode
      
  def _set_ase_control_mode(self, v, load=False):
    """
    Setter method for ase_control_mode, mapped from YANG variable /wavelength_router/media_channels/channel/state/ase_control_mode (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ase_control_mode is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ase_control_mode() directly.

    YANG Description: Sets the ASE control mode for the media channel.
The control mode defines if and when ASE noise is injected
on the media channel
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'ASE_ENABLED': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'openconfig-wavelength-router:ASE_ENABLED': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'oc-wave-router:ASE_ENABLED': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'ASE_DISABLED': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'openconfig-wavelength-router:ASE_DISABLED': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'oc-wave-router:ASE_DISABLED': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'AUTO_ASE_ON_FAILURE': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'openconfig-wavelength-router:AUTO_ASE_ON_FAILURE': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'oc-wave-router:AUTO_ASE_ON_FAILURE': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'AUTO_ASE_FAILURE_AND_RESTORE': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'openconfig-wavelength-router:AUTO_ASE_FAILURE_AND_RESTORE': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'oc-wave-router:AUTO_ASE_FAILURE_AND_RESTORE': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}},), is_leaf=True, yang_name="ase-control-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='identityref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ase_control_mode must be of a type compatible with identityref""",
          'defined-type': "openconfig-wavelength-router:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'ASE_ENABLED': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'openconfig-wavelength-router:ASE_ENABLED': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'oc-wave-router:ASE_ENABLED': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'ASE_DISABLED': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'openconfig-wavelength-router:ASE_DISABLED': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'oc-wave-router:ASE_DISABLED': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'AUTO_ASE_ON_FAILURE': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'openconfig-wavelength-router:AUTO_ASE_ON_FAILURE': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'oc-wave-router:AUTO_ASE_ON_FAILURE': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'AUTO_ASE_FAILURE_AND_RESTORE': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'openconfig-wavelength-router:AUTO_ASE_FAILURE_AND_RESTORE': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'oc-wave-router:AUTO_ASE_FAILURE_AND_RESTORE': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}},), is_leaf=True, yang_name="ase-control-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='identityref', is_config=False)""",
        })

    self.__ase_control_mode = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ase_control_mode(self):
    self.__ase_control_mode = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'ASE_ENABLED': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'openconfig-wavelength-router:ASE_ENABLED': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'oc-wave-router:ASE_ENABLED': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'ASE_DISABLED': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'openconfig-wavelength-router:ASE_DISABLED': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'oc-wave-router:ASE_DISABLED': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'AUTO_ASE_ON_FAILURE': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'openconfig-wavelength-router:AUTO_ASE_ON_FAILURE': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'oc-wave-router:AUTO_ASE_ON_FAILURE': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'AUTO_ASE_FAILURE_AND_RESTORE': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'openconfig-wavelength-router:AUTO_ASE_FAILURE_AND_RESTORE': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'oc-wave-router:AUTO_ASE_FAILURE_AND_RESTORE': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}},), is_leaf=True, yang_name="ase-control-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='identityref', is_config=False)


  def _get_ase_injection_mode(self):
    """
    Getter method for ase_injection_mode, mapped from YANG variable /wavelength_router/media_channels/channel/state/ase_injection_mode (enumeration)

    YANG Description: When specified, defines the mode used to determine whether
ASE noise should be injected on the media channel.
    """
    return self.__ase_injection_mode
      
  def _set_ase_injection_mode(self, v, load=False):
    """
    Setter method for ase_injection_mode, mapped from YANG variable /wavelength_router/media_channels/channel/state/ase_injection_mode (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ase_injection_mode is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ase_injection_mode() directly.

    YANG Description: When specified, defines the mode used to determine whether
ASE noise should be injected on the media channel.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'MODE_THRESHOLD': {}, 'MODE_DELTA': {}},), is_leaf=True, yang_name="ase-injection-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='enumeration', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ase_injection_mode must be of a type compatible with enumeration""",
          'defined-type': "openconfig-wavelength-router:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'MODE_THRESHOLD': {}, 'MODE_DELTA': {}},), is_leaf=True, yang_name="ase-injection-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='enumeration', is_config=False)""",
        })

    self.__ase_injection_mode = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ase_injection_mode(self):
    self.__ase_injection_mode = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'MODE_THRESHOLD': {}, 'MODE_DELTA': {}},), is_leaf=True, yang_name="ase-injection-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='enumeration', is_config=False)


  def _get_ase_injection_threshold(self):
    """
    Getter method for ase_injection_threshold, mapped from YANG variable /wavelength_router/media_channels/channel/state/ase_injection_threshold (decimal64)

    YANG Description: Defines the optical power threshold value below which ASE
noise should be injected on the media channel. This or
ase-injection-delta is required if an ase-control-mode is
configured
    """
    return self.__ase_injection_threshold
      
  def _set_ase_injection_threshold(self, v, load=False):
    """
    Setter method for ase_injection_threshold, mapped from YANG variable /wavelength_router/media_channels/channel/state/ase_injection_threshold (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ase_injection_threshold is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ase_injection_threshold() directly.

    YANG Description: Defines the optical power threshold value below which ASE
noise should be injected on the media channel. This or
ase-injection-delta is required if an ase-control-mode is
configured
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="ase-injection-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ase_injection_threshold must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="ase-injection-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='decimal64', is_config=False)""",
        })

    self.__ase_injection_threshold = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ase_injection_threshold(self):
    self.__ase_injection_threshold = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="ase-injection-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='decimal64', is_config=False)


  def _get_ase_injection_delta(self):
    """
    Getter method for ase_injection_delta, mapped from YANG variable /wavelength_router/media_channels/channel/state/ase_injection_delta (decimal64)

    YANG Description: Defines the optical power loss from the configured spectrum
power profile, which would indicate that ASE noise should be
injected on the media channel. This or
ase-injection-threshold is required if an ase-control-mode
is configured
    """
    return self.__ase_injection_delta
      
  def _set_ase_injection_delta(self, v, load=False):
    """
    Setter method for ase_injection_delta, mapped from YANG variable /wavelength_router/media_channels/channel/state/ase_injection_delta (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ase_injection_delta is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ase_injection_delta() directly.

    YANG Description: Defines the optical power loss from the configured spectrum
power profile, which would indicate that ASE noise should be
injected on the media channel. This or
ase-injection-threshold is required if an ase-control-mode
is configured
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="ase-injection-delta", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ase_injection_delta must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="ase-injection-delta", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='decimal64', is_config=False)""",
        })

    self.__ase_injection_delta = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ase_injection_delta(self):
    self.__ase_injection_delta = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="ase-injection-delta", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='decimal64', is_config=False)


  def _get_media_channel_injection_offset(self):
    """
    Getter method for media_channel_injection_offset, mapped from YANG variable /wavelength_router/media_channels/channel/state/media_channel_injection_offset (decimal64)

    YANG Description: Defines the optical power offset value relative to the
ASE injection threshold at which point ASE should be removed
and the media-channel should be injected. Requires
ase-injection-delta or ase-injection-threshold to be
configured
    """
    return self.__media_channel_injection_offset
      
  def _set_media_channel_injection_offset(self, v, load=False):
    """
    Setter method for media_channel_injection_offset, mapped from YANG variable /wavelength_router/media_channels/channel/state/media_channel_injection_offset (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_media_channel_injection_offset is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_media_channel_injection_offset() directly.

    YANG Description: Defines the optical power offset value relative to the
ASE injection threshold at which point ASE should be removed
and the media-channel should be injected. Requires
ase-injection-delta or ase-injection-threshold to be
configured
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="media-channel-injection-offset", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """media_channel_injection_offset must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="media-channel-injection-offset", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='decimal64', is_config=False)""",
        })

    self.__media_channel_injection_offset = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_media_channel_injection_offset(self):
    self.__media_channel_injection_offset = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="media-channel-injection-offset", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='decimal64', is_config=False)


  def _get_attenuation_control_mode(self):
    """
    Getter method for attenuation_control_mode, mapped from YANG variable /wavelength_router/media_channels/channel/state/attenuation_control_mode (identityref)

    YANG Description: Sets the attenuation control mode for the media channel.
The control mode defines the behavior of how the attenuation
across a media channel is set
    """
    return self.__attenuation_control_mode
      
  def _set_attenuation_control_mode(self, v, load=False):
    """
    Setter method for attenuation_control_mode, mapped from YANG variable /wavelength_router/media_channels/channel/state/attenuation_control_mode (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_attenuation_control_mode is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_attenuation_control_mode() directly.

    YANG Description: Sets the attenuation control mode for the media channel.
The control mode defines the behavior of how the attenuation
across a media channel is set
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'ATTENUATION_FIXED_LOSS': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'openconfig-wavelength-router:ATTENUATION_FIXED_LOSS': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'oc-wave-router:ATTENUATION_FIXED_LOSS': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'ATTENUATION_DYNAMIC_LOSS': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'openconfig-wavelength-router:ATTENUATION_DYNAMIC_LOSS': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'oc-wave-router:ATTENUATION_DYNAMIC_LOSS': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'ATTENUATION_DYNAMIC_LOSS_DAMPED': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'openconfig-wavelength-router:ATTENUATION_DYNAMIC_LOSS_DAMPED': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'oc-wave-router:ATTENUATION_DYNAMIC_LOSS_DAMPED': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}},), is_leaf=True, yang_name="attenuation-control-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='identityref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """attenuation_control_mode must be of a type compatible with identityref""",
          'defined-type': "openconfig-wavelength-router:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'ATTENUATION_FIXED_LOSS': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'openconfig-wavelength-router:ATTENUATION_FIXED_LOSS': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'oc-wave-router:ATTENUATION_FIXED_LOSS': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'ATTENUATION_DYNAMIC_LOSS': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'openconfig-wavelength-router:ATTENUATION_DYNAMIC_LOSS': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'oc-wave-router:ATTENUATION_DYNAMIC_LOSS': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'ATTENUATION_DYNAMIC_LOSS_DAMPED': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'openconfig-wavelength-router:ATTENUATION_DYNAMIC_LOSS_DAMPED': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'oc-wave-router:ATTENUATION_DYNAMIC_LOSS_DAMPED': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}},), is_leaf=True, yang_name="attenuation-control-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='identityref', is_config=False)""",
        })

    self.__attenuation_control_mode = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_attenuation_control_mode(self):
    self.__attenuation_control_mode = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'ATTENUATION_FIXED_LOSS': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'openconfig-wavelength-router:ATTENUATION_FIXED_LOSS': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'oc-wave-router:ATTENUATION_FIXED_LOSS': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'ATTENUATION_DYNAMIC_LOSS': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'openconfig-wavelength-router:ATTENUATION_DYNAMIC_LOSS': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'oc-wave-router:ATTENUATION_DYNAMIC_LOSS': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'ATTENUATION_DYNAMIC_LOSS_DAMPED': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'openconfig-wavelength-router:ATTENUATION_DYNAMIC_LOSS_DAMPED': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'oc-wave-router:ATTENUATION_DYNAMIC_LOSS_DAMPED': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}},), is_leaf=True, yang_name="attenuation-control-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='identityref', is_config=False)


  def _get_attenuation_control_range(self):
    """
    Getter method for attenuation_control_range, mapped from YANG variable /wavelength_router/media_channels/channel/state/attenuation_control_range (identityref)

    YANG Description: Sets the attenuation control range for the media channel.
The control range defines the amount of media channel
undershoot and overshoot compensation that will be applied
when performing power targeting to meet the defined output
port spectrum power profile
    """
    return self.__attenuation_control_range
      
  def _set_attenuation_control_range(self, v, load=False):
    """
    Setter method for attenuation_control_range, mapped from YANG variable /wavelength_router/media_channels/channel/state/attenuation_control_range (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_attenuation_control_range is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_attenuation_control_range() directly.

    YANG Description: Sets the attenuation control range for the media channel.
The control range defines the amount of media channel
undershoot and overshoot compensation that will be applied
when performing power targeting to meet the defined output
port spectrum power profile
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'CONTROL_RANGE_FULL': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'openconfig-wavelength-router:CONTROL_RANGE_FULL': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'oc-wave-router:CONTROL_RANGE_FULL': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'CONTROL_RANGE_LIMITED': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'openconfig-wavelength-router:CONTROL_RANGE_LIMITED': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'oc-wave-router:CONTROL_RANGE_LIMITED': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}},), is_leaf=True, yang_name="attenuation-control-range", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='identityref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """attenuation_control_range must be of a type compatible with identityref""",
          'defined-type': "openconfig-wavelength-router:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'CONTROL_RANGE_FULL': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'openconfig-wavelength-router:CONTROL_RANGE_FULL': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'oc-wave-router:CONTROL_RANGE_FULL': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'CONTROL_RANGE_LIMITED': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'openconfig-wavelength-router:CONTROL_RANGE_LIMITED': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'oc-wave-router:CONTROL_RANGE_LIMITED': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}},), is_leaf=True, yang_name="attenuation-control-range", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='identityref', is_config=False)""",
        })

    self.__attenuation_control_range = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_attenuation_control_range(self):
    self.__attenuation_control_range = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'CONTROL_RANGE_FULL': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'openconfig-wavelength-router:CONTROL_RANGE_FULL': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'oc-wave-router:CONTROL_RANGE_FULL': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'CONTROL_RANGE_LIMITED': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'openconfig-wavelength-router:CONTROL_RANGE_LIMITED': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'oc-wave-router:CONTROL_RANGE_LIMITED': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}},), is_leaf=True, yang_name="attenuation-control-range", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='identityref', is_config=False)


  def _get_max_undershoot_compensation(self):
    """
    Getter method for max_undershoot_compensation, mapped from YANG variable /wavelength_router/media_channels/channel/state/max_undershoot_compensation (decimal64)

    YANG Description: Defines the maximum allowable WSS attenuation adjustment
the system will use to compensate a channel with input power
lower than the defined target power at the input. This value
is measured relative to the baseline WSS attenuation
established for an individual media-channel
    """
    return self.__max_undershoot_compensation
      
  def _set_max_undershoot_compensation(self, v, load=False):
    """
    Setter method for max_undershoot_compensation, mapped from YANG variable /wavelength_router/media_channels/channel/state/max_undershoot_compensation (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_undershoot_compensation is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_undershoot_compensation() directly.

    YANG Description: Defines the maximum allowable WSS attenuation adjustment
the system will use to compensate a channel with input power
lower than the defined target power at the input. This value
is measured relative to the baseline WSS attenuation
established for an individual media-channel
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="max-undershoot-compensation", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_undershoot_compensation must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="max-undershoot-compensation", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='decimal64', is_config=False)""",
        })

    self.__max_undershoot_compensation = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_undershoot_compensation(self):
    self.__max_undershoot_compensation = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="max-undershoot-compensation", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='decimal64', is_config=False)


  def _get_max_overshoot_compensation(self):
    """
    Getter method for max_overshoot_compensation, mapped from YANG variable /wavelength_router/media_channels/channel/state/max_overshoot_compensation (decimal64)

    YANG Description: Defines the maximum allowable WSS attenuation adjustment
the system will use to compensate a channel with input power
higher than the defined target power at the input. This
value is measured relative to the baseline WSS attenuation
established for an individual media-channel
    """
    return self.__max_overshoot_compensation
      
  def _set_max_overshoot_compensation(self, v, load=False):
    """
    Setter method for max_overshoot_compensation, mapped from YANG variable /wavelength_router/media_channels/channel/state/max_overshoot_compensation (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_overshoot_compensation is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_overshoot_compensation() directly.

    YANG Description: Defines the maximum allowable WSS attenuation adjustment
the system will use to compensate a channel with input power
higher than the defined target power at the input. This
value is measured relative to the baseline WSS attenuation
established for an individual media-channel
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="max-overshoot-compensation", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_overshoot_compensation must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="max-overshoot-compensation", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='decimal64', is_config=False)""",
        })

    self.__max_overshoot_compensation = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_overshoot_compensation(self):
    self.__max_overshoot_compensation = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="max-overshoot-compensation", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='decimal64', is_config=False)


  def _get_oper_status(self):
    """
    Getter method for oper_status, mapped from YANG variable /wavelength_router/media_channels/channel/state/oper_status (enumeration)

    YANG Description: Operational state of the media channel
    """
    return self.__oper_status
      
  def _set_oper_status(self, v, load=False):
    """
    Setter method for oper_status, mapped from YANG variable /wavelength_router/media_channels/channel/state/oper_status (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_oper_status is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_oper_status() directly.

    YANG Description: Operational state of the media channel
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'UP': {}, 'DOWN': {}},), is_leaf=True, yang_name="oper-status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='enumeration', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """oper_status must be of a type compatible with enumeration""",
          'defined-type': "openconfig-wavelength-router:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'UP': {}, 'DOWN': {}},), is_leaf=True, yang_name="oper-status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='enumeration', is_config=False)""",
        })

    self.__oper_status = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_oper_status(self):
    self.__oper_status = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'UP': {}, 'DOWN': {}},), is_leaf=True, yang_name="oper-status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='enumeration', is_config=False)


  def _get_ase_status(self):
    """
    Getter method for ase_status, mapped from YANG variable /wavelength_router/media_channels/channel/state/ase_status (enumeration)

    YANG Description: Status of injected ASE noise on the media channel
    """
    return self.__ase_status
      
  def _set_ase_status(self, v, load=False):
    """
    Setter method for ase_status, mapped from YANG variable /wavelength_router/media_channels/channel/state/ase_status (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ase_status is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ase_status() directly.

    YANG Description: Status of injected ASE noise on the media channel
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'PRESENT': {}, 'NOT_PRESENT': {}},), is_leaf=True, yang_name="ase-status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='enumeration', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ase_status must be of a type compatible with enumeration""",
          'defined-type': "openconfig-wavelength-router:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'PRESENT': {}, 'NOT_PRESENT': {}},), is_leaf=True, yang_name="ase-status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='enumeration', is_config=False)""",
        })

    self.__ase_status = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ase_status(self):
    self.__ase_status = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'PRESENT': {}, 'NOT_PRESENT': {}},), is_leaf=True, yang_name="ase-status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='enumeration', is_config=False)

  index = __builtin__.property(_get_index)
  name = __builtin__.property(_get_name)
  lower_frequency = __builtin__.property(_get_lower_frequency)
  upper_frequency = __builtin__.property(_get_upper_frequency)
  admin_status = __builtin__.property(_get_admin_status)
  super_channel = __builtin__.property(_get_super_channel)
  super_channel_parent = __builtin__.property(_get_super_channel_parent)
  ase_control_mode = __builtin__.property(_get_ase_control_mode)
  ase_injection_mode = __builtin__.property(_get_ase_injection_mode)
  ase_injection_threshold = __builtin__.property(_get_ase_injection_threshold)
  ase_injection_delta = __builtin__.property(_get_ase_injection_delta)
  media_channel_injection_offset = __builtin__.property(_get_media_channel_injection_offset)
  attenuation_control_mode = __builtin__.property(_get_attenuation_control_mode)
  attenuation_control_range = __builtin__.property(_get_attenuation_control_range)
  max_undershoot_compensation = __builtin__.property(_get_max_undershoot_compensation)
  max_overshoot_compensation = __builtin__.property(_get_max_overshoot_compensation)
  oper_status = __builtin__.property(_get_oper_status)
  ase_status = __builtin__.property(_get_ase_status)


  _pyangbind_elements = OrderedDict([('index', index), ('name', name), ('lower_frequency', lower_frequency), ('upper_frequency', upper_frequency), ('admin_status', admin_status), ('super_channel', super_channel), ('super_channel_parent', super_channel_parent), ('ase_control_mode', ase_control_mode), ('ase_injection_mode', ase_injection_mode), ('ase_injection_threshold', ase_injection_threshold), ('ase_injection_delta', ase_injection_delta), ('media_channel_injection_offset', media_channel_injection_offset), ('attenuation_control_mode', attenuation_control_mode), ('attenuation_control_range', attenuation_control_range), ('max_undershoot_compensation', max_undershoot_compensation), ('max_overshoot_compensation', max_overshoot_compensation), ('oper_status', oper_status), ('ase_status', ase_status), ])


class state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module openconfig-wavelength-router - based on the path /wavelength-router/media-channels/channel/state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Operational state data 
  """
  __slots__ = ('_path_helper', '_extmethods', '__index','__name','__lower_frequency','__upper_frequency','__admin_status','__super_channel','__super_channel_parent','__ase_control_mode','__ase_injection_mode','__ase_injection_threshold','__ase_injection_delta','__media_channel_injection_offset','__attenuation_control_mode','__attenuation_control_range','__max_undershoot_compensation','__max_overshoot_compensation','__oper_status','__ase_status',)

  _yang_name = 'state'
  _yang_namespace = 'http://openconfig.net/yang/wavelength-router'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    self._path_helper = False

    self._extmethods = False
    self.__index = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='uint32', is_config=False)
    self.__name = YANGDynClass(base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='string', is_config=False)
    self.__lower_frequency = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="lower-frequency", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='oc-opt-types:frequency-type', is_config=False)
    self.__upper_frequency = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="upper-frequency", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='oc-opt-types:frequency-type', is_config=False)
    self.__admin_status = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'ENABLED': {}, 'DISABLED': {}, 'MAINT': {}},), is_leaf=True, yang_name="admin-status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='oc-opt-types:admin-state-type', is_config=False)
    self.__super_channel = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="super-channel", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='boolean', is_config=False)
    self.__super_channel_parent = YANGDynClass(base=str, is_leaf=True, yang_name="super-channel-parent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='leafref', is_config=False)
    self.__ase_control_mode = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'ASE_ENABLED': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'openconfig-wavelength-router:ASE_ENABLED': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'oc-wave-router:ASE_ENABLED': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'ASE_DISABLED': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'openconfig-wavelength-router:ASE_DISABLED': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'oc-wave-router:ASE_DISABLED': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'AUTO_ASE_ON_FAILURE': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'openconfig-wavelength-router:AUTO_ASE_ON_FAILURE': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'oc-wave-router:AUTO_ASE_ON_FAILURE': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'AUTO_ASE_FAILURE_AND_RESTORE': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'openconfig-wavelength-router:AUTO_ASE_FAILURE_AND_RESTORE': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'oc-wave-router:AUTO_ASE_FAILURE_AND_RESTORE': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}},), is_leaf=True, yang_name="ase-control-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='identityref', is_config=False)
    self.__ase_injection_mode = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'MODE_THRESHOLD': {}, 'MODE_DELTA': {}},), is_leaf=True, yang_name="ase-injection-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='enumeration', is_config=False)
    self.__ase_injection_threshold = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="ase-injection-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='decimal64', is_config=False)
    self.__ase_injection_delta = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="ase-injection-delta", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='decimal64', is_config=False)
    self.__media_channel_injection_offset = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="media-channel-injection-offset", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='decimal64', is_config=False)
    self.__attenuation_control_mode = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'ATTENUATION_FIXED_LOSS': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'openconfig-wavelength-router:ATTENUATION_FIXED_LOSS': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'oc-wave-router:ATTENUATION_FIXED_LOSS': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'ATTENUATION_DYNAMIC_LOSS': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'openconfig-wavelength-router:ATTENUATION_DYNAMIC_LOSS': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'oc-wave-router:ATTENUATION_DYNAMIC_LOSS': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'ATTENUATION_DYNAMIC_LOSS_DAMPED': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'openconfig-wavelength-router:ATTENUATION_DYNAMIC_LOSS_DAMPED': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'oc-wave-router:ATTENUATION_DYNAMIC_LOSS_DAMPED': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}},), is_leaf=True, yang_name="attenuation-control-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='identityref', is_config=False)
    self.__attenuation_control_range = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'CONTROL_RANGE_FULL': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'openconfig-wavelength-router:CONTROL_RANGE_FULL': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'oc-wave-router:CONTROL_RANGE_FULL': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'CONTROL_RANGE_LIMITED': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'openconfig-wavelength-router:CONTROL_RANGE_LIMITED': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'oc-wave-router:CONTROL_RANGE_LIMITED': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}},), is_leaf=True, yang_name="attenuation-control-range", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='identityref', is_config=False)
    self.__max_undershoot_compensation = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="max-undershoot-compensation", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='decimal64', is_config=False)
    self.__max_overshoot_compensation = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="max-overshoot-compensation", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='decimal64', is_config=False)
    self.__oper_status = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'UP': {}, 'DOWN': {}},), is_leaf=True, yang_name="oper-status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='enumeration', is_config=False)
    self.__ase_status = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'PRESENT': {}, 'NOT_PRESENT': {}},), is_leaf=True, yang_name="ase-status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='enumeration', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['wavelength-router', 'media-channels', 'channel', 'state']

  def _get_index(self):
    """
    Getter method for index, mapped from YANG variable /wavelength_router/media_channels/channel/state/index (uint32)

    YANG Description: Identifier for the defined media channel
    """
    return self.__index
      
  def _set_index(self, v, load=False):
    """
    Setter method for index, mapped from YANG variable /wavelength_router/media_channels/channel/state/index (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_index is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_index() directly.

    YANG Description: Identifier for the defined media channel
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """index must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='uint32', is_config=False)""",
        })

    self.__index = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_index(self):
    self.__index = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='uint32', is_config=False)


  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /wavelength_router/media_channels/channel/state/name (string)

    YANG Description: The user supplied name of the media channel
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /wavelength_router/media_channels/channel/state/name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: The user supplied name of the media channel
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='string', is_config=False)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=str, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='string', is_config=False)


  def _get_lower_frequency(self):
    """
    Getter method for lower_frequency, mapped from YANG variable /wavelength_router/media_channels/channel/state/lower_frequency (oc-opt-types:frequency-type)

    YANG Description: The lower frequency for the spectrum defined by this media
channel
    """
    return self.__lower_frequency
      
  def _set_lower_frequency(self, v, load=False):
    """
    Setter method for lower_frequency, mapped from YANG variable /wavelength_router/media_channels/channel/state/lower_frequency (oc-opt-types:frequency-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lower_frequency is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lower_frequency() directly.

    YANG Description: The lower frequency for the spectrum defined by this media
channel
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="lower-frequency", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='oc-opt-types:frequency-type', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lower_frequency must be of a type compatible with oc-opt-types:frequency-type""",
          'defined-type': "oc-opt-types:frequency-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="lower-frequency", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='oc-opt-types:frequency-type', is_config=False)""",
        })

    self.__lower_frequency = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lower_frequency(self):
    self.__lower_frequency = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="lower-frequency", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='oc-opt-types:frequency-type', is_config=False)


  def _get_upper_frequency(self):
    """
    Getter method for upper_frequency, mapped from YANG variable /wavelength_router/media_channels/channel/state/upper_frequency (oc-opt-types:frequency-type)

    YANG Description: The upper frequency for the spectrum defined by this media
channel
    """
    return self.__upper_frequency
      
  def _set_upper_frequency(self, v, load=False):
    """
    Setter method for upper_frequency, mapped from YANG variable /wavelength_router/media_channels/channel/state/upper_frequency (oc-opt-types:frequency-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_upper_frequency is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_upper_frequency() directly.

    YANG Description: The upper frequency for the spectrum defined by this media
channel
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="upper-frequency", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='oc-opt-types:frequency-type', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """upper_frequency must be of a type compatible with oc-opt-types:frequency-type""",
          'defined-type': "oc-opt-types:frequency-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="upper-frequency", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='oc-opt-types:frequency-type', is_config=False)""",
        })

    self.__upper_frequency = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_upper_frequency(self):
    self.__upper_frequency = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="upper-frequency", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='oc-opt-types:frequency-type', is_config=False)


  def _get_admin_status(self):
    """
    Getter method for admin_status, mapped from YANG variable /wavelength_router/media_channels/channel/state/admin_status (oc-opt-types:admin-state-type)

    YANG Description: Sets the admin status of the media channel
    """
    return self.__admin_status
      
  def _set_admin_status(self, v, load=False):
    """
    Setter method for admin_status, mapped from YANG variable /wavelength_router/media_channels/channel/state/admin_status (oc-opt-types:admin-state-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_admin_status is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_admin_status() directly.

    YANG Description: Sets the admin status of the media channel
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'ENABLED': {}, 'DISABLED': {}, 'MAINT': {}},), is_leaf=True, yang_name="admin-status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='oc-opt-types:admin-state-type', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """admin_status must be of a type compatible with oc-opt-types:admin-state-type""",
          'defined-type': "oc-opt-types:admin-state-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'ENABLED': {}, 'DISABLED': {}, 'MAINT': {}},), is_leaf=True, yang_name="admin-status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='oc-opt-types:admin-state-type', is_config=False)""",
        })

    self.__admin_status = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_admin_status(self):
    self.__admin_status = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'ENABLED': {}, 'DISABLED': {}, 'MAINT': {}},), is_leaf=True, yang_name="admin-status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='oc-opt-types:admin-state-type', is_config=False)


  def _get_super_channel(self):
    """
    Getter method for super_channel, mapped from YANG variable /wavelength_router/media_channels/channel/state/super_channel (boolean)

    YANG Description: True if the media channel is a super channel which
contains multiple media channels within it. The contained
media channels should fall within the boundaries of the
super channel. The device should raise an error if a media
channel crosses a super channel boundary. When using super
channels, spectrum power targets should be defined in either
the:
- port-spectrum-power-profiles for the port which matches the
  source port of the media channel representing the super
  channel
- media channels that are contained within the super
  channel, but not on the super channel itself
    """
    return self.__super_channel
      
  def _set_super_channel(self, v, load=False):
    """
    Setter method for super_channel, mapped from YANG variable /wavelength_router/media_channels/channel/state/super_channel (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_super_channel is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_super_channel() directly.

    YANG Description: True if the media channel is a super channel which
contains multiple media channels within it. The contained
media channels should fall within the boundaries of the
super channel. The device should raise an error if a media
channel crosses a super channel boundary. When using super
channels, spectrum power targets should be defined in either
the:
- port-spectrum-power-profiles for the port which matches the
  source port of the media channel representing the super
  channel
- media channels that are contained within the super
  channel, but not on the super channel itself
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="super-channel", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """super_channel must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="super-channel", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='boolean', is_config=False)""",
        })

    self.__super_channel = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_super_channel(self):
    self.__super_channel = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="super-channel", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='boolean', is_config=False)


  def _get_super_channel_parent(self):
    """
    Getter method for super_channel_parent, mapped from YANG variable /wavelength_router/media_channels/channel/state/super_channel_parent (leafref)

    YANG Description: If the media channel is contained within a super channel this
would specify the index of the super channel parent
    """
    return self.__super_channel_parent
      
  def _set_super_channel_parent(self, v, load=False):
    """
    Setter method for super_channel_parent, mapped from YANG variable /wavelength_router/media_channels/channel/state/super_channel_parent (leafref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_super_channel_parent is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_super_channel_parent() directly.

    YANG Description: If the media channel is contained within a super channel this
would specify the index of the super channel parent
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=str, is_leaf=True, yang_name="super-channel-parent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='leafref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """super_channel_parent must be of a type compatible with leafref""",
          'defined-type': "leafref",
          'generated-type': """YANGDynClass(base=str, is_leaf=True, yang_name="super-channel-parent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='leafref', is_config=False)""",
        })

    self.__super_channel_parent = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_super_channel_parent(self):
    self.__super_channel_parent = YANGDynClass(base=str, is_leaf=True, yang_name="super-channel-parent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='leafref', is_config=False)


  def _get_ase_control_mode(self):
    """
    Getter method for ase_control_mode, mapped from YANG variable /wavelength_router/media_channels/channel/state/ase_control_mode (identityref)

    YANG Description: Sets the ASE control mode for the media channel.
The control mode defines if and when ASE noise is injected
on the media channel
    """
    return self.__ase_control_mode
      
  def _set_ase_control_mode(self, v, load=False):
    """
    Setter method for ase_control_mode, mapped from YANG variable /wavelength_router/media_channels/channel/state/ase_control_mode (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ase_control_mode is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ase_control_mode() directly.

    YANG Description: Sets the ASE control mode for the media channel.
The control mode defines if and when ASE noise is injected
on the media channel
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'ASE_ENABLED': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'openconfig-wavelength-router:ASE_ENABLED': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'oc-wave-router:ASE_ENABLED': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'ASE_DISABLED': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'openconfig-wavelength-router:ASE_DISABLED': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'oc-wave-router:ASE_DISABLED': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'AUTO_ASE_ON_FAILURE': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'openconfig-wavelength-router:AUTO_ASE_ON_FAILURE': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'oc-wave-router:AUTO_ASE_ON_FAILURE': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'AUTO_ASE_FAILURE_AND_RESTORE': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'openconfig-wavelength-router:AUTO_ASE_FAILURE_AND_RESTORE': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'oc-wave-router:AUTO_ASE_FAILURE_AND_RESTORE': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}},), is_leaf=True, yang_name="ase-control-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='identityref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ase_control_mode must be of a type compatible with identityref""",
          'defined-type': "openconfig-wavelength-router:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'ASE_ENABLED': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'openconfig-wavelength-router:ASE_ENABLED': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'oc-wave-router:ASE_ENABLED': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'ASE_DISABLED': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'openconfig-wavelength-router:ASE_DISABLED': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'oc-wave-router:ASE_DISABLED': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'AUTO_ASE_ON_FAILURE': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'openconfig-wavelength-router:AUTO_ASE_ON_FAILURE': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'oc-wave-router:AUTO_ASE_ON_FAILURE': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'AUTO_ASE_FAILURE_AND_RESTORE': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'openconfig-wavelength-router:AUTO_ASE_FAILURE_AND_RESTORE': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'oc-wave-router:AUTO_ASE_FAILURE_AND_RESTORE': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}},), is_leaf=True, yang_name="ase-control-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='identityref', is_config=False)""",
        })

    self.__ase_control_mode = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ase_control_mode(self):
    self.__ase_control_mode = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'ASE_ENABLED': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'openconfig-wavelength-router:ASE_ENABLED': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'oc-wave-router:ASE_ENABLED': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'ASE_DISABLED': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'openconfig-wavelength-router:ASE_DISABLED': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'oc-wave-router:ASE_DISABLED': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'AUTO_ASE_ON_FAILURE': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'openconfig-wavelength-router:AUTO_ASE_ON_FAILURE': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'oc-wave-router:AUTO_ASE_ON_FAILURE': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'AUTO_ASE_FAILURE_AND_RESTORE': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'openconfig-wavelength-router:AUTO_ASE_FAILURE_AND_RESTORE': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'oc-wave-router:AUTO_ASE_FAILURE_AND_RESTORE': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}},), is_leaf=True, yang_name="ase-control-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='identityref', is_config=False)


  def _get_ase_injection_mode(self):
    """
    Getter method for ase_injection_mode, mapped from YANG variable /wavelength_router/media_channels/channel/state/ase_injection_mode (enumeration)

    YANG Description: When specified, defines the mode used to determine whether
ASE noise should be injected on the media channel.
    """
    return self.__ase_injection_mode
      
  def _set_ase_injection_mode(self, v, load=False):
    """
    Setter method for ase_injection_mode, mapped from YANG variable /wavelength_router/media_channels/channel/state/ase_injection_mode (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ase_injection_mode is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ase_injection_mode() directly.

    YANG Description: When specified, defines the mode used to determine whether
ASE noise should be injected on the media channel.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'MODE_THRESHOLD': {}, 'MODE_DELTA': {}},), is_leaf=True, yang_name="ase-injection-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='enumeration', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ase_injection_mode must be of a type compatible with enumeration""",
          'defined-type': "openconfig-wavelength-router:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'MODE_THRESHOLD': {}, 'MODE_DELTA': {}},), is_leaf=True, yang_name="ase-injection-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='enumeration', is_config=False)""",
        })

    self.__ase_injection_mode = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ase_injection_mode(self):
    self.__ase_injection_mode = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'MODE_THRESHOLD': {}, 'MODE_DELTA': {}},), is_leaf=True, yang_name="ase-injection-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='enumeration', is_config=False)


  def _get_ase_injection_threshold(self):
    """
    Getter method for ase_injection_threshold, mapped from YANG variable /wavelength_router/media_channels/channel/state/ase_injection_threshold (decimal64)

    YANG Description: Defines the optical power threshold value below which ASE
noise should be injected on the media channel. This or
ase-injection-delta is required if an ase-control-mode is
configured
    """
    return self.__ase_injection_threshold
      
  def _set_ase_injection_threshold(self, v, load=False):
    """
    Setter method for ase_injection_threshold, mapped from YANG variable /wavelength_router/media_channels/channel/state/ase_injection_threshold (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ase_injection_threshold is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ase_injection_threshold() directly.

    YANG Description: Defines the optical power threshold value below which ASE
noise should be injected on the media channel. This or
ase-injection-delta is required if an ase-control-mode is
configured
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="ase-injection-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ase_injection_threshold must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="ase-injection-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='decimal64', is_config=False)""",
        })

    self.__ase_injection_threshold = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ase_injection_threshold(self):
    self.__ase_injection_threshold = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="ase-injection-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='decimal64', is_config=False)


  def _get_ase_injection_delta(self):
    """
    Getter method for ase_injection_delta, mapped from YANG variable /wavelength_router/media_channels/channel/state/ase_injection_delta (decimal64)

    YANG Description: Defines the optical power loss from the configured spectrum
power profile, which would indicate that ASE noise should be
injected on the media channel. This or
ase-injection-threshold is required if an ase-control-mode
is configured
    """
    return self.__ase_injection_delta
      
  def _set_ase_injection_delta(self, v, load=False):
    """
    Setter method for ase_injection_delta, mapped from YANG variable /wavelength_router/media_channels/channel/state/ase_injection_delta (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ase_injection_delta is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ase_injection_delta() directly.

    YANG Description: Defines the optical power loss from the configured spectrum
power profile, which would indicate that ASE noise should be
injected on the media channel. This or
ase-injection-threshold is required if an ase-control-mode
is configured
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="ase-injection-delta", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ase_injection_delta must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="ase-injection-delta", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='decimal64', is_config=False)""",
        })

    self.__ase_injection_delta = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ase_injection_delta(self):
    self.__ase_injection_delta = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="ase-injection-delta", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='decimal64', is_config=False)


  def _get_media_channel_injection_offset(self):
    """
    Getter method for media_channel_injection_offset, mapped from YANG variable /wavelength_router/media_channels/channel/state/media_channel_injection_offset (decimal64)

    YANG Description: Defines the optical power offset value relative to the
ASE injection threshold at which point ASE should be removed
and the media-channel should be injected. Requires
ase-injection-delta or ase-injection-threshold to be
configured
    """
    return self.__media_channel_injection_offset
      
  def _set_media_channel_injection_offset(self, v, load=False):
    """
    Setter method for media_channel_injection_offset, mapped from YANG variable /wavelength_router/media_channels/channel/state/media_channel_injection_offset (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_media_channel_injection_offset is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_media_channel_injection_offset() directly.

    YANG Description: Defines the optical power offset value relative to the
ASE injection threshold at which point ASE should be removed
and the media-channel should be injected. Requires
ase-injection-delta or ase-injection-threshold to be
configured
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="media-channel-injection-offset", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """media_channel_injection_offset must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="media-channel-injection-offset", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='decimal64', is_config=False)""",
        })

    self.__media_channel_injection_offset = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_media_channel_injection_offset(self):
    self.__media_channel_injection_offset = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="media-channel-injection-offset", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='decimal64', is_config=False)


  def _get_attenuation_control_mode(self):
    """
    Getter method for attenuation_control_mode, mapped from YANG variable /wavelength_router/media_channels/channel/state/attenuation_control_mode (identityref)

    YANG Description: Sets the attenuation control mode for the media channel.
The control mode defines the behavior of how the attenuation
across a media channel is set
    """
    return self.__attenuation_control_mode
      
  def _set_attenuation_control_mode(self, v, load=False):
    """
    Setter method for attenuation_control_mode, mapped from YANG variable /wavelength_router/media_channels/channel/state/attenuation_control_mode (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_attenuation_control_mode is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_attenuation_control_mode() directly.

    YANG Description: Sets the attenuation control mode for the media channel.
The control mode defines the behavior of how the attenuation
across a media channel is set
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'ATTENUATION_FIXED_LOSS': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'openconfig-wavelength-router:ATTENUATION_FIXED_LOSS': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'oc-wave-router:ATTENUATION_FIXED_LOSS': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'ATTENUATION_DYNAMIC_LOSS': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'openconfig-wavelength-router:ATTENUATION_DYNAMIC_LOSS': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'oc-wave-router:ATTENUATION_DYNAMIC_LOSS': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'ATTENUATION_DYNAMIC_LOSS_DAMPED': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'openconfig-wavelength-router:ATTENUATION_DYNAMIC_LOSS_DAMPED': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'oc-wave-router:ATTENUATION_DYNAMIC_LOSS_DAMPED': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}},), is_leaf=True, yang_name="attenuation-control-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='identityref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """attenuation_control_mode must be of a type compatible with identityref""",
          'defined-type': "openconfig-wavelength-router:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'ATTENUATION_FIXED_LOSS': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'openconfig-wavelength-router:ATTENUATION_FIXED_LOSS': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'oc-wave-router:ATTENUATION_FIXED_LOSS': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'ATTENUATION_DYNAMIC_LOSS': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'openconfig-wavelength-router:ATTENUATION_DYNAMIC_LOSS': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'oc-wave-router:ATTENUATION_DYNAMIC_LOSS': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'ATTENUATION_DYNAMIC_LOSS_DAMPED': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'openconfig-wavelength-router:ATTENUATION_DYNAMIC_LOSS_DAMPED': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'oc-wave-router:ATTENUATION_DYNAMIC_LOSS_DAMPED': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}},), is_leaf=True, yang_name="attenuation-control-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='identityref', is_config=False)""",
        })

    self.__attenuation_control_mode = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_attenuation_control_mode(self):
    self.__attenuation_control_mode = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'ATTENUATION_FIXED_LOSS': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'openconfig-wavelength-router:ATTENUATION_FIXED_LOSS': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'oc-wave-router:ATTENUATION_FIXED_LOSS': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'ATTENUATION_DYNAMIC_LOSS': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'openconfig-wavelength-router:ATTENUATION_DYNAMIC_LOSS': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'oc-wave-router:ATTENUATION_DYNAMIC_LOSS': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'ATTENUATION_DYNAMIC_LOSS_DAMPED': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'openconfig-wavelength-router:ATTENUATION_DYNAMIC_LOSS_DAMPED': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'oc-wave-router:ATTENUATION_DYNAMIC_LOSS_DAMPED': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}},), is_leaf=True, yang_name="attenuation-control-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='identityref', is_config=False)


  def _get_attenuation_control_range(self):
    """
    Getter method for attenuation_control_range, mapped from YANG variable /wavelength_router/media_channels/channel/state/attenuation_control_range (identityref)

    YANG Description: Sets the attenuation control range for the media channel.
The control range defines the amount of media channel
undershoot and overshoot compensation that will be applied
when performing power targeting to meet the defined output
port spectrum power profile
    """
    return self.__attenuation_control_range
      
  def _set_attenuation_control_range(self, v, load=False):
    """
    Setter method for attenuation_control_range, mapped from YANG variable /wavelength_router/media_channels/channel/state/attenuation_control_range (identityref)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_attenuation_control_range is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_attenuation_control_range() directly.

    YANG Description: Sets the attenuation control range for the media channel.
The control range defines the amount of media channel
undershoot and overshoot compensation that will be applied
when performing power targeting to meet the defined output
port spectrum power profile
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'CONTROL_RANGE_FULL': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'openconfig-wavelength-router:CONTROL_RANGE_FULL': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'oc-wave-router:CONTROL_RANGE_FULL': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'CONTROL_RANGE_LIMITED': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'openconfig-wavelength-router:CONTROL_RANGE_LIMITED': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'oc-wave-router:CONTROL_RANGE_LIMITED': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}},), is_leaf=True, yang_name="attenuation-control-range", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='identityref', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """attenuation_control_range must be of a type compatible with identityref""",
          'defined-type': "openconfig-wavelength-router:identityref",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'CONTROL_RANGE_FULL': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'openconfig-wavelength-router:CONTROL_RANGE_FULL': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'oc-wave-router:CONTROL_RANGE_FULL': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'CONTROL_RANGE_LIMITED': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'openconfig-wavelength-router:CONTROL_RANGE_LIMITED': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'oc-wave-router:CONTROL_RANGE_LIMITED': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}},), is_leaf=True, yang_name="attenuation-control-range", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='identityref', is_config=False)""",
        })

    self.__attenuation_control_range = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_attenuation_control_range(self):
    self.__attenuation_control_range = YANGDynClass(base=RestrictedClassType(base_type=str, restriction_type="dict_key", restriction_arg={'CONTROL_RANGE_FULL': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'openconfig-wavelength-router:CONTROL_RANGE_FULL': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'oc-wave-router:CONTROL_RANGE_FULL': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'CONTROL_RANGE_LIMITED': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'openconfig-wavelength-router:CONTROL_RANGE_LIMITED': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}, 'oc-wave-router:CONTROL_RANGE_LIMITED': {'@module': 'openconfig-wavelength-router', '@namespace': 'http://openconfig.net/yang/wavelength-router'}},), is_leaf=True, yang_name="attenuation-control-range", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='identityref', is_config=False)


  def _get_max_undershoot_compensation(self):
    """
    Getter method for max_undershoot_compensation, mapped from YANG variable /wavelength_router/media_channels/channel/state/max_undershoot_compensation (decimal64)

    YANG Description: Defines the maximum allowable WSS attenuation adjustment
the system will use to compensate a channel with input power
lower than the defined target power at the input. This value
is measured relative to the baseline WSS attenuation
established for an individual media-channel
    """
    return self.__max_undershoot_compensation
      
  def _set_max_undershoot_compensation(self, v, load=False):
    """
    Setter method for max_undershoot_compensation, mapped from YANG variable /wavelength_router/media_channels/channel/state/max_undershoot_compensation (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_undershoot_compensation is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_undershoot_compensation() directly.

    YANG Description: Defines the maximum allowable WSS attenuation adjustment
the system will use to compensate a channel with input power
lower than the defined target power at the input. This value
is measured relative to the baseline WSS attenuation
established for an individual media-channel
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="max-undershoot-compensation", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_undershoot_compensation must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="max-undershoot-compensation", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='decimal64', is_config=False)""",
        })

    self.__max_undershoot_compensation = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_undershoot_compensation(self):
    self.__max_undershoot_compensation = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="max-undershoot-compensation", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='decimal64', is_config=False)


  def _get_max_overshoot_compensation(self):
    """
    Getter method for max_overshoot_compensation, mapped from YANG variable /wavelength_router/media_channels/channel/state/max_overshoot_compensation (decimal64)

    YANG Description: Defines the maximum allowable WSS attenuation adjustment
the system will use to compensate a channel with input power
higher than the defined target power at the input. This
value is measured relative to the baseline WSS attenuation
established for an individual media-channel
    """
    return self.__max_overshoot_compensation
      
  def _set_max_overshoot_compensation(self, v, load=False):
    """
    Setter method for max_overshoot_compensation, mapped from YANG variable /wavelength_router/media_channels/channel/state/max_overshoot_compensation (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_overshoot_compensation is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_overshoot_compensation() directly.

    YANG Description: Defines the maximum allowable WSS attenuation adjustment
the system will use to compensate a channel with input power
higher than the defined target power at the input. This
value is measured relative to the baseline WSS attenuation
established for an individual media-channel
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="max-overshoot-compensation", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_overshoot_compensation must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="max-overshoot-compensation", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='decimal64', is_config=False)""",
        })

    self.__max_overshoot_compensation = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_overshoot_compensation(self):
    self.__max_overshoot_compensation = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="max-overshoot-compensation", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='decimal64', is_config=False)


  def _get_oper_status(self):
    """
    Getter method for oper_status, mapped from YANG variable /wavelength_router/media_channels/channel/state/oper_status (enumeration)

    YANG Description: Operational state of the media channel
    """
    return self.__oper_status
      
  def _set_oper_status(self, v, load=False):
    """
    Setter method for oper_status, mapped from YANG variable /wavelength_router/media_channels/channel/state/oper_status (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_oper_status is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_oper_status() directly.

    YANG Description: Operational state of the media channel
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'UP': {}, 'DOWN': {}},), is_leaf=True, yang_name="oper-status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='enumeration', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """oper_status must be of a type compatible with enumeration""",
          'defined-type': "openconfig-wavelength-router:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'UP': {}, 'DOWN': {}},), is_leaf=True, yang_name="oper-status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='enumeration', is_config=False)""",
        })

    self.__oper_status = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_oper_status(self):
    self.__oper_status = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'UP': {}, 'DOWN': {}},), is_leaf=True, yang_name="oper-status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='enumeration', is_config=False)


  def _get_ase_status(self):
    """
    Getter method for ase_status, mapped from YANG variable /wavelength_router/media_channels/channel/state/ase_status (enumeration)

    YANG Description: Status of injected ASE noise on the media channel
    """
    return self.__ase_status
      
  def _set_ase_status(self, v, load=False):
    """
    Setter method for ase_status, mapped from YANG variable /wavelength_router/media_channels/channel/state/ase_status (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ase_status is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ase_status() directly.

    YANG Description: Status of injected ASE noise on the media channel
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'PRESENT': {}, 'NOT_PRESENT': {}},), is_leaf=True, yang_name="ase-status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='enumeration', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ase_status must be of a type compatible with enumeration""",
          'defined-type': "openconfig-wavelength-router:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'PRESENT': {}, 'NOT_PRESENT': {}},), is_leaf=True, yang_name="ase-status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='enumeration', is_config=False)""",
        })

    self.__ase_status = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ase_status(self):
    self.__ase_status = YANGDynClass(base=RestrictedClassType(base_type=str,                                     restriction_type="dict_key",                                     restriction_arg={'PRESENT': {}, 'NOT_PRESENT': {}},), is_leaf=True, yang_name="ase-status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://openconfig.net/yang/wavelength-router', defining_module='openconfig-wavelength-router', yang_type='enumeration', is_config=False)

  index = __builtin__.property(_get_index)
  name = __builtin__.property(_get_name)
  lower_frequency = __builtin__.property(_get_lower_frequency)
  upper_frequency = __builtin__.property(_get_upper_frequency)
  admin_status = __builtin__.property(_get_admin_status)
  super_channel = __builtin__.property(_get_super_channel)
  super_channel_parent = __builtin__.property(_get_super_channel_parent)
  ase_control_mode = __builtin__.property(_get_ase_control_mode)
  ase_injection_mode = __builtin__.property(_get_ase_injection_mode)
  ase_injection_threshold = __builtin__.property(_get_ase_injection_threshold)
  ase_injection_delta = __builtin__.property(_get_ase_injection_delta)
  media_channel_injection_offset = __builtin__.property(_get_media_channel_injection_offset)
  attenuation_control_mode = __builtin__.property(_get_attenuation_control_mode)
  attenuation_control_range = __builtin__.property(_get_attenuation_control_range)
  max_undershoot_compensation = __builtin__.property(_get_max_undershoot_compensation)
  max_overshoot_compensation = __builtin__.property(_get_max_overshoot_compensation)
  oper_status = __builtin__.property(_get_oper_status)
  ase_status = __builtin__.property(_get_ase_status)


  _pyangbind_elements = OrderedDict([('index', index), ('name', name), ('lower_frequency', lower_frequency), ('upper_frequency', upper_frequency), ('admin_status', admin_status), ('super_channel', super_channel), ('super_channel_parent', super_channel_parent), ('ase_control_mode', ase_control_mode), ('ase_injection_mode', ase_injection_mode), ('ase_injection_threshold', ase_injection_threshold), ('ase_injection_delta', ase_injection_delta), ('media_channel_injection_offset', media_channel_injection_offset), ('attenuation_control_mode', attenuation_control_mode), ('attenuation_control_range', attenuation_control_range), ('max_undershoot_compensation', max_undershoot_compensation), ('max_overshoot_compensation', max_overshoot_compensation), ('oper_status', oper_status), ('ase_status', ase_status), ])


