INSTALLATION
============

This file explains installation of CondConfigParser from source or from
a wheel package. For distribution packages (Debian, etc.), see
<https://frougon.net/projects/FFGo/> or README.rst.

Barring the use of binary packages (Debian or similar), the easiest and
cleanest method to install CondConfigParser is probably with pip,
possibly inside a virtual environment created with e.g. the Python
'venv' module. Typically, assuming you have a working pip setup (see
below), you just have to run one of the following commands:

  pip install CondConfigParser       (which normally installs from PyPI)

or

  pip install /path/to/CondConfigParser-X.Y.Z-py3-none-any.whl

or

  pip install /path/to/CondConfigParser-X.Y.Z.tar.gz

or

  pip install https://url/to/CondConfigParser-X.Y.Z-py3-none-any.whl

etc.

Notes:

  - very old versions of pip don't support https. If you have such an old
    version, I'd advise you to update it before going further;

  - upgrades can be done by passing '--upgrade' or '-U' to the
    'pip install' command (e.g., 'pip install --upgrade CondConfigParser');
    please refer to the pip documentation for details.

Uninstallation should be as easy as:

  pip uninstall CondConfigParser

For more information about installation of Python packages, pip, virtual
environments in Python, you can visit the following pages:

  Python official doc.  <https://docs.python.org/3/installing/index.html>
  pip                   <https://pip.pypa.io/>
  The venv module       <https://docs.python.org/3/library/venv.html>


So, what is a "working pip setup"?
----------------------------------

What I call a "working pip setup" here is a setup where a command that
is typically something like 'pip', 'pip3' or 'pip3.4' (for a Python 3.4
installation) can be run to safely install, upgrade and remove packages
into or from a particular Python installation.

Normally, a given 'pip' executable is tied to a particular Python
installation that can be discovered by running 'pip --version' (or
'pip3 --version', etc., depending on the particular 'pip' executable
name; for sanity's sake, we'll assume 'pip' in the rest of this
document). For instance, the following would indicate a PythonÂ 3.4
installation based at /some/path:

  % pip --version
  pip 1.5.6 from /some/path/lib/python3.4/site-packages (python 3.4)

In general, it is safe to run 'pip' from a Python interpreter you
installed yourself without a Linux package manager or similar. It is
also safe if the Python interpreter running 'pip' lives in a virtual
environment created with venv.py/pyvenv or virtualenv. The one case
where you should probably avoid using a given 'pip' executable is if it
runs directly under a system Python (typically, /usr/bin/python or
/usr/bin/pythonX.Y) installed with the package manager of your Linux
distribution (or any other OS, for that matter): in such a situation,
'pip' might, if run with superuser privileges, mess with files under the
control of the OS package manager (i.e., 'dpkg' on Debian and its
derivatives, 'rpm' on Redhat and Suse, etc.).

Depending on how you installed Python, you may need superuser privileges
to install, upgrade or remove Python packages inside that installation.
For instance, this will be the case if you compiled Python yourself and
performed the installation step ('make install') as root. However,
running 'pip' with superuser privileges should not be necessary nor
desirable inside a virtual environment created with venv.py/pyvenv or
virtualenv.


UNINSTALLATION
==============

If you installed CondConfigParser with pip, you can uninstall it with
the following command:

  pip uninstall CondConfigParser

(which should be run under the same account that was used to run the
"pip install" command).

If, on the other hand, you installed CondConfigParser with your OS
package manager, uninstallation should of course be performed by the
same OS package manager. :-)


# Local Variables:
# coding: utf-8
# fill-column: 72
# End:
