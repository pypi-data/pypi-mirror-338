[project]
name = "qoqo_qiskit"
version = "0.10.0"
license = { file = "LICENSE" }
authors = [
    { name = "HQS Quantum Simulation GmbH", email = "info@quantumsimulations.de" },
]
maintainers = [
    { name = "Matteo Lodi", email = "matteo.lodi@quantumsimulations.de" },
]
readme = "README.md"
requires-python = ">=3.9"
dependencies = [
    "qoqo>=1.19,<1.20",
    "qoqo_qasm>=0.12.1,<0.13",  # minimum version for Pyo3 0.21 support
    "qiskit>=1.0,<1.3",         # maximum version for transpilation support
    "qiskit_aer>=0.15",         # minimum version for Python 3.12 support
    "qiskit_ibm_runtime>=0.15",
    "numpy",
]

[project.optional-dependencies]
tests = [
    "coverage",
    "pytest",
    "pytest-cov",
]
dev = [
    "bandit",
    "black",
    "mypy",
    "ruff",
]
doc = [
    "sphinx",
    "sphinx_rtd_theme",
    "nbsphinx",
]

[build-system]
requires = ["setuptools", "setuptools-scm"]
build-backend = "setuptools.build_meta"

[tool.mypy]
ignore_missing_imports = true
pretty = true
follow_imports = "silent"

[tool.bandit]
# empty ?! ... I guess this implies "use bandit"

[tool.black]
line-length = 99
target-version = ["py39", "py310", "py311"]

[tool.coverage.run]
branch = true
omit = ["tests/*", "*test*.py", "*__version__.py"]
source = ["qoqo_qiskit"]

[tool.coverage.paths]
source = ["src", "**/site-packages"]

[tool.ruff]
line-length = 99  # same as black
target-version = "py39"
show-fixes = true
output-format = "full"
# activate the following checks
[tool.ruff.lint]
select = [
    "A",  # builtins
    "ANN",  # annotations
    "ARG",  # unused arguments
    "B",  # bugbear
    "C",  # comprehensions
    "C90",  # mccabe complexity
    "D",  # pydocstyle
    "E",  # pycodestyle
    "ERA",  # remove commented out code
    "F",  # pyflakes
    "ISC",  # implicit string concatenation
    "NPY",  # numpy
    "PL",  # pylint
    "RUF",  # ruff
    "S",  # bandit
    "TCH",  # type checking
    "W",  # Warnings
]
# ignore specific violations
ignore = [
    "D202",  # No blank lines allowed after function docstring
    "D203",  # 1 blank line required before class docstring
    "ANN002",
    "ANN003",
    "ANN101",
    "ANN102",
    "ANN401",
    "PLR",
    "S301",
    # "S403",  # not implemented in ruff (yet?!)
    # "S404",  # not implemented in ruff (yet?!)
]
# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = [
    "A", "B", "C", "D", "E", "F", "G", "I", "N", "Q", "S", "T", "W",
    "ANN", "ARG", "BLE", "COM", "DJ", "DTZ", "EM", "ERA", "EXE", "FBT",
    "ICN", "INP", "ISC", "NPY", "PD", "PGH", "PIE", "PL", "PT", "PTH", "PYI",
    "RET", "RSE", "RUF", "SIM", "SLF", "TCH", "TID", "TRY", "UP", "YTT"
]
unfixable = []
# exclude the following patterns from linting
exclude = [
    ".git",
    "__pycache__",
    "doc/conf.py",
    "old",
    "build",
    "dist",
    "test_*"
]

[tool.ruff.lint.mccabe]
max-complexity = 20  # 5 higher than sonarqube (... but sonarqube uses different measure anyways...)

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]

