# coding: utf-8

"""
    AI Decision Protocol

    AI Decision Protocol Specification

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List
from pydantic import BaseModel, Field, StrictStr, conlist, validator
from aitp.stubs.models.payment_plan import PaymentPlan

class Quote(BaseModel):
    """
    Quote
    """
    type: StrictStr = Field(...)
    quote_id: StrictStr = Field(...)
    payee_id: StrictStr = Field(...)
    payment_plans: conlist(PaymentPlan) = Field(...)
    valid_until: datetime = Field(...)
    additional_properties: Dict[str, Any] = {}
    __properties = ["type", "quote_id", "payee_id", "payment_plans", "valid_until"]

    @validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('Quote',):
            raise ValueError("must be one of enum values ('Quote')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Quote:
        """Create an instance of Quote from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in payment_plans (list)
        _items = []
        if self.payment_plans:
            for _item in self.payment_plans:
                if _item:
                    _items.append(_item.to_dict())
            _dict['payment_plans'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Quote:
        """Create an instance of Quote from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Quote.parse_obj(obj)

        _obj = Quote.parse_obj({
            "type": obj.get("type"),
            "quote_id": obj.get("quote_id"),
            "payee_id": obj.get("payee_id"),
            "payment_plans": [PaymentPlan.from_dict(_item) for _item in obj.get("payment_plans")] if obj.get("payment_plans") is not None else None,
            "valid_until": obj.get("valid_until")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


