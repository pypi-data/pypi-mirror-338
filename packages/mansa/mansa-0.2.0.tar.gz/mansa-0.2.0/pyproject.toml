[project]
name = "mansa"
version = "0.2.0"
description = "Making your CCoE happy"
authors = [
    {name = "Edgar Bahilo", email = "edgar.bahilo@b2-impact.com"}
]
license = {text = "MIT"}
readme = "README.md"
requires-python = ">=3.9"
keywords = ["linter", "python", "ast"]
classifiers = [
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python",
    "License :: OSI Approved :: MIT License",
    "Development Status :: 2 - Pre-Alpha",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: Unix",
    "Topic :: Software Development",
    "Topic :: Scientific/Engineering",
]
dependencies = [
    "toml>=0.10.2",
    "rich>=13.7.1",
]

[project.urls]
Homepage = "https://github.com/b2impact/mansa/tree/main"
Repository = "https://github.com/b2impact/mansa/tree/main"

[project.scripts]
mansa = "mansa.linter:main"

[project.optional-dependencies]
dev = [
    "pytest>=8.3.2",
    "ruff>=0.5.7",
    "pytest-cov>=5.0.0",
]

[tool.coverage.run]
omit = ['__init__.py', "logger.py"]

[tool.coverage.report]
fail_under = 55
skip_empty = true

[tool.ruff]
# Assume Python 3.10
target-version = "py310"

# Same as Black.
line-length = 120
indent-width = 4
output-format = "azure"

[tool.ruff.lint]

exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "*.ipynb",
    "venv"]

# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = [
    "E",  # pycodestyle errors (settings from FastAPI, thanks, @tiangolo!)
    "D",  # pydocstyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "C",  # flake8-comprehensions
    "B",  # flake8-bugbear
    "N",  # PEP8 naming
    "S",  # Bandit
    "PL", # Pylint
]
ignore = []

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.pydocstyle]
# Use numpy docstrings
convention = "numpy"

[tool.ruff.lint.isort]
order-by-type = true
relative-imports-order = "closest-to-furthest"
extra-standard-library = ["typing"]
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]
known-first-party = []

[tool.ruff.lint.per-file-ignores]
# Ignore `E402` (import violations) in all `__init__.py` files, and in `path/to/file.py`.
"__init__.py" = ["E402"]
"path/to/file.py" = ["E402"]
"tests/*" = ["S101", "D100", "D103"]

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"
# Like Black, indent with spaces, rather than tabs.
indent-style = "space"
# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false
# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"
docstring-code-format = true
docstring-code-line-length = 100
