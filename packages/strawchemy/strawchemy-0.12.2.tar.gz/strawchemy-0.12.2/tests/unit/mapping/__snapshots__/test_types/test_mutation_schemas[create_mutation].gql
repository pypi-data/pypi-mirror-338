# serializer version: 1
# name: test_mutation_schemas[create_mutation]
  '''
  """Date (isoformat)"""
  scalar Date
  
  """Date with time (isoformat)"""
  scalar DateTime
  
  """Decimal (fixed-point)"""
  scalar Decimal
  
  """GraphQL input type"""
  input GroupInput {
    id: UUID!
    name: String!
    tagId: UUID = null
    tag: GroupTagIdFieldsInputGroupTagInputToOneInput = null
    users: GroupUsersIdFieldsInputGroupUserInputToManyCreateInput
  }
  
  """Identifier input"""
  input GroupTagIdFieldsInput {
    id: UUID!
  }
  
  input GroupTagIdFieldsInputGroupTagInputToOneInput {
    set: GroupTagIdFieldsInput
    create: GroupTagInput
  }
  
  """GraphQL input type"""
  input GroupTagInput {
    id: UUID!
    name: String!
  }
  
  """GraphQL type"""
  type GroupType {
    id: UUID!
    name: String!
    tagId: UUID
    tag: TagType!
    usersAggregate: UserAggregate!
  
    """Fetch objects from the UserType collection"""
    users: [UserType!]!
  }
  
  """GraphQL input type"""
  input GroupUserInput {
    id: UUID!
    name: String!
    groupId: UUID = null
    tagId: UUID = null
    tag: GroupTagIdFieldsInputGroupTagInputToOneInput = null
  }
  
  """Identifier input"""
  input GroupUsersIdFieldsInput {
    id: UUID!
  }
  
  input GroupUsersIdFieldsInputGroupUserInputToManyCreateInput {
    set: [GroupUsersIdFieldsInput!]
    add: [GroupUsersIdFieldsInput!]
    create: [GroupUserInput!]
  }
  
  """
  The `Interval` scalar type represents a duration of time as specified by [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601#Durations).
  """
  scalar Interval @specifiedBy(url: "https://en.wikipedia.org/wiki/ISO_8601#Durations")
  
  """
  The `JSON` scalar type represents JSON values as specified by [ECMA-404](https://ecma-international.org/wp-content/uploads/ECMA-404_2nd_edition_december_2017.pdf).
  """
  scalar JSON @specifiedBy(url: "https://ecma-international.org/wp-content/uploads/ECMA-404_2nd_edition_december_2017.pdf")
  
  type Mutation {
    """Fetch object from the SQLDataTypesType collection by id"""
    createDataType(data: SQLDataTypesCreate!): SQLDataTypesType!
  
    """Fetch objects from the SQLDataTypesType collection"""
    createDataTypes(data: [SQLDataTypesCreate!]!): [SQLDataTypesType!]!
  
    """Fetch object from the GroupType collection by id"""
    createGroup(data: GroupInput!): GroupType!
  
    """Fetch objects from the GroupType collection"""
    createGroups(data: [GroupInput!]!): [GroupType!]!
  }
  
  type Query {
    hello: String!
  }
  
  """GraphQL input type"""
  input SQLDataTypesCreate {
    id: UUID!
    dateCol: Date!
    timeCol: Time!
    timeDeltaCol: Interval!
    datetimeCol: DateTime!
    strCol: String!
    intCol: Int!
    floatCol: Float!
    decimalCol: Decimal!
    boolCol: Boolean!
    uuidCol: UUID!
    dictCol: JSON!
    arrayStrCol: [String!]!
  }
  
  """GraphQL type"""
  type SQLDataTypesType {
    id: UUID!
    dateCol: Date!
    timeCol: Time!
    timeDeltaCol: Interval!
    datetimeCol: DateTime!
    strCol: String!
    intCol: Int!
    floatCol: Float!
    decimalCol: Decimal!
    boolCol: Boolean!
    uuidCol: UUID!
    dictCol: JSON!
    arrayStrCol: [String!]!
  }
  
  """GraphQL type"""
  type TagType {
    id: UUID!
    name: String!
  }
  
  """Time (isoformat)"""
  scalar Time
  
  scalar UUID
  
  """Aggregation fields"""
  type UserAggregate {
    count: Int
    sum: UserSumFields!
    min: UserMinMaxFields!
    max: UserMinMaxFields!
  }
  
  type UserMinMaxFields {
    name: String
  }
  
  type UserSumFields {
    name: String
  }
  
  """GraphQL type"""
  type UserType {
    id: UUID!
    name: String!
    groupId: UUID
    group: GroupType!
    tagId: UUID
    tag: TagType!
  }
  '''
# ---
