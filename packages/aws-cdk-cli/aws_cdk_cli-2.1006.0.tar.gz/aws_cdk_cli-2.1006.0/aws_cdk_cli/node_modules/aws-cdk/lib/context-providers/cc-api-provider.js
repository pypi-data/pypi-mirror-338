"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CcApiContextProviderPlugin = void 0;
const client_cloudcontrol_1 = require("@aws-sdk/client-cloudcontrol");
const api_1 = require("../../../@aws-cdk/tmp-toolkit-helpers/src/api");
const sdk_provider_1 = require("../api/aws-auth/sdk-provider");
const util_1 = require("../util");
class CcApiContextProviderPlugin {
    constructor(aws) {
        this.aws = aws;
    }
    /**
     * This returns a data object with the value from CloudControl API result.
     *
     * See the documentation in the Cloud Assembly Schema for the semantics of
     * each query parameter.
     */
    async getValue(args) {
        // Validate input
        if (args.exactIdentifier && args.propertyMatch) {
            throw new api_1.ContextProviderError(`Provider protocol error: specify either exactIdentifier or propertyMatch, but not both (got ${JSON.stringify(args)})`);
        }
        if (args.ignoreErrorOnMissingContext && args.dummyValue === undefined) {
            throw new api_1.ContextProviderError(`Provider protocol error: if ignoreErrorOnMissingContext is set, a dummyValue must be supplied (got ${JSON.stringify(args)})`);
        }
        if (args.dummyValue !== undefined && (!Array.isArray(args.dummyValue) || !args.dummyValue.every(isObject))) {
            throw new api_1.ContextProviderError(`Provider protocol error: dummyValue must be an array of objects (got ${JSON.stringify(args.dummyValue)})`);
        }
        // Do the lookup
        const cloudControl = (await (0, sdk_provider_1.initContextProviderSdk)(this.aws, args)).cloudControl();
        try {
            let resources;
            if (args.exactIdentifier) {
                // use getResource to get the exact indentifier
                resources = await this.getResource(cloudControl, args.typeName, args.exactIdentifier);
            }
            else if (args.propertyMatch) {
                // use listResource
                resources = await this.listResources(cloudControl, args.typeName, args.propertyMatch);
            }
            else {
                throw new api_1.ContextProviderError(`Provider protocol error: neither exactIdentifier nor propertyMatch is specified in ${JSON.stringify(args)}.`);
            }
            return resources.map((r) => (0, util_1.getResultObj)(r.properties, r.identifier, args.propertiesToReturn));
        }
        catch (err) {
            if (err instanceof ZeroResourcesFoundError && args.ignoreErrorOnMissingContext) {
                // We've already type-checked dummyValue.
                return args.dummyValue;
            }
            throw err;
        }
    }
    /**
     * Calls getResource from CC API to get the resource.
     * See https://docs.aws.amazon.com/cli/latest/reference/cloudcontrol/get-resource.html
     *
     * Will always return exactly one resource, or fail.
     */
    async getResource(cc, typeName, exactIdentifier) {
        try {
            const result = await cc.getResource({
                TypeName: typeName,
                Identifier: exactIdentifier,
            });
            if (!result.ResourceDescription) {
                throw new api_1.ContextProviderError('Unexpected CloudControl API behavior: returned empty response');
            }
            return [foundResourceFromCcApi(result.ResourceDescription)];
        }
        catch (err) {
            if (err instanceof client_cloudcontrol_1.ResourceNotFoundException || err.name === 'ResourceNotFoundException') {
                throw new ZeroResourcesFoundError(`No resource of type ${typeName} with identifier: ${exactIdentifier}`);
            }
            if (!(err instanceof api_1.ContextProviderError)) {
                throw new api_1.ContextProviderError(`Encountered CC API error while getting ${typeName} resource ${exactIdentifier}: ${err.message}`);
            }
            throw err;
        }
    }
    /**
     * Calls listResources from CC API to get the resources and apply args.propertyMatch to find the resources.
     * See https://docs.aws.amazon.com/cli/latest/reference/cloudcontrol/list-resources.html
     *
     * Will return 0 or more resources.
     *
     * Does not currently paginate through more than one result page.
     */
    async listResources(cc, typeName, propertyMatch) {
        try {
            const result = await cc.listResources({
                TypeName: typeName,
            });
            const found = (result.ResourceDescriptions ?? [])
                .map(foundResourceFromCcApi)
                .filter((r) => {
                return Object.entries(propertyMatch).every(([propPath, expected]) => {
                    const actual = (0, util_1.findJsonValue)(r.properties, propPath);
                    return propertyMatchesFilter(actual, expected);
                });
            });
            return found;
        }
        catch (err) {
            if (!(err instanceof api_1.ContextProviderError) && !(err instanceof ZeroResourcesFoundError)) {
                throw new api_1.ContextProviderError(`Encountered CC API error while listing ${typeName} resources matching ${JSON.stringify(propertyMatch)}: ${err.message}`);
            }
            throw err;
        }
    }
}
exports.CcApiContextProviderPlugin = CcApiContextProviderPlugin;
/**
 * Convert a CC API response object into a nicer object (parse the JSON)
 */
function foundResourceFromCcApi(desc) {
    return {
        identifier: desc.Identifier ?? '*MISSING*',
        properties: JSON.parse(desc.Properties ?? '{}'),
    };
}
/**
 * Whether the given property value matches the given filter
 *
 * For now we just check for strict equality, but we can implement pattern matching and fuzzy matching here later
 */
function propertyMatchesFilter(actual, expected) {
    return expected === actual;
}
function isObject(x) {
    return typeof x === 'object' && x !== null && !Array.isArray(x);
}
/**
 * A specific lookup failure indicating 0 resources found that can be recovered
 */
class ZeroResourcesFoundError extends Error {
}
//# sourceMappingURL=data:application/json;base64,