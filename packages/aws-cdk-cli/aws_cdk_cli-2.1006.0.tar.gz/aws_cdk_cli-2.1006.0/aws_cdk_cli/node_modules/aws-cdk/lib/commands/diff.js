"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RequireApproval = void 0;
exports.formatStackDiff = formatStackDiff;
exports.formatSecurityDiff = formatSecurityDiff;
const stream_1 = require("stream");
const util_1 = require("util");
const cxschema = require("@aws-cdk/cloud-assembly-schema");
const cloudformation_diff_1 = require("@aws-cdk/cloudformation-diff");
const chalk = require("chalk");
const api_1 = require("../../../@aws-cdk/tmp-toolkit-helpers/src/api");
const logging_1 = require("../logging");
/*
 * Custom writable stream that collects text into a string buffer.
 * Used on classes that take in and directly write to a stream, but
 * we intend to capture the output rather than print.
 */
class StringWriteStream extends stream_1.Writable {
    constructor() {
        super();
        this.buffer = [];
    }
    _write(chunk, _encoding, callback) {
        this.buffer.push(chunk.toString());
        callback();
    }
    toString() {
        return this.buffer.join('');
    }
}
/**
 * Formats the differences between two template states and returns it as a string.
 *
 * @param oldTemplate the old/current state of the stack.
 * @param newTemplate the new/target state of the stack.
 * @param strict      do not filter out AWS::CDK::Metadata or Rules
 * @param context     lines of context to use in arbitrary JSON diff
 * @param quiet       silences \'There were no differences\' messages
 *
 * @returns the formatted diff, and the number of stacks in this stack tree that have differences, including the top-level root stack
 */
function formatStackDiff(oldTemplate, newTemplate, strict, context, quiet, stackName, changeSet, isImport, nestedStackTemplates) {
    let diff = (0, cloudformation_diff_1.fullDiff)(oldTemplate, newTemplate.template, changeSet, isImport);
    // The stack diff is formatted via `Formatter`, which takes in a stream
    // and sends its output directly to that stream. To faciliate use of the
    // global CliIoHost, we create our own stream to capture the output of
    // `Formatter` and return the output as a string for the consumer of
    // `formatStackDiff` to decide what to do with it.
    const stream = new StringWriteStream();
    let numStacksWithChanges = 0;
    let formattedDiff = '';
    let filteredChangesCount = 0;
    try {
        // must output the stack name if there are differences, even if quiet
        if (stackName && (!quiet || !diff.isEmpty)) {
            stream.write((0, util_1.format)('Stack %s\n', chalk.bold(stackName)));
        }
        if (!quiet && isImport) {
            stream.write('Parameters and rules created during migration do not affect resource configuration.\n');
        }
        // detect and filter out mangled characters from the diff
        if (diff.differenceCount && !strict) {
            const mangledNewTemplate = JSON.parse((0, cloudformation_diff_1.mangleLikeCloudFormation)(JSON.stringify(newTemplate.template)));
            const mangledDiff = (0, cloudformation_diff_1.fullDiff)(oldTemplate, mangledNewTemplate, changeSet);
            filteredChangesCount = Math.max(0, diff.differenceCount - mangledDiff.differenceCount);
            if (filteredChangesCount > 0) {
                diff = mangledDiff;
            }
        }
        // filter out 'AWS::CDK::Metadata' resources from the template
        // filter out 'CheckBootstrapVersion' rules from the template
        if (!strict) {
            obscureDiff(diff);
        }
        if (!diff.isEmpty) {
            numStacksWithChanges++;
            // formatDifferences updates the stream with the formatted stack diff
            (0, cloudformation_diff_1.formatDifferences)(stream, diff, {
                ...logicalIdMapFromTemplate(oldTemplate),
                ...buildLogicalToPathMap(newTemplate),
            }, context);
            // store the stream containing a formatted stack diff
            formattedDiff = stream.toString();
        }
        else if (!quiet) {
            (0, logging_1.info)(chalk.green('There were no differences'));
        }
    }
    finally {
        stream.end();
    }
    if (filteredChangesCount > 0) {
        (0, logging_1.info)(chalk.yellow(`Omitted ${filteredChangesCount} changes because they are likely mangled non-ASCII characters. Use --strict to print them.`));
    }
    for (const nestedStackLogicalId of Object.keys(nestedStackTemplates ?? {})) {
        if (!nestedStackTemplates) {
            break;
        }
        const nestedStack = nestedStackTemplates[nestedStackLogicalId];
        newTemplate._template = nestedStack.generatedTemplate;
        const nextDiff = formatStackDiff(nestedStack.deployedTemplate, newTemplate, strict, context, quiet, nestedStack.physicalName ?? nestedStackLogicalId, undefined, isImport, nestedStack.nestedStackTemplates);
        numStacksWithChanges += nextDiff.numStacksWithChanges;
        formattedDiff += nextDiff.formattedDiff;
    }
    return {
        numStacksWithChanges,
        formattedDiff,
    };
}
var RequireApproval;
(function (RequireApproval) {
    RequireApproval["Never"] = "never";
    RequireApproval["AnyChange"] = "any-change";
    RequireApproval["Broadening"] = "broadening";
})(RequireApproval || (exports.RequireApproval = RequireApproval = {}));
/**
 * Formats the security changes of this diff, if the change is impactful enough according to the approval level
 *
 * Returns the diff if the changes are prompt-worthy, an empty object otherwise.
 */
function formatSecurityDiff(oldTemplate, newTemplate, requireApproval, stackName, changeSet) {
    const diff = (0, cloudformation_diff_1.fullDiff)(oldTemplate, newTemplate.template, changeSet);
    if (diffRequiresApproval(diff, requireApproval)) {
        (0, logging_1.info)((0, util_1.format)('Stack %s\n', chalk.bold(stackName)));
        // eslint-disable-next-line max-len
        (0, logging_1.warning)(`This deployment will make potentially sensitive changes according to your current security approval level (--require-approval ${requireApproval}).`);
        (0, logging_1.warning)('Please confirm you intend to make the following modifications:\n');
        // The security diff is formatted via `Formatter`, which takes in a stream
        // and sends its output directly to that stream. To faciliate use of the
        // global CliIoHost, we create our own stream to capture the output of
        // `Formatter` and return the output as a string for the consumer of
        // `formatSecurityDiff` to decide what to do with it.
        const stream = new StringWriteStream();
        try {
            // formatSecurityChanges updates the stream with the formatted security diff
            (0, cloudformation_diff_1.formatSecurityChanges)(stream, diff, buildLogicalToPathMap(newTemplate));
        }
        finally {
            stream.end();
        }
        // store the stream containing a formatted stack diff
        const formattedDiff = stream.toString();
        return { formattedDiff };
    }
    return {};
}
/**
 * Return whether the diff has security-impacting changes that need confirmation
 *
 * TODO: Filter the security impact determination based off of an enum that allows
 * us to pick minimum "severities" to alert on.
 */
function diffRequiresApproval(diff, requireApproval) {
    switch (requireApproval) {
        case RequireApproval.Never: return false;
        case RequireApproval.AnyChange: return diff.permissionsAnyChanges;
        case RequireApproval.Broadening: return diff.permissionsBroadened;
        default: throw new api_1.ToolkitError(`Unrecognized approval level: ${requireApproval}`);
    }
}
function buildLogicalToPathMap(stack) {
    const map = {};
    for (const md of stack.findMetadataByType(cxschema.ArtifactMetadataEntryType.LOGICAL_ID)) {
        map[md.data] = md.path;
    }
    return map;
}
function logicalIdMapFromTemplate(template) {
    const ret = {};
    for (const [logicalId, resource] of Object.entries(template.Resources ?? {})) {
        const path = resource?.Metadata?.['aws:cdk:path'];
        if (path) {
            ret[logicalId] = path;
        }
    }
    return ret;
}
/**
 * Remove any template elements that we don't want to show users.
 * This is currently:
 * - AWS::CDK::Metadata resource
 * - CheckBootstrapVersion Rule
 */
function obscureDiff(diff) {
    if (diff.unknown) {
        // see https://github.com/aws/aws-cdk/issues/17942
        diff.unknown = diff.unknown.filter(change => {
            if (!change) {
                return true;
            }
            if (change.newValue?.CheckBootstrapVersion) {
                return false;
            }
            if (change.oldValue?.CheckBootstrapVersion) {
                return false;
            }
            return true;
        });
    }
    if (diff.resources) {
        diff.resources = diff.resources.filter(change => {
            if (!change) {
                return true;
            }
            if (change.newResourceType === 'AWS::CDK::Metadata') {
                return false;
            }
            if (change.oldResourceType === 'AWS::CDK::Metadata') {
                return false;
            }
            return true;
        });
    }
}
//# sourceMappingURL=data:application/json;base64,