"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadCurrentTemplateWithNestedStacks = loadCurrentTemplateWithNestedStacks;
exports.loadCurrentTemplate = loadCurrentTemplate;
const path = require("path");
const fs = require("fs-extra");
const util_1 = require("../../util");
const evaluate_cloudformation_template_1 = require("./evaluate-cloudformation-template");
const stack_helpers_1 = require("./stack-helpers");
/**
 * Reads the currently deployed template and all of its nested stack templates from CloudFormation.
 */
async function loadCurrentTemplateWithNestedStacks(rootStackArtifact, sdk, retrieveProcessedTemplate = false) {
    const deployedRootTemplate = await loadCurrentTemplate(rootStackArtifact, sdk, retrieveProcessedTemplate);
    const nestedStacks = await loadNestedStacks(rootStackArtifact, sdk, {
        generatedTemplate: rootStackArtifact.template,
        deployedTemplate: deployedRootTemplate,
        deployedStackName: rootStackArtifact.stackName,
    });
    return {
        deployedRootTemplate,
        nestedStacks,
    };
}
/**
 * Returns the currently deployed template from CloudFormation that corresponds to `stackArtifact`.
 */
async function loadCurrentTemplate(stackArtifact, sdk, retrieveProcessedTemplate = false) {
    return loadCurrentStackTemplate(stackArtifact.stackName, sdk, retrieveProcessedTemplate);
}
async function loadCurrentStackTemplate(stackName, sdk, retrieveProcessedTemplate = false) {
    const cfn = sdk.cloudFormation();
    const stack = await stack_helpers_1.CloudFormationStack.lookup(cfn, stackName, retrieveProcessedTemplate);
    return stack.template();
}
async function loadNestedStacks(rootStackArtifact, sdk, parentTemplates) {
    const listStackResources = parentTemplates.deployedStackName
        ? new evaluate_cloudformation_template_1.LazyListStackResources(sdk, parentTemplates.deployedStackName)
        : undefined;
    const nestedStacks = {};
    for (const [nestedStackLogicalId, generatedNestedStackResource] of Object.entries(parentTemplates.generatedTemplate.Resources ?? {})) {
        if (!isCdkManagedNestedStack(generatedNestedStackResource)) {
            continue;
        }
        const assetPath = generatedNestedStackResource.Metadata['aws:asset:path'];
        const nestedStackTemplates = await getNestedStackTemplates(rootStackArtifact, assetPath, nestedStackLogicalId, listStackResources, sdk);
        nestedStacks[nestedStackLogicalId] = {
            deployedTemplate: nestedStackTemplates.deployedTemplate,
            generatedTemplate: nestedStackTemplates.generatedTemplate,
            physicalName: nestedStackTemplates.deployedStackName,
            nestedStackTemplates: await loadNestedStacks(rootStackArtifact, sdk, nestedStackTemplates),
        };
    }
    return nestedStacks;
}
async function getNestedStackTemplates(rootStackArtifact, nestedTemplateAssetPath, nestedStackLogicalId, listStackResources, sdk) {
    const nestedTemplatePath = path.join(rootStackArtifact.assembly.directory, nestedTemplateAssetPath);
    // CFN generates the nested stack name in the form `ParentStackName-NestedStackLogicalID-SomeHashWeCan'tCompute,
    // the arn is of the form: arn:aws:cloudformation:region:123456789012:stack/NestedStackName/AnotherHashWeDon'tNeed
    // so we get the ARN and manually extract the name.
    const nestedStackArn = await getNestedStackArn(nestedStackLogicalId, listStackResources);
    const deployedStackName = nestedStackArn?.slice(nestedStackArn.indexOf('/') + 1, nestedStackArn.lastIndexOf('/'));
    return {
        generatedTemplate: JSON.parse(fs.readFileSync(nestedTemplatePath, 'utf-8')),
        deployedTemplate: deployedStackName ? await loadCurrentStackTemplate(deployedStackName, sdk) : {},
        deployedStackName,
    };
}
async function getNestedStackArn(nestedStackLogicalId, listStackResources) {
    try {
        const stackResources = await listStackResources?.listStackResources();
        return stackResources?.find((sr) => sr.LogicalResourceId === nestedStackLogicalId)?.PhysicalResourceId;
    }
    catch (e) {
        if ((0, util_1.formatErrorMessage)(e).startsWith('Stack with id ') && (0, util_1.formatErrorMessage)(e).endsWith(' does not exist')) {
            return;
        }
        throw e;
    }
}
function isCdkManagedNestedStack(stackResource) {
    return (stackResource.Type === 'AWS::CloudFormation::Stack' &&
        stackResource.Metadata &&
        stackResource.Metadata['aws:asset:path']);
}
//# sourceMappingURL=data:application/json;base64,