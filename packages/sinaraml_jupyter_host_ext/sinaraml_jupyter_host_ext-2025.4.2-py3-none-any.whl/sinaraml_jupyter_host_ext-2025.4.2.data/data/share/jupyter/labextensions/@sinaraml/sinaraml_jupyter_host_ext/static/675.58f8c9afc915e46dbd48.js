"use strict";(self.webpackChunk_sinaraml_sinaraml_jupyter_host_ext=self.webpackChunk_sinaraml_sinaraml_jupyter_host_ext||[]).push([[675],{675:(e,t,r)=>{r.r(t),r.d(t,{default:()=>s});var n=r(141),a=r(979),o=r(916);const s={id:"@sinaraml/sinaraml_jupyter_host_ext:plugin",description:"A minimal JupyterLab extension with backend and frontend parts.",autoStart:!0,optional:[n.ILauncher],requires:[],activate:(e,t)=>{console.log("JupyterLab extension @sinaraml/sinaraml_jupyter_host_ext is activated!");const r={server_url:o.ServerConnection.makeSettings().baseUrl};(async function(e="",t={}){const r=o.ServerConnection.makeSettings(),n=a.URLExt.join(r.baseUrl,"sinaraml-jupyter-host-ext",e);let s;try{s=await o.ServerConnection.makeRequest(n,t,r)}catch(e){throw new o.ServerConnection.NetworkError(e)}let i=await s.text();if(i.length>0)try{i=JSON.parse(i)}catch(e){console.log("Not a JSON response body.",s)}if(!s.ok)throw new o.ServerConnection.ResponseError(s,i.message||i);return i})("set_server_url",{body:JSON.stringify(r),method:"POST"}).then((e=>{console.log(e)})).catch((e=>{console.error(`Error on POST /sinaraml-jupyter-host-ext/set_server_url ${r}.\n${e}`)}))}}}}]);