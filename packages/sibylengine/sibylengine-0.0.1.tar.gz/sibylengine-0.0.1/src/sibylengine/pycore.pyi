from typing import List, Tuple

class PyCapsule: ...

def ptr_from_address(addr:int) -> PyCapsule: ...

class Int32:
    def __int__(self) -> int: ...
    def __init__(self, value:int) -> None: ...
    def get(self) -> int: ...
    def set(self, value:int) -> None: ...

class Float32:
    def __int__(self) -> float: ...
    def __init__(self, value:float) -> None: ...
    def get(self) -> float: ...
    def set(self, value:float) -> None: ...

class Bool:
    def __int__(self) -> bool: ...
    def __init__(self, value:bool) -> None: ...
    def get(self) -> bool: ...
    def set(self, value:bool) -> None: ...
    
class WindowOption:
    def __init__(self, vendor:int, title:str, width:int, height:int, property:int) -> None: ...

class input:
    ...

class timer:
    ...

class ivec2:
    def __init__(self, x:int, y:int) -> None: ...
    ...

class ivec3:
    def __init__(self, x:int, y:int, z:int) -> None: ...
    ...

class ivec4:
    def __init__(self, x:int, y:int, z:int, w:int) -> None: ...
    ...

class vec2:
    def __init__(self, x:float, y:float) -> None: ...
    ...
class vec3:
    def __init__(self, x:float, y:float, z:float) -> None: ...
    ...

class vec4:
    def __init__(self, x:float, y:float, z:float, w:float) -> None: ...
    ...

class point3:
    def __init__(self, x:float, y:float, z:float) -> None: ...
    def __init__(self, xyz:vec3) -> None: ...
    ...

class bounds3:
    def __init__(self, pt:point3) -> None: ...
    def __init__(self, min:point3, max:point3) -> None: ...
    ...

class window:
    @staticmethod
    def create(options:object) -> object: ...
    def fetchEvents(self) -> None: ...
    def endFrame(self) -> None: ...
    def isRunning(self) -> bool: ...
    def destroy(self) -> None: ...  
    def getInput(self) -> input: ...

    class EnumVendor:
        GLFW = 0
        WIN_64 = 1
    class EnumProperty:
        VulkanContext = 1
        OpenGLContext = 2
    ...

class rhi:
    class EnumContextExtension:
        NONE = 0 << 0
        DEBUG_UTILS = 1 << 0
        MESH_SHADER = 1 << 1
        FRAGMENT_BARYCENTRIC = 1 << 2
        SAMPLER_FILTER_MIN_MAX = 1 << 3
        RAY_TRACING = 1 << 4
        SHADER_NON_SEMANTIC_INFO = 1 << 5
        BINDLESS_INDEXING = 1 << 6
        ATOMIC_FLOAT = 1 << 7
        CONSERVATIVE_RASTERIZATION = 1 << 8
        COOPERATIVE_MATRIX = 1 << 9
        CUDA_INTEROPERABILITY = 1 << 10
        USE_AFTERMATH = 1 << 11

    class EnumShaderStage:
        VERTEX = 1 << 0
        FRAGMENT = 1 << 1
        COMPUTE = 1 << 2
        GEOMETRY = 1 << 3
        RAYGEN = 1 << 4
        MISS = 1 << 5
        CLOSEST_HIT = 1 << 6
        INTERSECTION = 1 << 7
        ANY_HIT = 1 << 8
        CALLABLE = 1 << 9
        TASK = 1 << 10
        MESH = 1 << 11

    class EnumDataType:
        Float16 = 0
        Float32 = 1
        Float64 = 2
        UINT8 = 3
        INT8 = 4
        INT16 = 5
        INT32 = 6
        INT64 = 7

    class TextureUsageBit:
        COPY_SRC = 1 << 0
        COPY_DST = 1 << 1
        TEXTURE_BINDING = 1 << 2
        STORAGE_BINDING = 1 << 3
        COLOR_ATTACHMENT = 1 << 4
        DEPTH_ATTACHMENT = 1 << 5
        TRANSIENT_ATTACHMENT = 1 << 6
        INPUT_ATTACHMENT = 1 << 7

    class BlendOperation:
        ADD = 1 << 0
        SUBTRACT = 1 << 1
        REVERSE_SUBTRACT = 1 << 2
        MIN = 1 << 3
        MAX = 1 << 4
    
    class BlendFactor:
        ZERO = 1 << 0
        ONE = 1 << 1
        SRC = 1 << 2
        ONE_MINUS_SRC = 1 << 3
        SRC_ALPHA = 1 << 4
        ONE_MINUS_SRC_ALPHA = 1 << 5
        DST = 1 << 6
        ONE_MINUS_DST = 1 << 7
        DST_ALPHA = 1 << 8
        ONE_MINUS_DST_ALPHA = 1 << 9
        SRC_ALPHA_SATURATED = 1 << 10
        CONSTANT = 1 << 11
        ONE_MINUS_CONSTANT = 1 << 12
    
    class EnumBufferUsage:
        MAP_READ = 1 << 0
        MAP_WRITE = 1 << 1
        COPY_SRC = 1 << 2
        COPY_DST = 1 << 3
        INDEX = 1 << 4
        VERTEX = 1 << 5
        UNIFORM = 1 << 6
        STORAGE = 1 << 7
        INDIRECT = 1 << 8
        QUERY_RESOLVE = 1 << 9
        SHADER_DEVICE_ADDRESS = 1 << 10
        ACCELERATION_STRUCTURE_STORAGE = 1 << 11
        ACCELERATION_STRUCTURE_BUILD_INPUT_READ_ONLY = 1 << 12
        SHADER_BINDING_TABLE = 1 << 13
        CUDA_ACCESS = 1 << 14

    
    class TextureFormat:
        # Unknown
        UNKOWN   = 0
        # 8-bit formats
        R8_UNORM = 1
        R8_SNORM = 2
        R8_UINT  = 3
        R8_SINT  = 4
        # 16-bit formats
        R16_UINT = 5
        R16_SINT = 6
        R16_FLOAT = 7
        RG8_UNORM = 8
        RG8_SNORM = 9
        RG8_UINT = 10
        RG8_SINT = 11
        # 32-bit formats
        R32_UINT = 12
        R32_SINT = 13
        R32_FLOAT = 14
        RG16_UINT = 15
        RG16_SINT = 16
        RG16_FLOAT = 17
        RGBA8_UNORM = 18
        RGBA8_UNORM_SRGB = 19
        RGBA8_SNORM = 20
        RGBA8_UINT = 21
        RGBA8_SINT = 22
        BGRA8_UNORM = 23
        BGRA8_UNORM_SRGB = 24
        # Packed 32-bit formats
        RGB9E5_UFLOAT = 25
        RG11B10_UFLOAT = 26
        # 64-bit formats
        RG32_UINT = 27
        RG32_SINT = 28
        RG32_FLOAT = 29
        RGBA16_UINT = 30
        RGBA16_SINT = 31
        RGBA16_FLOAT = 32
        # 128-bit formats
        RGBA32_UINT = 33
        RGBA32_SINT = 34
        RGBA32_FLOAT = 35
        # Depth/stencil formats
        STENCIL8 = 36
        DEPTH16_UNORM = 37
        DEPTH24 = 38
        DEPTH24STENCIL8 = 39
        DEPTH32_FLOAT = 40
        # Compressed formats
        COMPRESSION = 41
        RGB10A2_UNORM = 42
        DEPTH32STENCIL8 = 43
        BC1_RGB_UNORM_BLOCK = 44
        BC1_RGB_SRGB_BLOCK = 45
        BC1_RGBA_UNORM_BLOCK = 46
        BC1_RGBA_SRGB_BLOCK = 47
        BC2_UNORM_BLOCK = 48
        BC2_SRGB_BLOCK = 49
        BC3_UNORM_BLOCK = 50
        BC3_SRGB_BLOCK  = 51
        BC4_UNORM_BLOCK = 52
        BC4_SNORM_BLOCK = 53
        BC5_UNORM_BLOCK = 54
        BC5_SNORM_BLOCK = 55
        BC6H_UFLOAT_BLOCK = 56
        BC6H_SFLOAT_BLOCK = 57
        BC7_UNORM_BLOCK = 58
        BC7_SRGB_BLOCK = 59
    
    class AccessFlagBits:
        INDIRECT_COMMAND_READ_BIT = ...
        INDEX_READ_BIT = ...
        VERTEX_ATTRIBUTE_READ_BIT = ...
        UNIFORM_READ_BIT = ...
        INPUT_ATTACHMENT_READ_BIT = ...
        SHADER_READ_BIT = ...
        SHADER_WRITE_BIT = ...
        COLOR_ATTACHMENT_READ_BIT = ...
        COLOR_ATTACHMENT_WRITE_BIT = ...
        DEPTH_STENCIL_ATTACHMENT_READ_BIT = ...
        DEPTH_STENCIL_ATTACHMENT_WRITE_BIT = ...
        TRANSFER_READ_BIT = ...
        TRANSFER_WRITE_BIT = ...
        HOST_READ_BIT = ...
        HOST_WRITE_BIT = ...
        MEMORY_READ_BIT = ...
        MEMORY_WRITE_BIT = ...
        TRANSFORM_FEEDBACK_WRITE_BIT = ...
        TRANSFORM_FEEDBACK_COUNTER_READ_BIT = ...
        TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT = ...
        CONDITIONAL_RENDERING_READ_BIT = ...
        COLOR_ATTACHMENT_READ_NONCOHERENT_BIT = ...
        ACCELERATION_STRUCTURE_READ_BIT = ...
        ACCELERATION_STRUCTURE_WRITE_BIT = ...
        FRAGMENT_DENSITY_MAP_READ_BIT = ...
        FRAGMENT_SHADING_RATE_ATTACHMENT_READ_BIT = ...
        COMMAND_PREPROCESS_READ_BIT = ...
        COMMAND_PREPROCESS_WRITE_BIT = ...
        NONE = 0

    class PipelineStageBit:
        TOP_OF_PIPE_BIT = ...
        DRAW_INDIRECT_BIT = ...
        VERTEX_INPUT_BIT = ...
        VERTEX_SHADER_BIT = ...
        TESSELLATION_CONTROL_SHADER_BIT = ...
        TESSELLATION_EVALUATION_SHADER_BIT = ...
        GEOMETRY_SHADER_BIT = ...
        FRAGMENT_SHADER_BIT = ...
        EARLY_FRAGMENT_TESTS_BIT = ...
        LATE_FRAGMENT_TESTS_BIT = ...
        COLOR_ATTACHMENT_OUTPUT_BIT = ...
        COMPUTE_SHADER_BIT = ...
        TRANSFER_BIT = ...
        BOTTOM_OF_PIPE_BIT = ...
        HOST_BIT = ...
        ALL_GRAPHICS_BIT = ...
        ALL_COMMANDS_BIT = ...
        TRANSFORM_FEEDBACK_BIT_EXT = ...
        CONDITIONAL_RENDERING_BIT_EXT = ...
        ACCELERATION_STRUCTURE_BUILD_BIT_KHR = ...
        RAY_TRACING_SHADER_BIT_KHR = ...
        TASK_SHADER_BIT_NV = ...
        MESH_SHADER_BIT_NV = ...
        FRAGMENT_DENSITY_PROCESS_BIT = ...
        FRAGMENT_SHADING_RATE_ATTACHMENT_BIT = ...
        COMMAND_PREPROCESS_BIT = ...

    class CompareFunction:
        NEVER = ...
        LESS = ...
        EQUAL = ...
        LESS_EQUAL = ...
        GREATER = ...
        NOT_EQUAL = ...
        GREATER_EQUAL = ...
        ALWAYS = ...

    class LoadOp:
        DONT_CARE = ...
        LOAD = ...
        CLEAR = ...

    class StoreOp:
        DONT_CARE = ...
        STORE = ...
        DISCARD = ...

    class Texture: ...
    
    class SwapChain:
        def getTexture(self, idx:int) -> rhi.Texture: ...
        ...
    class SwapChainDescriptor: ...
    
    class MultiFrameFlightsDescriptor:
        def __init__(self, count:int, swapchain:object) -> None: ...

    class Fence: ...
    class Seamaphore: ...

    class MultiFrameFlights:
        def frameStart(self) -> None: ...
        def getFence(self) -> rhi.Fence: ...
        def frameEnd(self) -> None: ...
        def getImageAvailableSeamaphore(self) -> rhi.Seamaphore: ...
        def getRenderFinishedSeamaphore(self) -> rhi.Seamaphore: ...
        def getCommandBuffer(self) -> rhi.CommandBuffer: ...
        ...
    
    class BindingResource:
        def __init__(self) -> None: ...
        def __init__(self, buffer: object) -> None: ...
    
    class TextureView:
        ...
    
    class Sampler:
        ...
    
    class Buffer:
        def size(self) -> int: ...
        def getDevice(self) -> rhi.Device: ...
    
    class TLAS:
        ...
    
    class BufferBinding:
        def __init__(self, buffer: rhi.Buffer, offset:int, size:int) -> None: ...

    class BindingResource:
        def __init__(self) -> None: ...
        def __init__(self, texture: rhi.TextureView) -> None: ...
        def __init__(self, sampler: rhi.Sampler) -> None: ...
        def __init__(self, texture: rhi.TextureView, sampler: rhi.Sampler) -> None: ...
        def __init__(self, buffer: rhi.BufferBinding) -> None: ...
        def __init__(self, tlas: rhi.TLAS) -> None: ...
        def __init__(self, textures: List[rhi.TextureView]) -> None: ...
        def __init__(self, textures: List[rhi.TextureView], sampler: rhi.Sampler) -> None: ...
        def __init__(self, textures: List[rhi.TextureView], samplers: List[rhi.Sampler]) -> None: ...

    class ComputePassEncoder:
        def dispatchWorkgroups(
            workgroupCountX: int,
            workgroupCountY: int,
            workgroupCountZ: int
        ) -> None: ...
        def pushConstants(
            data: object,
            stage: int,
            offset: int,
            size: int
        ) -> None: ...
        def dispatchWorkgroupsIndirect(
            buffer: rhi.Buffer,
            offset: int
        ) -> None: ...
        def end(self) -> None: ...

    class RequestAdapterOptions:
        ...
    
    class Adapter:
        def requestDevice(self) -> rhi.Device: ...

    class Context:
        class EnumBackend:
            Vulkan = 0
        @staticmethod
        def create(backend: rhi.Context.EnumBackend) -> rhi.Context: ...
        def init(self, window:window, extensions: int) -> None: ...
        def requestAdapter(self, options: rhi.RequestAdapterOptions) -> rhi.Adapter: ...

    class CommandEncoderDescriptor:
        def __init__(self) -> None: ...
        def __init__(self, buffer:rhi.CommandBuffer) -> None: ...
        ...

    class Queue:
        def submit(self, commandBuffers: List[rhi.CommandBuffer]) -> None: ...

    class CommandBuffer:
        ...
    
    class CommandEncoder:
        def finish(self) -> rhi.CommandBuffer: ...
        def pipelineBarrier(self, desc: rhi.BarrierDescriptor) -> None: ...
        ...
    
    class BufferDescriptor:
        def __init__(self, size:int, usage:int, shareMode:int, memoryProperty:int) -> None: ...
    
    class Device:
        def createCommandEncoder(self, desc: rhi.CommandEncoderDescriptor) -> rhi.CommandEncoder: ...
        def getGraphicsQueue(self) -> rhi.Queue: ...
        def waitIdle(self) -> None: ...
        def createBuffer(self, desc: rhi.BufferDescriptor) -> rhi.Buffer: ...
        def createMultiFrameFlights(self, desc: rhi.MultiFrameFlightsDescriptor) -> rhi.MultiFrameFlights: ...
        def createSwapChain(self, desc: rhi.SwapChainDescriptor) -> rhi.SwapChain: ...
        def size(self) -> int: ...
        def copyBufferToBuffer(self, src: rhi.Buffer, src_offset:int, dst: rhi.Buffer, dst_offset:int, size: int) -> None: ...

    class CUDAContext:
        @staticmethod
        def initialize(device: rhi.Device) -> None: ...
        @staticmethod
        def toCUDABuffer(buffer: rhi.Buffer) -> object: ...
        @staticmethod
        def toCUDABufferInterval(buffer: rhi.Buffer, offset:int, size:int) -> object: ...
        @staticmethod
        def synchronize() -> None: ...

    class TextureMemoryBarrierDescriptor:
        ...

    class ImageSubresourceRange:
        ...
   
    class TextureAspectBit:
        COLOR_BIT = 0
        
    class TextureLayout:
        UNDEFINED = 0
        PRESENT_SRC = 1

    class BarrierDescriptor:
        ...

    class RenderPassColorAttachment:
        def __init__(self, texture: rhi.TextureView, resolveTexture: rhi.TextureView, clearColor: vec4, loadOp: rhi.LoadOp, storeOp: rhi.StoreOp) -> None: ...
        ...
    
    class RenderPassDepthStencilAttachment:
        def __init__(self, texture: rhi.TextureView, clearDepth: float, depthLoadOp: rhi.LoadOp,  depthStoreOp: rhi.StoreOp, depthReadOnly:bool, stencilvalue:int, stencilLoadOp: rhi.LoadOp, stencilStoreOp:rhi.StoreOp, stencilReadOnly:bool) -> None: ...
        ...

    class RenderPassTimestampWrites:
        ...
    
    class RenderPassDescriptor:
        def __init__(self, colorAttachments: List[rhi.RenderPassColorAttachment], depthStencilAttachment: rhi.RenderPassDepthStencilAttachment, timestampWrites: rhi.RenderPassTimestampWrites = rhi.RenderPassTimestampWrites(), maxDrawCount: int = 50000000) -> None: ...

class gfx:
    class Context:
        # return type is a list of gfx.ShaderModule
        @staticmethod
        def load_shader_slang(
            path: str,
            entrypoints: List[Tuple[str, rhi.EnumShaderStage]],
            macros: List[Tuple[str, str]] = [],
            glsl_intermediate: bool = False
        ) -> List[gfx.ShaderHandle]: ...
        @staticmethod
        def initialize(device: rhi.Device) -> None: ...
        @staticmethod
        def finalize() -> None: ...
        @staticmethod
        def load_scene_gltf(path: str) -> gfx.SceneHandle: ...
        @staticmethod
        def load_scene_xml(path: str) -> gfx.SceneHandle: ...
        @staticmethod
        def load_scene_pbrt(path: str) -> gfx.SceneHandle: ...
        @staticmethod
        def createFlights(count: int, swapchain: rhi.SwapChain) -> None: ...
        @staticmethod
        def getFlights() -> rhi.MultiFrameFlights: ...
        @staticmethod
        def create_scene(name: str) -> gfx.SceneHandle: ...
        @staticmethod
        def getDevice() -> rhi.Device: ...
        @staticmethod
        def create_texture_file(path: str) -> gfx.TextureHandle: ...
        @staticmethod
        def create_sampler_desc(address: rhi.EnumAddressMode) -> gfx.TextureHandle: ...

    class ShaderModule:
        ...

    class TexcoordKind:
        CopyCoord0 = 0
        XAtlas = 1

    class Scene:
        class GPUScene:
            def bindingResourceTLAS(self) -> rhi.BindingResource: ...
            def bindingResourceCamera(self) -> rhi.BindingResource: ...
            def bindingResourcePosition(self) -> rhi.BindingResource: ...
            def bindingResourceMaterial(self) -> rhi.BindingResource: ...
            def bindingResourceMedium(self) -> rhi.BindingResource: ...
            def bindingResourceLight(self) -> rhi.BindingResource: ...
            def bindingResourceTextures(self) -> rhi.BindingResource: ...
            def bindingResourceIndex(self) -> rhi.BindingResource: ...
            def bindingResourceVertex(self) -> rhi.BindingResource: ...
            def bindingResourceGeometry(self) -> rhi.BindingResource: ...
            def bindingResourceUvTLAS(self) -> rhi.BindingResource: ...
            def bindingResourceLightBVH(self) -> rhi.BindingResource: ...
            def bindingResourceLightTrail(self) -> rhi.BindingResource: ...
            def bindingResourceParamPacket(self) -> rhi.BindingResource: ...
            def bindingResourceParamPrimal(self) -> rhi.BindingResource: ...
            def bindingResourceParamGradient(self) -> rhi.BindingResource: ...
            def bindingSceneDescriptor(self) -> rhi.BindingResource: ...
            def getPositionBuffer(self) -> gfx.BufferHandle: ...
            def getDefaultResolution(self) -> ivec2: ...

            def export_param_primal(self) -> gfx.BufferHandle: ...
            def export_param_gradient(self) -> gfx.BufferHandle: ...
            def export_texture_parameters(self) -> List[gfx.ParameterPacket]: ...

            ...

        def serialize(self, path: str) -> None:
            ...
        def updateTransform(self) -> None:
            ...
        def updateGPUScene(self) -> None:
            ...
        def createTexcoord(self, kind: gfx.TexcoordKind) -> None:
            ...
        def getGPUScene(self) -> GPUScene:
            ...
        def getSceneLightCounts(self) -> int:
            ...
        def getEditorActiveCameraIndex(self) -> int:
            ...
        ...
    
    class BufferHandle:
        def get(self) -> gfx.Buffer: ...
        ...

    class ParameterPacket:
        dim_0: int
        dim_1: int
        dim_2: int
        offset_primal: int
        offset_grad: int
        default_value: float
        ...

    class SceneHandle:
        def get() -> gfx.Scene:
            ...
        ...

    class ShaderHandle:
        def get(self) -> gfx.ShaderModule: ...

    class TextureHandle:
        def get(self) -> gfx.Texture: ...
        ...

    class Texture:
        def getUAV(self, mipLevel:int, firstArraySlice:int, arraySize:int) -> rhi.TextureView: ...
        def getRTV(self, mipLevel:int, firstArraySlice:int, arraySize:int) -> rhi.TextureView: ...
        def getDSV(self, mipLevel:int, firstArraySlice:int, arraySize:int) -> rhi.TextureView: ...
        def getSRV(self, mostDetailedMip:int, mipCount:int, firstArraySlice:int, arraySize:int) -> rhi.TextureView: ...
        ...

    class Buffer:
        def getDevice(self) -> rhi.Buffer: ...
        def getBindingResource(self) -> rhi.BindingResource: ...
        ...

class rdg:
    class Pass:
        ...
    
    class PipelinePass(rdg.Pass):
        ...

    class RenderPass(rdg.PipelinePass):
        def __init__(self) -> None: ...
        def init(self, vert_shader:gfx.ShaderModule, frag_shader:gfx.ShaderModule) -> None: ...
        def setRenderPassDescriptor(self, desc:rhi.RenderPassDescriptor) -> None: ...
        def updateBindings(
            context: rdg.RenderContext,
            bindings: List[Tuple[str, rhi.BindingResource]]
        ) -> None: ...

    class ComputePass(rdg.PipelinePass):
        def __init__(self) -> None: ...
        def init(self, shader:object) -> None: ...
        def updateBindings(
            context: rdg.RenderContext,
            bindings: List[Tuple[str, rhi.BindingResource]]
        ) -> None: ...
        def beginPass(self, context: rdg.RenderContext) -> rhi.ComputePassEncoder: ...

    class BufferInfo:
        def withSize(self, size:int) -> rdg.BufferInfo: ...
        def withUsages(self, usage:int) -> rdg.BufferInfo: ...
        def consume(self, entry:rdg.BufferInfo.ConsumeEntry) -> rdg.BufferInfo: ...

        class ConsumeEntry:
            def __init__(self) -> None: ...
            def setAccess(self, access:int) -> rdg.BufferInfo.ConsumeEntry: ...
            def addStage(self, stages:int) -> rdg.BufferInfo.ConsumeEntry: ...
        ...
    
    class TextureInfo:
        def withSize(self, rel_size:vec3) -> rdg.TextureInfo: ...
        def withSize(self, abs_size:ivec3) -> rdg.TextureInfo: ...
        def withFormat(self, format:rhi.TextureFormat) -> rdg.TextureInfo: ...
        def withUsages(self, usage:int) -> rdg.TextureInfo: ...
        def consume(self, entry:rdg.TextureInfo.ConsumeEntry) -> rdg.TextureInfo: ...
        
        class ConsumeType:
            ColorAttachment = 0
            DepthStencilAttachment = 1
            TextureBinding = 2
            StorageBinding = 3

        class ConsumeEntry:
            def __init__(self, 
                         type:rdg.TextureInfo.ConsumeType, 
                         access:rhi.AccessFlagBits=0, 
                         stages:rhi.PipelineStageBit=0,
                         level_beg:int=0, level_end:int=0,
                         mip_beg:int=0, mip_end:int=0,
                         depthWrite:bool=False,
                         depthCmp:rhi.CompareFunction=rhi.CompareFunction.ALWAYS,
                         attachLoc:int=-1) -> None: ...
            def addStage(self, stage:rhi.PipelineStageBit) -> rdg.TextureInfo.ConsumeEntry: ...
            def setAttachmentLoc(self, loc:int) -> rdg.TextureInfo.ConsumeEntry: ...
            def enableDepthWrite(self, enable:bool) -> rdg.TextureInfo.ConsumeEntry: ...
            def setDepthCompareFn(self, cmp:rhi.CompareFunction) -> rdg.TextureInfo.ConsumeEntry: ...
            def setBlendOperation(self, op:rhi.BlendOperation) -> rdg.TextureInfo.ConsumeEntry: ...
            def setSourceBlenderFactor(self, fct:rhi.BlendFactor) -> rdg.TextureInfo.ConsumeEntry: ...
            def setTargetBlenderFactor(self, fct:rhi.BlendFactor) -> rdg.TextureInfo.ConsumeEntry: ...

        ...

    class ResourceInfo:
        def isBuffer(self) -> rdg.BufferInfo: ...
        def isTexture(self) -> rdg.TextureInfo: ...

    class PassReflection:
        def __init__(self) -> None: ...
        def addInput(self, name:str) -> rdg.ResourceInfo: ...
        def addOutput(self, name:str) -> rdg.ResourceInfo: ...
        def addInputOutput(self, name:str) -> rdg.ResourceInfo: ...
        def addInternal(self, name:str) -> rdg.ResourceInfo: ...
    
    class RenderContext:
        def __init__(self) -> None: ...
        flightIdx: int
        cmdEncoder: rhi.ComputePassEncoder
    
    class RenderData:
        def __init__(self) -> None: ...
        def getTexture(self, name:str) -> gfx.TextureHandle : ...
        def getBuffer(self, name:str) -> gfx.BufferHandle : ...
        def getScene(self) -> gfx.SceneHandle: ...

    class Graph:
        def addPass(self, passptr:rdg.Pass, name:str) -> None: ...
        def addEdge(self, srcPass:str, srcRes:str, dstPass:str, dstRes:str) -> None: ...
        def markOutput(self, passName:str, resName:str) -> None: ...
        def getBufferResource(self, passName:str, resName:str) -> gfx.BufferHandle: ...
        ...

    class Pipeline:
        def setGraph(self, graph:rdg.Graph) -> None: ...
        def build(self) -> None: ...
        def execute(self, encoder:rhi.CommandEncoder) -> None: ...
        def pipeline(self) -> rdg.Pipeline: ...
        def bindScene(self, scene:gfx.SceneHandle) -> None: ...
        def setStandardSize(self, size:ivec3) -> None: ...
        ...

    class SingleGraphPipeline(rdg.Pipeline):
        ...


class passes:
    class EditorInitPass():
        ...
    
    class BillboardPass():
        def setExternalBuffer(self, buffer:rhi.Buffer) -> None: ...
        ...

    class Line3DPass():
        def clear(self) -> None: ...
        def addLine(self, start:point3, end:point3, color:vec3, width:float) -> None: ...
        def addAABB(self, bounds:bounds3, color:vec3, width:float) -> None: ...
        def setExternalBuffer(self, buffer:rhi.Buffer, count:int) -> None: ...
        ...

    class AccumulatePass():
        ...
        
    class cbt:
        class CreateCBTPass:
            def __init__(self, max_depth, init_depth) -> None: ...
            ...
        ...
        class CBTSpatialTreeVisualizePass:
            def __init__(self, max_depth) -> None: ...
            ...

        class SumReductionFusedPass:
            def __init__(self, max_depth) -> None: ...
            ...

        class SumReductionOneLayerPass:
            def __init__(self, max_depth) -> None: ...
            ...