from typing import List, Tuple
import sibylengine.pycore as se

class RawImGuiCtx:
    ...

class ImGuiContext:
    @staticmethod
    def initialize(device:se.rhi.Device) -> object: ...
    @staticmethod
    def finalize(self) -> None: ...
    @staticmethod
    def getRawCtx() -> RawImGuiCtx: ...
    @staticmethod
    def startNewFrame() -> None: ...
    ...

class EditorContext:
    @staticmethod
    def initialize() -> object: ...
    ...

class ImGui:
    @staticmethod
    def SetCurrentContext(ctx:RawImGuiCtx) -> None: ...
    @staticmethod
    def Begin(name:str, open:bool, flag:int) -> bool: ...
    @staticmethod
    def End() -> None: ...
    @staticmethod
    def DragInt(label:str, value:int, speed:float, min:int, max:int) -> bool: ...
    @staticmethod
    def DragFloat(label:str, value:float, speed:float, min:float, max:float) -> bool: ...
    @staticmethod
    def Button(label:str, size:se.vec2) -> bool: ...
    @staticmethod
    def Text(text:str) -> None: ...
    @staticmethod
    def SameLine(offset_from_start_x:float, spacing:float) -> None: ...
    @staticmethod
    def Combo(label:str, current_item:se.Int32, items:List[str]) -> bool: ...
    @staticmethod
    def Checkbox(label:str, value:se.Bool) -> bool: ...
    @staticmethod
    def PushItemWidth(width:float) -> None: ...
    @staticmethod
    def PopItemWidth() -> None: ...
    @staticmethod
    def TreeNode(label:str) -> bool: ...
    @staticmethod
    def TreePop() -> None: ...
    @staticmethod
    def ShowTexture(tex:se.gfx.TextureHandle) -> None: ...
    @staticmethod
    def ColorEditVec3(label:str, value:se.vec3) -> bool: ...
    
class EditorBase:
    @staticmethod
    def bindInput(input:se.input) -> None: ...
    @staticmethod
    def bindTimer(timer:se.timer) -> None: ...
    @staticmethod
    def update() -> None: ...
    @staticmethod
    def finalize() -> None: ...
    @staticmethod
    def bindPipeline(pipeline:se.rdg.Pipeline) -> None: ...
    @staticmethod
    def bindScene(scene:se.gfx.SceneHandle) -> None: ...
    @staticmethod
    def fetchInput() -> se.input: ...
    @staticmethod
    def getViewportWidget() -> se.gfx.ViewportWidget: ...
    ...