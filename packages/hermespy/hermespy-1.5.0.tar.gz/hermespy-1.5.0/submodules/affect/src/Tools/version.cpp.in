#include "Tools/version.h"
#include "Tools/general_utils.h"

#define GIT_SHA1    "@GIT_SHA1@"
#define GIT_VERSION "@GIT_VERSION@"

std::string aff3ct::tools::sha1()
{
	std::string sha1(GIT_SHA1);
	return sha1;
}

std::string aff3ct::tools::version()
{
	std::string version(GIT_VERSION);
	return version;
}

int aff3ct::tools::version_major()
{
	std::string version(GIT_VERSION);

	if (version == "GIT-NOTFOUND")
	{
		return -1;
	}
	else
	{
		auto vs = tools::split(version, '.');

		if (!vs.size())
			return -2;
		else
		{
			vs[0].erase(0,1);
			if (!vs[0].size())
				return -3;
			else
				return std::stoi(vs[0]);
		}
	}
}

int aff3ct::tools::version_minor()
{
	std::string version(GIT_VERSION);

	if (version == "GIT-NOTFOUND")
	{
		return -1;
	}
	else
	{
		auto vs = tools::split(version, '.');

		if (vs.size() < 2)
			return -2;
		else
		{
			auto vs2 = tools::split(vs[1], '-');

			if (!vs2[0].size())
				return -3;
			else
				return std::stoi(vs2[0]);
		}
	}
}

int aff3ct::tools::version_release()
{
	std::string version(GIT_VERSION);

	if (version == "GIT-NOTFOUND")
	{
		return -1;
	}
	else
	{
		auto vs = tools::split(version, '.');

		if (vs.size() < 3)
			return -2;
		else
		{
			auto vs3 = tools::split(vs[2], '-');

			if (!vs3[0].size())
				return -3;
			else
				return std::stoi(vs3[0]);
		}
	}
}
