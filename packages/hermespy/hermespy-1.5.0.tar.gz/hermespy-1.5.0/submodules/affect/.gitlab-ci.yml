# CI environment

variables:
  GIT_SUBMODULE_STRATEGY: none

workflow:
  auto_cancel:
    on_new_commit: interruptible

  rules:
    - if: $CI_COMMIT_TITLE =~ /-draft$/ # add '-draft' to 1st commit message line end to ignore pipeline
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never
    - if: $CI_AFF3CT_ON_JOB_FAILURE == "none"
      auto_cancel:
        on_job_failure: none
    - if: $CI_AFF3CT_ON_JOB_FAILURE == "all"
      auto_cancel:
        on_job_failure: all

stages:
  - analysis
  - build
  - check
  - test
  - coverage
  - deploy

# default values

default:
  artifacts:
    expire_in: 2 months
  interruptible: true

before_script:
  - hostname
  - whoami
  - pwd

# generic configuration for linux

.tags-linux:
  tags:
    - x86_64
    - linux
    - docker

.config-common-linux:
  extends: .tags-linux
  before_script:
    - hostname
    - whoami

###################
## analysis jobs ##
###################

analysis-headers:
  extends: .tags-linux
  rules:
    - when: on_success
  image: ubuntu:20.04
  stage: analysis
  artifacts:
    name: analysis-headers
    when: on_failure
    paths:
      - aff3ct.hpp
  script:
    - ./scripts/generate_aff3ct_header.sh aff3ct.hpp
    - diff aff3ct.hpp include/aff3ct.hpp

analysis-cppcheck:
  extends: .tags-linux
  rules:
    - when: on_success
  image: registry.gitlab.com/aff3ct/aff3ct/x86_64_ubuntu_cppcheck:v1.9
  stage: analysis
  allow_failure: false
  artifacts:
    name: analysis-cppcheck-logs
    when: always
    paths:
      - cppcheck/
  script:
    - ./ci/analysis-cppcheck.sh
    
analysis-clang-format:
  extends: .config-common-linux
  image: ubuntu:22.04
  stage: analysis
  script:
    - apt update
    - apt -y install clang-format
    - clang-format --version
    - mkdir original_code
    - cp -r include original_code
    - cp -r src original_code
    - ./scripts/apply_clang_format.sh
    - mkdir new_code
    - cp -r include new_code
    - cp -r src new_code
    - diff -r new_code original_code

analysis-clang:
  extends: .tags-linux
  rules:
    - if: $CI_SERVER_HOST == "gitlab.com" && $CI_COMMIT_BRANCH == "master" || $CI_COMMIT_BRANCH == "develop"
      when: always
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: never
  image: registry.gitlab.com/aff3ct/aff3ct/x86_64_ubuntu_clang:v10.0.0
  stage: analysis
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
    CFLAGS: -pedantic -fdiagnostics-show-option -Wall -Wno-overloaded-virtual
    CMAKE_OPT: -DAFF3CT_COMPILE_EXE=ON -DAFF3CT_COMPILE_STATIC_LIB=OFF -DAFF3CT_COMPILE_SHARED_LIB=OFF -DAFF3CT_PREC=MULTI -DAFF3CT_EXT_STRINGS=OFF
    NAME: build_analysis_clang
    REPORTS_DIR: clang_reports
  artifacts:
    name: analysis-clang-reports
    when: always
    paths:
      - clang_reports/
  script:
    - source ./ci/tools/threads.sh
    - ./ci/analysis-clang.sh

analysis-git-submodules:
  extends: .tags-linux
  rules:
    - if: $CI_COMMIT_BRANCH == "ppa_upload"
      when: never
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always
  image: registry.gitlab.com/aff3ct/aff3ct/x86_64_ubuntu_git:v2.25.1
  stage: analysis
  rules:
    - if: $CI_PIPELINE_SOURCE != "schedule" && $CI_COMMIT_BRANCH == "develop"
    - if: $CI_PIPELINE_SOURCE != "schedule" && $CI_COMMIT_BRANCH == "master"
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  script:
    - source ./ci/tools/git-branch.sh
    - ./ci/analysis-git-submodule.sh

analysis-documentation:
  image: registry.gitlab.com/aff3ct/aff3ct/x86_64_ubuntu_doc
  stage: analysis
  artifacts:
    name: analysis-documentation
    when: always
    paths:
      - doc/build/html
#     - doc/build/latex
      - doc/build/doxygen
  tags:
    - x86_64
    - linux
    - docker
  script:
    - export THREADS="1"
    - ./ci/analysis-documentation.sh

include:
  # standard linux jobs (build, check, regression, coverage)
  - local: 'ci/linux/ci-linux-std.yml'
    rules:
      - if: $CI_PIPELINE_SOURCE != "schedule"
  # conditional windows jobs (build)
  - local: 'ci/windows/ci-windows.yml'
    rules: 
      - if: $CI_AFF3CT_RUNNERS_WINDOWS == "ON" && $CI_PIPELINE_SOURCE != "schedule"
  # conditional macos jobs (build)
  - local: 'ci/macos/ci-macos.yml'
    rules: 
      - if: $CI_AFF3CT_RUNNERS_MACOS == "ON" && $CI_PIPELINE_SOURCE != "schedule"
  # deploy jobs depending on branches and repository location
  - local: 'ci/deploy/deploy-gitlab-com.yml'
    rules: 
      - if: $CI_SERVER_HOST == "gitlab.com" && $CI_PIPELINE_SOURCE != "schedule" && $CI_COMMIT_BRANCH == "ppa_upload"
      - if: $CI_SERVER_HOST == "gitlab.com" && $CI_PIPELINE_SOURCE != "schedule" && $CI_COMMIT_BRANCH == "develop"
      - if: $CI_SERVER_HOST == "gitlab.com" && $CI_PIPELINE_SOURCE != "schedule" && $CI_COMMIT_BRANCH == "master" 

###########################
## deploy coverage pages ##
###########################

pages:
  stage: deploy
  rules:
      - if: $CI_PIPELINE_SOURCE != "schedule" && $CI_COMMIT_BRANCH == "develop"
  tags:
    - linux
  dependencies:
    - coverage-linux
  allow_failure: true
  script:
    - mv code_coverage_report/ public/
  artifacts:
    paths:
      - public
    expire_in: 30 days
