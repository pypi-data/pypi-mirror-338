#  Developed by CQ Inversiones SAS.
#  Copyright ©. 2019 - 2025. All rights reserved.
#  Desarrollado por CQ Inversiones SAS.
#  Copyright ©. 2019 - 2025. Todos los derechos reservados.

# Generated by Django 3.2.11 on 2022-06-01 15:01

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import djangocms_text_ckeditor.fields
import filer.fields.image


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.FILER_IMAGE_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Catalog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the product or service.', max_length=200, verbose_name='Product/Service name')),
                ('description', djangocms_text_ckeditor.fields.HTMLField(help_text='Description of the product or service offered.', verbose_name='Short description')),
                ('is_enabled', models.BooleanField(default=True, help_text='Indicates if the product or service is enabled.', verbose_name='Is enabled')),
            ],
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='Category name')),
                ('is_enabled', models.BooleanField(default=True, help_text='Indicates if the category is enabled.', verbose_name='Is Enabled')),
                ('parent', models.ForeignKey(blank=True, help_text='Parent category, if it is a subcategory.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='parent_category', to='djangocms_zb_organizations.category', verbose_name='Category parent')),
            ],
            options={
                'verbose_name_plural': 'Categories',
            },
        ),
        migrations.CreateModel(
            name='MicroSite',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(verbose_name='Slug')),
                ('abstract', djangocms_text_ckeditor.fields.HTMLField(help_text='Summary to show on the micro site.', max_length=200, verbose_name='Micro site abstract')),
                ('content', djangocms_text_ckeditor.fields.HTMLField(help_text='Content (text) to be displayed on the micro site.', verbose_name='Micro site content')),
                ('is_enabled', models.BooleanField(default=True, help_text='Indicates if the micro site is enabled.', verbose_name='Is enabled')),
            ],
        ),
        migrations.CreateModel(
            name='PluginConfig',
            fields=[
                ('cmsplugin_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, related_name='djangocms_zb_organizations_pluginconfig', serialize=False, to='cms.cmsplugin')),
                ('template', models.CharField(choices=[('default', 'Default')], default='default', help_text='Directory that contains the templates that the plugin will use.', max_length=100, verbose_name='Template dir')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='plugins_category', to='djangocms_zb_organizations.category', verbose_name='Filter by category')),
            ],
            options={
                'abstract': False,
            },
            bases=('cms.cmsplugin',),
        ),
        migrations.CreateModel(
            name='OrgPicture',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_enabled', models.BooleanField(default=True, help_text='Indicates if the picture/organization is enabled.', verbose_name='Is Enabled')),
                ('micro_site', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='org_picture_micro_site', to='djangocms_zb_organizations.microsite', verbose_name='Organization owner')),
                ('picture', filer.fields.image.FilerImageField(help_text='Represents the image file found in media (Filer).', on_delete=django.db.models.deletion.PROTECT, to=settings.FILER_IMAGE_MODEL, verbose_name='Picture file')),
            ],
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Organization name', max_length=150, verbose_name='Name')),
                ('address', models.CharField(blank=True, help_text='Company/organization address.', max_length=150, null=True, verbose_name='Address')),
                ('phone', models.CharField(blank=True, help_text='Phone number of the organization/company.', max_length=15, null=True, verbose_name='Phone number')),
                ('email', models.EmailField(blank=True, help_text='Primary company/organization email.', max_length=50, null=True, verbose_name='Email')),
                ('latitude', models.DecimalField(blank=True, decimal_places=7, help_text='Latitude in which the company/organization is located.', max_digits=10, null=True, verbose_name='Latitude')),
                ('longitude', models.DecimalField(blank=True, decimal_places=7, help_text='Longitude in which the company/organization is located.', max_digits=10, null=True, verbose_name='Longitude')),
                ('is_enabled', models.BooleanField(default=True, help_text='Indicates if the company/organization is enabled.', verbose_name='Is enabled')),
                ('category', models.ManyToManyField(related_name='organization_category', to='djangocms_zb_organizations.Category', verbose_name='Categories')),
                ('country', models.ForeignKey(help_text='Country where the company/organization is located.', on_delete=django.db.models.deletion.PROTECT, to='cities_light.country', verbose_name='Country')),
                ('region', models.ForeignKey(help_text='Region or state where the company/organization is located.', on_delete=django.db.models.deletion.PROTECT, to='cities_light.region', verbose_name='Región')),
                ('subregion', models.ForeignKey(help_text='City or sub region where the company/organization is located.', on_delete=django.db.models.deletion.PROTECT, to='cities_light.subregion', verbose_name='Sub Región')),
            ],
        ),
        migrations.AddField(
            model_name='microsite',
            name='organization',
            field=models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, related_name='micro_site_organization', to='djangocms_zb_organizations.organization', verbose_name='Organization owner'),
        ),
        migrations.CreateModel(
            name='Contact',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, verbose_name='Contact name')),
                ('phone', models.CharField(blank=True, max_length=15, null=True, verbose_name='Contact phone')),
                ('email', models.EmailField(blank=True, max_length=50, null=True, verbose_name='Contact email')),
                ('is_enabled', models.BooleanField(default=True, help_text='Indicates if the contact/organization is enabled.', verbose_name='Is Enabled')),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='contact_organization', to='djangocms_zb_organizations.organization', verbose_name='Organization owner')),
            ],
        ),
        migrations.CreateModel(
            name='CatPicture',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_enabled', models.BooleanField(default=True, help_text='Indicates if the picture is enabled.', verbose_name='Is enabled')),
                ('catalog', models.OneToOneField(help_text='Product or service to which the image belongs.', on_delete=django.db.models.deletion.PROTECT, related_name='picture_catalog', to='djangocms_zb_organizations.catalog', verbose_name='Catalog owner')),
                ('picture', filer.fields.image.FilerImageField(help_text='Represents the image file found in media (Filer).', on_delete=django.db.models.deletion.PROTECT, to=settings.FILER_IMAGE_MODEL, verbose_name='Picture file')),
            ],
        ),
        migrations.AddField(
            model_name='catalog',
            name='micro_site',
            field=models.ForeignKey(help_text='Micro site to which the catalog belongs.', on_delete=django.db.models.deletion.PROTECT, related_name='catalog_micro_site', to='djangocms_zb_organizations.microsite', verbose_name='Micro site owner'),
        ),
        migrations.AddIndex(
            model_name='organization',
            index=models.Index(fields=['name'], name='organization_name'),
        ),
    ]
