Metadata-Version: 2.3
Name: parabellum
Version: 0.5.13
Summary: Parabellum environment for parallel warfare simulation
Author: Noah Syrkis
Author-email: desk@syrkis.com
Requires-Python: >=3.11,<3.12
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.11
Requires-Dist: brax (>=0.12.1,<0.13.0)
Requires-Dist: cachier (>=3.1.2,<4.0.0)
Requires-Dist: cartopy (>=0.23.0,<0.24.0)
Requires-Dist: contextily (>=1.6.0,<2.0.0)
Requires-Dist: distrax (>=0.1.5,<0.2.0)
Requires-Dist: einops (>=0.8.0,<0.9.0)
Requires-Dist: equinox (>=0.11.11,<0.12.0)
Requires-Dist: evosax (>=0.1.6,<0.2.0)
Requires-Dist: flashbax (>=0.1.2,<0.2.0)
Requires-Dist: flax (>=0.10.4,<0.11.0)
Requires-Dist: folium (>=0.17.0,<0.18.0)
Requires-Dist: geopy (>=2.4.1,<3.0.0)
Requires-Dist: gymnax (>=0.0.8,<0.0.9)
Requires-Dist: ipykernel (>=6.29.5,<7.0.0)
Requires-Dist: jax (>=0.5.0,<0.6.0)
Requires-Dist: jax-tqdm (>=0.3.1,<0.4.0)
Requires-Dist: jaxtyping (>=0.2.33,<0.3.0)
Requires-Dist: jupyterlab (>=4.2.2,<5.0.0)
Requires-Dist: navix (>=0.7.0,<0.8.0)
Requires-Dist: numpy (>=2.2.3,<3.0.0)
Requires-Dist: omegaconf (>=2.3.0,<3.0.0)
Requires-Dist: optax (>=0.2.4,<0.3.0)
Requires-Dist: osmnx (==2.0.0b0)
Requires-Dist: pandas (>=2.2.2,<3.0.0)
Requires-Dist: poetry (>=1.8.3,<2.0.0)
Requires-Dist: rasterio (>=1.3.10,<2.0.0)
Requires-Dist: stadiamaps (>=3.2.1,<4.0.0)
Requires-Dist: tqdm (>=4.66.4,<5.0.0)
Requires-Dist: wandb (>=0.19.7,<0.20.0)
Description-Content-Type: text/markdown

# Parabellum

Ultra-scalable JaxMARL based warfare simulation engine.

[![Documentation Status](https://readthedocs.org/projects/parabellum/badge/?version=latest)](https://parabellum.readthedocs.io/en/latest/?badge=latest)

## Features

- Obstacles and terrain integration
- Rasterized maps
- Blast radii simulation
- Friendly fire mechanics
- Pygame visualization
- JAX-based parallelization

## Install

```bash
pip install parabellum
```

## Quick Start

```python
import parabellum as pb
from jax import random

terrain = pb.terrain_fn("Thun, Switzerland", 1000)
scenario = pb.make_scenario("Thun", terrain, 10, 10)
env = pb.Parabellum(scenario)

rng, key = random.split(random.PRNGKey(0))
obs, state = env.reset(key)

# Simulation loop
for _ in range(100):
    rng, rng_act, key_step = random.split(key)
    key_act = random.split(rng_act, len(env.agents))
    act = {a: env.action_space(a).sample(k) for a, k in zip(env.agents, key_act)}
    obs, state, reward, done, info = env.step(key_step, act, state)

# Visualize
vis = pb.Visualizer(env, state_sequence)
vis.animate()
```

## Documentation

Full documentation: [parabellum.readthedocs.io](https://parabellum.readthedocs.io)

## Team

- Noah Syrkis
- TimothÃ©e Anne
- Supervisor: Sebastian Risi

## License

MIT

