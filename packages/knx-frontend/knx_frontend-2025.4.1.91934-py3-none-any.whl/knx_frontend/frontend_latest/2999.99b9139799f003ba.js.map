{"version":3,"file":"2999.99b9139799f003ba.js","sources":["webpack://knx-frontend/./homeassistant-frontend/src/common/language/format_language.ts","webpack://knx-frontend/./homeassistant-frontend/src/components/ha-language-picker.ts","webpack://knx-frontend/./homeassistant-frontend/src/components/ha-selector/ha-selector-language.ts"],"sourcesContent":["import memoizeOne from \"memoize-one\";\nimport type { FrontendLocaleData } from \"../../data/translation\";\n\nexport const formatLanguageCode = (\n  languageCode: string,\n  locale: FrontendLocaleData\n) => {\n  try {\n    return formatLanguageCodeMem(locale)?.of(languageCode) ?? languageCode;\n  } catch {\n    return languageCode;\n  }\n};\n\nconst formatLanguageCodeMem = memoizeOne(\n  (locale: FrontendLocaleData) =>\n    new Intl.DisplayNames(locale.language, {\n      type: \"language\",\n      fallback: \"code\",\n    })\n);\n","import type { PropertyValues } from \"lit\";\nimport { css, html, LitElement } from \"lit\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { stopPropagation } from \"../common/dom/stop_propagation\";\nimport { formatLanguageCode } from \"../common/language/format_language\";\nimport { caseInsensitiveStringCompare } from \"../common/string/compare\";\nimport type { FrontendLocaleData } from \"../data/translation\";\nimport { translationMetadata } from \"../resources/translations-metadata\";\nimport type { HomeAssistant } from \"../types\";\nimport \"./ha-list-item\";\nimport \"./ha-select\";\nimport type { HaSelect } from \"./ha-select\";\n\nexport const getLanguageOptions = (\n  languages: string[],\n  nativeName: boolean,\n  noSort: boolean,\n  locale?: FrontendLocaleData\n) => {\n  let options: { label: string; value: string }[] = [];\n\n  if (nativeName) {\n    const translations = translationMetadata.translations;\n    options = languages.map((lang) => {\n      let label = translations[lang]?.nativeName;\n      if (!label) {\n        try {\n          // this will not work if Intl.DisplayNames is polyfilled, it will return in the language of the user\n          label = new Intl.DisplayNames(lang, {\n            type: \"language\",\n            fallback: \"code\",\n          }).of(lang)!;\n        } catch (_err) {\n          label = lang;\n        }\n      }\n      return {\n        value: lang,\n        label,\n      };\n    });\n  } else if (locale) {\n    options = languages.map((lang) => ({\n      value: lang,\n      label: formatLanguageCode(lang, locale),\n    }));\n  }\n\n  if (!noSort && locale) {\n    options.sort((a, b) =>\n      caseInsensitiveStringCompare(a.label, b.label, locale.language)\n    );\n  }\n  return options;\n};\n\n@customElement(\"ha-language-picker\")\nexport class HaLanguagePicker extends LitElement {\n  @property() public value?: string;\n\n  @property() public label?: string;\n\n  @property({ type: Array }) public languages?: string[];\n\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @property({ type: Boolean, reflect: true }) public disabled = false;\n\n  @property({ type: Boolean }) public required = false;\n\n  @property({ attribute: \"native-name\", type: Boolean })\n  public nativeName = false;\n\n  @property({ attribute: \"no-sort\", type: Boolean }) public noSort = false;\n\n  @property({ attribute: \"inline-arrow\", type: Boolean })\n  public inlineArrow = false;\n\n  @state() _defaultLanguages: string[] = [];\n\n  @query(\"ha-select\") private _select!: HaSelect;\n\n  protected firstUpdated(changedProps: PropertyValues) {\n    super.firstUpdated(changedProps);\n    this._computeDefaultLanguageOptions();\n  }\n\n  protected updated(changedProperties: PropertyValues) {\n    super.updated(changedProperties);\n\n    const localeChanged =\n      changedProperties.has(\"hass\") &&\n      this.hass &&\n      changedProperties.get(\"hass\") &&\n      changedProperties.get(\"hass\").locale.language !==\n        this.hass.locale.language;\n    if (\n      changedProperties.has(\"languages\") ||\n      changedProperties.has(\"value\") ||\n      localeChanged\n    ) {\n      this._select.layoutOptions();\n      if (this._select.value !== this.value) {\n        fireEvent(this, \"value-changed\", { value: this._select.value });\n      }\n      if (!this.value) {\n        return;\n      }\n      const languageOptions = this._getLanguagesOptions(\n        this.languages ?? this._defaultLanguages,\n        this.nativeName,\n        this.noSort,\n        this.hass?.locale\n      );\n      const selectedItemIndex = languageOptions.findIndex(\n        (option) => option.value === this.value\n      );\n      if (selectedItemIndex === -1) {\n        this.value = undefined;\n      }\n      if (localeChanged) {\n        this._select.select(selectedItemIndex);\n      }\n    }\n  }\n\n  private _getLanguagesOptions = memoizeOne(getLanguageOptions);\n\n  private _computeDefaultLanguageOptions() {\n    this._defaultLanguages = Object.keys(translationMetadata.translations);\n  }\n\n  protected render() {\n    const languageOptions = this._getLanguagesOptions(\n      this.languages ?? this._defaultLanguages,\n      this.nativeName,\n      this.noSort,\n      this.hass?.locale\n    );\n\n    const value =\n      this.value ?? (this.required ? languageOptions[0]?.value : this.value);\n\n    return html`\n      <ha-select\n        .label=${this.label ??\n        (this.hass?.localize(\"ui.components.language-picker.language\") ||\n          \"Language\")}\n        .value=${value || \"\"}\n        .required=${this.required}\n        .disabled=${this.disabled}\n        @selected=${this._changed}\n        @closed=${stopPropagation}\n        fixedMenuPosition\n        naturalMenuWidth\n        .inlineArrow=${this.inlineArrow}\n      >\n        ${languageOptions.length === 0\n          ? html`<ha-list-item value=\"\"\n              >${this.hass?.localize(\n                \"ui.components.language-picker.no_languages\"\n              ) || \"No languages\"}</ha-list-item\n            >`\n          : languageOptions.map(\n              (option) => html`\n                <ha-list-item .value=${option.value}\n                  >${option.label}</ha-list-item\n                >\n              `\n            )}\n      </ha-select>\n    `;\n  }\n\n  static styles = css`\n    ha-select {\n      width: 100%;\n    }\n  `;\n\n  private _changed(ev): void {\n    const target = ev.target as HaSelect;\n    if (target.value === \"\" || target.value === this.value) {\n      return;\n    }\n    this.value = target.value;\n    fireEvent(this, \"value-changed\", { value: this.value });\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-language-picker\": HaLanguagePicker;\n  }\n}\n","import { css, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport type { LanguageSelector } from \"../../data/selector\";\nimport type { HomeAssistant } from \"../../types\";\nimport \"../ha-language-picker\";\n\n@customElement(\"ha-selector-language\")\nexport class HaLanguageSelector extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public selector!: LanguageSelector;\n\n  @property() public value?: any;\n\n  @property() public label?: string;\n\n  @property() public helper?: string;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public required = true;\n\n  protected render() {\n    return html`\n      <ha-language-picker\n        .hass=${this.hass}\n        .value=${this.value}\n        .label=${this.label}\n        .helper=${this.helper}\n        .languages=${this.selector.language?.languages}\n        .nativeName=${Boolean(this.selector?.language?.native_name)}\n        .noSort=${Boolean(this.selector?.language?.no_sort)}\n        .disabled=${this.disabled}\n        .required=${this.required}\n      ></ha-language-picker>\n    `;\n  }\n\n  static styles = css`\n    ha-language-picker {\n      width: 100%;\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-selector-language\": HaLanguageSelector;\n  }\n}\n"],"names":["formatLanguageCode","languageCode","locale","formatLanguageCodeMem","of","memoizeOne","Intl","DisplayNames","language","type","fallback","getLanguageOptions","languages","nativeName","noSort","options","translations","translationMetadata","map","lang","label","_err","value","sort","a","b","caseInsensitiveStringCompare","_decorate","customElement","_initialize","_LitElement","HaLanguagePicker","constructor","args","F","d","kind","decorators","property","key","Array","attribute","Boolean","reflect","state","query","changedProps","_superPropGet","this","_computeDefaultLanguageOptions","changedProperties","localeChanged","has","hass","get","_select","layoutOptions","fireEvent","selectedItemIndex","_getLanguagesOptions","_defaultLanguages","findIndex","option","undefined","select","Object","keys","languageOptions","required","html","localize","disabled","_changed","stopPropagation","inlineArrow","length","static","css","ev","target","LitElement","HaLanguageSelector","helper","selector","native_name","no_sort"],"mappings":"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"}