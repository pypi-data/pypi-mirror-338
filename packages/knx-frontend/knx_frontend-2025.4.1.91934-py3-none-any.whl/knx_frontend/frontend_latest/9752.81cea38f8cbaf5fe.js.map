{"version":3,"file":"9752.81cea38f8cbaf5fe.js","sources":["webpack://knx-frontend/./homeassistant-frontend/src/components/ha-form/ha-form-string.ts"],"sourcesContent":["import { mdiEye, mdiEyeOff } from \"@mdi/js\";\nimport type { PropertyValues, TemplateResult } from \"lit\";\nimport { LitElement, css, html, nothing } from \"lit\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport \"../ha-icon-button\";\nimport \"../ha-textfield\";\nimport type { HaTextField } from \"../ha-textfield\";\nimport type {\n  HaFormElement,\n  HaFormStringData,\n  HaFormStringSchema,\n} from \"./types\";\nimport type {\n  LocalizeFunc,\n  LocalizeKeys,\n} from \"../../common/translations/localize\";\n\nconst MASKED_FIELDS = [\"password\", \"secret\", \"token\"];\n\n@customElement(\"ha-form-string\")\nexport class HaFormString extends LitElement implements HaFormElement {\n  @property({ attribute: false }) public localize?: LocalizeFunc;\n\n  @property({ attribute: false }) public localizeBaseKey =\n    \"ui.components.selectors.text\";\n\n  @property({ attribute: false }) public schema!: HaFormStringSchema;\n\n  @property() public data!: HaFormStringData;\n\n  @property() public label!: string;\n\n  @property() public helper?: string;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @state() protected unmaskedPassword = false;\n\n  @query(\"ha-textfield\") private _input?: HaTextField;\n\n  public focus(): void {\n    if (this._input) {\n      this._input.focus();\n    }\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <ha-textfield\n        .type=${!this.isPassword\n          ? this.stringType\n          : this.unmaskedPassword\n            ? \"text\"\n            : \"password\"}\n        .label=${this.label}\n        .value=${this.data || \"\"}\n        .helper=${this.helper}\n        helperPersistent\n        .disabled=${this.disabled}\n        .required=${this.schema.required}\n        .autoValidate=${this.schema.required}\n        .name=${this.schema.name}\n        .autocomplete=${this.schema.autocomplete}\n        .suffix=${this.isPassword\n          ? // reserve some space for the icon.\n            html`<div style=\"width: 24px\"></div>`\n          : this.schema.description?.suffix}\n        .validationMessage=${this.schema.required\n          ? this.localize?.(\"ui.common.error_required\")\n          : undefined}\n        @input=${this._valueChanged}\n        @change=${this._valueChanged}\n      ></ha-textfield>\n      ${this.renderIcon()}\n    `;\n  }\n\n  protected renderIcon() {\n    if (!this.isPassword) return nothing;\n    return html`\n      <ha-icon-button\n        .label=${this.localize?.(\n          `${this.localizeBaseKey}.${\n            this.unmaskedPassword ? \"hide_password\" : \"show_password\"\n          }` as LocalizeKeys\n        )}\n        @click=${this.toggleUnmaskedPassword}\n        .path=${this.unmaskedPassword ? mdiEyeOff : mdiEye}\n      ></ha-icon-button>\n    `;\n  }\n\n  protected updated(changedProps: PropertyValues): void {\n    if (changedProps.has(\"schema\")) {\n      this.toggleAttribute(\"own-margin\", !!this.schema.required);\n    }\n  }\n\n  protected toggleUnmaskedPassword(): void {\n    this.unmaskedPassword = !this.unmaskedPassword;\n  }\n\n  protected _valueChanged(ev: Event): void {\n    let value: string | undefined = (ev.target as HaTextField).value;\n    if (this.data === value) {\n      return;\n    }\n    if (value === \"\" && !this.schema.required) {\n      value = undefined;\n    }\n    fireEvent(this, \"value-changed\", {\n      value,\n    });\n  }\n\n  protected get stringType(): string {\n    if (this.schema.format) {\n      if ([\"email\", \"url\"].includes(this.schema.format)) {\n        return this.schema.format;\n      }\n      if (this.schema.format === \"fqdnurl\") {\n        return \"url\";\n      }\n    }\n    return \"text\";\n  }\n\n  protected get isPassword(): boolean {\n    return MASKED_FIELDS.some((field) => this.schema.name.includes(field));\n  }\n\n  static styles = css`\n    :host {\n      display: block;\n      position: relative;\n    }\n    :host([own-margin]) {\n      margin-bottom: 5px;\n    }\n    ha-textfield {\n      display: block;\n    }\n    ha-icon-button {\n      position: absolute;\n      top: 8px;\n      right: 8px;\n      inset-inline-start: initial;\n      inset-inline-end: 8px;\n      --mdc-icon-button-size: 40px;\n      --mdc-icon-size: 20px;\n      color: var(--secondary-text-color);\n      direction: var(--direction);\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-form-string\": HaFormString;\n  }\n}\n"],"names":["MASKED_FIELDS","HaFormString","_decorate","customElement","_initialize","_LitElement","F","constructor","args","d","kind","decorators","property","attribute","key","value","type","Boolean","state","query","this","_input","focus","html","isPassword","unmaskedPassword","stringType","label","data","helper","disabled","schema","required","name","autocomplete","description","suffix","localize","undefined","_valueChanged","renderIcon","localizeBaseKey","toggleUnmaskedPassword","nothing","changedProps","has","toggleAttribute","ev","target","fireEvent","format","includes","some","field","static","css","LitElement"],"mappings":"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"}