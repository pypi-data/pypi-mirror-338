{"version":3,"file":"7615.00b1b12bd29bc339.js","sources":["webpack://knx-frontend/./homeassistant-frontend/src/data/options_flow.ts","webpack://knx-frontend/./homeassistant-frontend/src/components/ha-conversation-agent-picker.ts","webpack://knx-frontend/./homeassistant-frontend/src/dialogs/config-flow/show-dialog-options-flow.ts","webpack://knx-frontend/./homeassistant-frontend/src/components/ha-selector/ha-selector-conversation-agent.ts","webpack://knx-frontend/./homeassistant-frontend/src/data/conversation.ts","webpack://knx-frontend/./homeassistant-frontend/src/data/entity_registry.ts","webpack://knx-frontend/./homeassistant-frontend/src/data/integration.ts","webpack://knx-frontend/./homeassistant-frontend/src/dialogs/config-flow/show-dialog-data-entry-flow.ts"],"sourcesContent":["import type { HomeAssistant } from \"../types\";\nimport type { DataEntryFlowStep } from \"./data_entry_flow\";\n\nexport const createOptionsFlow = (hass: HomeAssistant, handler: string) =>\n  hass.callApi<DataEntryFlowStep>(\n    \"POST\",\n    \"config/config_entries/options/flow\",\n    {\n      handler,\n      show_advanced_options: Boolean(hass.userData?.showAdvanced),\n    }\n  );\n\nexport const fetchOptionsFlow = (hass: HomeAssistant, flowId: string) =>\n  hass.callApi<DataEntryFlowStep>(\n    \"GET\",\n    `config/config_entries/options/flow/${flowId}`\n  );\n\nexport const handleOptionsFlowStep = (\n  hass: HomeAssistant,\n  flowId: string,\n  data: Record<string, any>\n) =>\n  hass.callApi<DataEntryFlowStep>(\n    \"POST\",\n    `config/config_entries/options/flow/${flowId}`,\n    data\n  );\n\nexport const deleteOptionsFlow = (hass: HomeAssistant, flowId: string) =>\n  hass.callApi(\"DELETE\", `config/config_entries/options/flow/${flowId}`);\n","import { mdiCog } from \"@mdi/js\";\nimport type { PropertyValues } from \"lit\";\nimport { css, html, LitElement, nothing } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { stopPropagation } from \"../common/dom/stop_propagation\";\nimport { debounce } from \"../common/util/debounce\";\nimport type { ConfigEntry } from \"../data/config_entries\";\nimport { getConfigEntry } from \"../data/config_entries\";\nimport type { Agent } from \"../data/conversation\";\nimport { listAgents } from \"../data/conversation\";\nimport { fetchIntegrationManifest } from \"../data/integration\";\nimport { showOptionsFlowDialog } from \"../dialogs/config-flow/show-dialog-options-flow\";\nimport type { HomeAssistant } from \"../types\";\nimport \"./ha-list-item\";\nimport \"./ha-select\";\nimport type { HaSelect } from \"./ha-select\";\nimport { getExtendedEntityRegistryEntry } from \"../data/entity_registry\";\n\nconst NONE = \"__NONE_OPTION__\";\n\n@customElement(\"ha-conversation-agent-picker\")\nexport class HaConversationAgentPicker extends LitElement {\n  @property() public value?: string;\n\n  @property() public language?: string;\n\n  @property() public label?: string;\n\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean, reflect: true }) public disabled = false;\n\n  @property({ type: Boolean }) public required = false;\n\n  @state() _agents?: Agent[];\n\n  @state() private _configEntry?: ConfigEntry;\n\n  protected render() {\n    if (!this._agents) {\n      return nothing;\n    }\n    let value = this.value;\n    if (!value && this.required) {\n      // Select Home Assistant conversation agent if it supports the language\n      for (const agent of this._agents) {\n        if (\n          agent.id === \"conversation.home_assistant\" &&\n          agent.supported_languages.includes(this.language!)\n        ) {\n          value = agent.id;\n          break;\n        }\n      }\n      if (!value) {\n        // Select the first agent that supports the language\n        for (const agent of this._agents) {\n          if (\n            agent.supported_languages === \"*\" &&\n            agent.supported_languages.includes(this.language!)\n          ) {\n            value = agent.id;\n            break;\n          }\n        }\n      }\n    }\n    if (!value) {\n      value = NONE;\n    }\n\n    return html`\n      <ha-select\n        .label=${this.label ||\n        this.hass!.localize(\n          \"ui.components.coversation-agent-picker.conversation_agent\"\n        )}\n        .value=${value}\n        .required=${this.required}\n        .disabled=${this.disabled}\n        @selected=${this._changed}\n        @closed=${stopPropagation}\n        fixedMenuPosition\n        naturalMenuWidth\n      >\n        ${!this.required\n          ? html`<ha-list-item .value=${NONE}>\n              ${this.hass!.localize(\n                \"ui.components.coversation-agent-picker.none\"\n              )}\n            </ha-list-item>`\n          : nothing}\n        ${this._agents.map(\n          (agent) =>\n            html`<ha-list-item\n              .value=${agent.id}\n              .disabled=${agent.supported_languages !== \"*\" &&\n              agent.supported_languages.length === 0}\n            >\n              ${agent.name}\n            </ha-list-item>`\n        )}</ha-select\n      >${this._configEntry?.supports_options\n        ? html`<ha-icon-button\n            .path=${mdiCog}\n            @click=${this._openOptionsFlow}\n          ></ha-icon-button>`\n        : \"\"}\n    `;\n  }\n\n  protected willUpdate(changedProperties: PropertyValues<this>): void {\n    super.willUpdate(changedProperties);\n    if (!this.hasUpdated) {\n      this._updateAgents();\n    } else if (changedProperties.has(\"language\")) {\n      this._debouncedUpdateAgents();\n    }\n\n    if (changedProperties.has(\"value\")) {\n      this._maybeFetchConfigEntry();\n    }\n  }\n\n  private async _maybeFetchConfigEntry() {\n    if (!this.value || !(this.value in this.hass.entities)) {\n      this._configEntry = undefined;\n      return;\n    }\n    try {\n      const regEntry = await getExtendedEntityRegistryEntry(\n        this.hass,\n        this.value\n      );\n\n      if (!regEntry.config_entry_id) {\n        this._configEntry = undefined;\n        return;\n      }\n\n      this._configEntry = (\n        await getConfigEntry(this.hass, regEntry.config_entry_id)\n      ).config_entry;\n    } catch (_err) {\n      this._configEntry = undefined;\n    }\n  }\n\n  private _debouncedUpdateAgents = debounce(() => this._updateAgents(), 500);\n\n  private async _updateAgents() {\n    const { agents } = await listAgents(\n      this.hass,\n      this.language,\n      this.hass.config.country || undefined\n    );\n\n    this._agents = agents;\n\n    if (!this.value) {\n      return;\n    }\n\n    const selectedAgent = agents.find((agent) => agent.id === this.value);\n\n    fireEvent(this, \"supported-languages-changed\", {\n      value: selectedAgent?.supported_languages,\n    });\n\n    if (\n      !selectedAgent ||\n      (selectedAgent.supported_languages !== \"*\" &&\n        selectedAgent.supported_languages.length === 0)\n    ) {\n      this.value = undefined;\n      fireEvent(this, \"value-changed\", { value: this.value });\n    }\n  }\n\n  private async _openOptionsFlow() {\n    if (!this._configEntry) {\n      return;\n    }\n    showOptionsFlowDialog(this, this._configEntry, {\n      manifest: await fetchIntegrationManifest(\n        this.hass,\n        this._configEntry.domain\n      ),\n    });\n  }\n\n  static styles = css`\n    :host {\n      display: flex;\n      align-items: center;\n    }\n    ha-select {\n      width: 100%;\n    }\n    ha-icon-button {\n      color: var(--secondary-text-color);\n    }\n  `;\n\n  private _changed(ev): void {\n    const target = ev.target as HaSelect;\n    if (\n      !this.hass ||\n      target.value === \"\" ||\n      target.value === this.value ||\n      (this.value === undefined && target.value === NONE)\n    ) {\n      return;\n    }\n    this.value = target.value === NONE ? undefined : target.value;\n    fireEvent(this, \"value-changed\", { value: this.value });\n    fireEvent(this, \"supported-languages-changed\", {\n      value: this._agents!.find((agent) => agent.id === this.value)\n        ?.supported_languages,\n    });\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-conversation-agent-picker\": HaConversationAgentPicker;\n  }\n  interface HASSDomEvents {\n    \"supported-languages-changed\": { value: \"*\" | string[] | undefined };\n  }\n}\n","import { html } from \"lit\";\nimport type { ConfigEntry } from \"../../data/config_entries\";\nimport { domainToName } from \"../../data/integration\";\nimport {\n  createOptionsFlow,\n  deleteOptionsFlow,\n  fetchOptionsFlow,\n  handleOptionsFlowStep,\n} from \"../../data/options_flow\";\nimport type { DataEntryFlowDialogParams } from \"./show-dialog-data-entry-flow\";\nimport {\n  loadDataEntryFlowDialog,\n  showFlowDialog,\n} from \"./show-dialog-data-entry-flow\";\n\nexport const loadOptionsFlowDialog = loadDataEntryFlowDialog;\n\nexport const showOptionsFlowDialog = (\n  element: HTMLElement,\n  configEntry: ConfigEntry,\n  dialogParams?: Omit<DataEntryFlowDialogParams, \"flowConfig\">\n): void =>\n  showFlowDialog(\n    element,\n    {\n      startFlowHandler: configEntry.entry_id,\n      domain: configEntry.domain,\n      ...dialogParams,\n    },\n    {\n      flowType: \"options_flow\",\n      showDevices: false,\n      createFlow: async (hass, handler) => {\n        const [step] = await Promise.all([\n          createOptionsFlow(hass, handler),\n          hass.loadFragmentTranslation(\"config\"),\n          hass.loadBackendTranslation(\"options\", configEntry.domain),\n          hass.loadBackendTranslation(\"selector\", configEntry.domain),\n        ]);\n        return step;\n      },\n      fetchFlow: async (hass, flowId) => {\n        const [step] = await Promise.all([\n          fetchOptionsFlow(hass, flowId),\n          hass.loadFragmentTranslation(\"config\"),\n          hass.loadBackendTranslation(\"options\", configEntry.domain),\n          hass.loadBackendTranslation(\"selector\", configEntry.domain),\n        ]);\n        return step;\n      },\n      handleFlowStep: handleOptionsFlowStep,\n      deleteFlow: deleteOptionsFlow,\n\n      renderAbortDescription(hass, step) {\n        const description = hass.localize(\n          `component.${step.translation_domain || configEntry.domain}.options.abort.${step.reason}`,\n          step.description_placeholders\n        );\n\n        return description\n          ? html`\n              <ha-markdown\n                breaks\n                allow-svg\n                .content=${description}\n              ></ha-markdown>\n            `\n          : step.reason;\n      },\n\n      renderShowFormStepHeader(hass, step) {\n        return (\n          hass.localize(\n            `component.${step.translation_domain || configEntry.domain}.options.step.${step.step_id}.title`,\n            step.description_placeholders\n          ) || hass.localize(`ui.dialogs.options_flow.form.header`)\n        );\n      },\n\n      renderShowFormStepDescription(hass, step) {\n        const description = hass.localize(\n          `component.${step.translation_domain || configEntry.domain}.options.step.${step.step_id}.description`,\n          step.description_placeholders\n        );\n        return description\n          ? html`\n              <ha-markdown\n                allow-svg\n                breaks\n                .content=${description}\n              ></ha-markdown>\n            `\n          : \"\";\n      },\n\n      renderShowFormStepFieldLabel(hass, step, field, options) {\n        if (field.type === \"expandable\") {\n          return hass.localize(\n            `component.${configEntry.domain}.options.step.${step.step_id}.sections.${field.name}.name`\n          );\n        }\n\n        const prefix = options?.path?.[0] ? `sections.${options.path[0]}.` : \"\";\n\n        return (\n          hass.localize(\n            `component.${configEntry.domain}.options.step.${step.step_id}.${prefix}data.${field.name}`\n          ) || field.name\n        );\n      },\n\n      renderShowFormStepFieldHelper(hass, step, field, options) {\n        if (field.type === \"expandable\") {\n          return hass.localize(\n            `component.${step.translation_domain || configEntry.domain}.options.step.${step.step_id}.sections.${field.name}.description`\n          );\n        }\n\n        const prefix = options?.path?.[0] ? `sections.${options.path[0]}.` : \"\";\n\n        const description = hass.localize(\n          `component.${step.translation_domain || configEntry.domain}.options.step.${step.step_id}.${prefix}data_description.${field.name}`,\n          step.description_placeholders\n        );\n        return description\n          ? html`<ha-markdown breaks .content=${description}></ha-markdown>`\n          : \"\";\n      },\n\n      renderShowFormStepFieldError(hass, step, error) {\n        return (\n          hass.localize(\n            `component.${step.translation_domain || configEntry.domain}.options.error.${error}`,\n            step.description_placeholders\n          ) || error\n        );\n      },\n\n      renderShowFormStepFieldLocalizeValue(hass, _step, key) {\n        return hass.localize(`component.${configEntry.domain}.selector.${key}`);\n      },\n\n      renderShowFormStepSubmitButton(hass, step) {\n        return (\n          hass.localize(\n            `component.${configEntry.domain}.options.step.${step.step_id}.submit`\n          ) ||\n          hass.localize(\n            `ui.panel.config.integrations.config_flow.${\n              step.last_step === false ? \"next\" : \"submit\"\n            }`\n          )\n        );\n      },\n\n      renderExternalStepHeader(_hass, _step) {\n        return \"\";\n      },\n\n      renderExternalStepDescription(_hass, _step) {\n        return \"\";\n      },\n\n      renderCreateEntryDescription(hass, _step) {\n        return html`\n          <p>${hass.localize(`ui.dialogs.options_flow.success.description`)}</p>\n        `;\n      },\n\n      renderShowFormProgressHeader(hass, step) {\n        return (\n          hass.localize(\n            `component.${configEntry.domain}.options.step.${step.step_id}.title`\n          ) || hass.localize(`component.${configEntry.domain}.title`)\n        );\n      },\n\n      renderShowFormProgressDescription(hass, step) {\n        const description = hass.localize(\n          `component.${step.translation_domain || configEntry.domain}.options.progress.${step.progress_action}`,\n          step.description_placeholders\n        );\n        return description\n          ? html`\n              <ha-markdown\n                allow-svg\n                breaks\n                .content=${description}\n              ></ha-markdown>\n            `\n          : \"\";\n      },\n\n      renderMenuHeader(hass, step) {\n        return (\n          hass.localize(\n            `component.${configEntry.domain}.options.step.${step.step_id}.title`\n          ) || hass.localize(`component.${configEntry.domain}.title`)\n        );\n      },\n\n      renderMenuDescription(hass, step) {\n        const description = hass.localize(\n          `component.${step.translation_domain || configEntry.domain}.options.step.${step.step_id}.description`,\n          step.description_placeholders\n        );\n        return description\n          ? html`\n              <ha-markdown\n                allow-svg\n                breaks\n                .content=${description}\n              ></ha-markdown>\n            `\n          : \"\";\n      },\n\n      renderMenuOption(hass, step, option) {\n        return hass.localize(\n          `component.${step.translation_domain || configEntry.domain}.options.step.${step.step_id}.menu_options.${option}`,\n          step.description_placeholders\n        );\n      },\n\n      renderLoadingDescription(hass, reason) {\n        return (\n          hass.localize(`component.${configEntry.domain}.options.loading`) ||\n          (reason === \"loading_flow\" || reason === \"loading_step\"\n            ? hass.localize(`ui.dialogs.options_flow.loading.${reason}`, {\n                integration: domainToName(hass.localize, configEntry.domain),\n              })\n            : \"\")\n        );\n      },\n    }\n  );\n","import { css, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport type { ConversationAgentSelector } from \"../../data/selector\";\nimport type { HomeAssistant } from \"../../types\";\nimport \"../ha-conversation-agent-picker\";\n\n@customElement(\"ha-selector-conversation_agent\")\nexport class HaConversationAgentSelector extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public selector!: ConversationAgentSelector;\n\n  @property() public value?: any;\n\n  @property() public label?: string;\n\n  @property() public helper?: string;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public required = true;\n\n  @property({ attribute: false }) public context?: {\n    language?: string;\n  };\n\n  protected render() {\n    return html`<ha-conversation-agent-picker\n      .hass=${this.hass}\n      .value=${this.value}\n      .language=${this.selector.conversation_agent?.language ||\n      this.context?.language}\n      .label=${this.label}\n      .helper=${this.helper}\n      .disabled=${this.disabled}\n      .required=${this.required}\n    ></ha-conversation-agent-picker>`;\n  }\n\n  static styles = css`\n    ha-conversation-agent-picker {\n      width: 100%;\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-selector-conversation_agent\": HaConversationAgentSelector;\n  }\n}\n","import { ensureArray } from \"../common/array/ensure-array\";\nimport type { HomeAssistant } from \"../types\";\n\nexport const enum ConversationEntityFeature {\n  CONTROL = 1,\n}\n\ninterface IntentTarget {\n  type: \"area\" | \"device\" | \"entity\" | \"domain\" | \"device_class\" | \"custom\";\n  name: string;\n  id: string | null;\n}\n\ninterface IntentResultBase {\n  language: string;\n  speech: Record<\"plain\" | \"ssml\", { extra_data: any; speech: string }> | null;\n}\n\ninterface IntentResultActionDone extends IntentResultBase {\n  response_type: \"action_done\";\n  data: {\n    targets: IntentTarget[];\n    success: IntentTarget[];\n    failed: IntentTarget[];\n  };\n}\n\ninterface IntentResultQueryAnswer extends IntentResultBase {\n  response_type: \"query_answer\";\n  data: {\n    targets: IntentTarget[];\n    success: IntentTarget[];\n    failed: IntentTarget[];\n  };\n}\n\ninterface IntentResultError extends IntentResultBase {\n  response_type: \"error\";\n  data: {\n    code:\n      | \"no_intent_match\"\n      | \"no_valid_targets\"\n      | \"failed_to_handle\"\n      | \"unknown\";\n  };\n}\n\nexport interface ConversationResult {\n  conversation_id: string | null;\n  response:\n    | IntentResultActionDone\n    | IntentResultQueryAnswer\n    | IntentResultError;\n  continue_conversation: boolean;\n}\n\nexport interface Agent {\n  id: string;\n  name: string;\n  supported_languages: \"*\" | string[];\n}\n\nexport interface AssitDebugResult {\n  intent: {\n    name: string;\n  };\n  entities: Record<\n    string,\n    {\n      name: string;\n      value: string;\n      text: string;\n    }\n  >;\n}\n\nexport interface AssistDebugResponse {\n  results: (AssitDebugResult | null)[];\n}\n\nexport const processConversationInput = (\n  hass: HomeAssistant,\n  text: string,\n  // eslint-disable-next-line: variable-name\n  conversation_id: string | null,\n  language: string\n): Promise<ConversationResult> =>\n  hass.callWS({\n    type: \"conversation/process\",\n    text,\n    conversation_id,\n    language,\n  });\n\nexport const listAgents = (\n  hass: HomeAssistant,\n  language?: string,\n  country?: string\n): Promise<{ agents: Agent[] }> =>\n  hass.callWS({\n    type: \"conversation/agent/list\",\n    language,\n    country,\n  });\n\nexport const prepareConversation = (\n  hass: HomeAssistant,\n  language?: string\n): Promise<void> =>\n  hass.callWS({\n    type: \"conversation/prepare\",\n    language,\n  });\n\nexport const debugAgent = (\n  hass: HomeAssistant,\n  sentences: string[] | string,\n  language: string,\n  device_id?: string\n): Promise<AssistDebugResponse> =>\n  hass.callWS({\n    type: \"conversation/agent/homeassistant/debug\",\n    sentences: ensureArray(sentences),\n    language,\n    device_id,\n  });\n\nexport interface LanguageScore {\n  cloud: number;\n  focused_local: number;\n  full_local: number;\n}\n\nexport type LanguageScores = Record<string, LanguageScore>;\n\nexport const getLanguageScores = (\n  hass: HomeAssistant,\n  language?: string,\n  country?: string\n): Promise<{ languages: LanguageScores; preferred_language: string | null }> =>\n  hass.callWS({\n    type: \"conversation/agent/homeassistant/language_scores\",\n    language,\n    country,\n  });\n","import type { Connection } from \"home-assistant-js-websocket\";\nimport { createCollection } from \"home-assistant-js-websocket\";\nimport type { Store } from \"home-assistant-js-websocket/dist/store\";\nimport memoizeOne from \"memoize-one\";\nimport { computeStateName } from \"../common/entity/compute_state_name\";\nimport { caseInsensitiveStringCompare } from \"../common/string/compare\";\nimport { debounce } from \"../common/util/debounce\";\nimport type { HomeAssistant } from \"../types\";\nimport type { LightColor } from \"./light\";\nimport { computeDomain } from \"../common/entity/compute_domain\";\nimport type { RegistryEntry } from \"./registry\";\n\ntype EntityCategory = \"config\" | \"diagnostic\";\n\nexport interface EntityRegistryDisplayEntry {\n  entity_id: string;\n  name?: string;\n  icon?: string;\n  device_id?: string;\n  area_id?: string;\n  labels: string[];\n  hidden?: boolean;\n  entity_category?: EntityCategory;\n  translation_key?: string;\n  platform?: string;\n  display_precision?: number;\n  has_entity_name?: boolean;\n}\n\nexport interface EntityRegistryDisplayEntryResponse {\n  entities: {\n    ei: string;\n    di?: string;\n    ai?: string;\n    lb: string[];\n    ec?: number;\n    en?: string;\n    ic?: string;\n    pl?: string;\n    tk?: string;\n    hb?: boolean;\n    dp?: number;\n    hn?: boolean;\n  }[];\n  entity_categories: Record<number, EntityCategory>;\n}\n\nexport interface EntityRegistryEntry extends RegistryEntry {\n  id: string;\n  entity_id: string;\n  name: string | null;\n  icon: string | null;\n  platform: string;\n  config_entry_id: string | null;\n  config_subentry_id: string | null;\n  device_id: string | null;\n  area_id: string | null;\n  labels: string[];\n  disabled_by: \"user\" | \"device\" | \"integration\" | \"config_entry\" | null;\n  hidden_by: Exclude<EntityRegistryEntry[\"disabled_by\"], \"config_entry\">;\n  entity_category: EntityCategory | null;\n  has_entity_name: boolean;\n  original_name?: string;\n  unique_id: string;\n  translation_key?: string;\n  options: EntityRegistryOptions | null;\n  categories: Record<string, string>;\n}\n\nexport interface ExtEntityRegistryEntry extends EntityRegistryEntry {\n  capabilities: Record<string, unknown>;\n  original_icon?: string;\n  device_class?: string;\n  original_device_class?: string;\n  aliases: string[];\n}\n\nexport interface UpdateEntityRegistryEntryResult {\n  entity_entry: ExtEntityRegistryEntry;\n  reload_delay?: number;\n  require_restart?: boolean;\n}\n\nexport interface SensorEntityOptions {\n  display_precision?: number | null;\n  suggested_display_precision?: number | null;\n  unit_of_measurement?: string | null;\n}\n\nexport interface LightEntityOptions {\n  favorite_colors?: LightColor[];\n}\n\nexport interface NumberEntityOptions {\n  unit_of_measurement?: string | null;\n}\n\nexport interface LockEntityOptions {\n  default_code?: string | null;\n}\n\nexport interface AlarmControlPanelEntityOptions {\n  default_code?: string | null;\n}\n\nexport interface WeatherEntityOptions {\n  precipitation_unit?: string | null;\n  pressure_unit?: string | null;\n  temperature_unit?: string | null;\n  visibility_unit?: string | null;\n  wind_speed_unit?: string | null;\n}\n\nexport interface SwitchAsXEntityOptions {\n  entity_id: string;\n  invert: boolean;\n}\n\nexport interface EntityRegistryOptions {\n  number?: NumberEntityOptions;\n  sensor?: SensorEntityOptions;\n  alarm_control_panel?: AlarmControlPanelEntityOptions;\n  lock?: LockEntityOptions;\n  weather?: WeatherEntityOptions;\n  light?: LightEntityOptions;\n  switch_as_x?: SwitchAsXEntityOptions;\n  conversation?: Record<string, unknown>;\n  \"cloud.alexa\"?: Record<string, unknown>;\n  \"cloud.google_assistant\"?: Record<string, unknown>;\n}\n\nexport interface EntityRegistryEntryUpdateParams {\n  name?: string | null;\n  icon?: string | null;\n  device_class?: string | null;\n  area_id?: string | null;\n  disabled_by?: string | null;\n  hidden_by: string | null;\n  new_entity_id?: string;\n  options_domain?: string;\n  options?:\n    | SensorEntityOptions\n    | NumberEntityOptions\n    | LockEntityOptions\n    | AlarmControlPanelEntityOptions\n    | WeatherEntityOptions\n    | LightEntityOptions;\n  aliases?: string[];\n  labels?: string[];\n  categories?: Record<string, string | null>;\n}\n\nconst batteryPriorities = [\"sensor\", \"binary_sensor\"];\nexport const findBatteryEntity = <T extends { entity_id: string }>(\n  hass: HomeAssistant,\n  entities: T[]\n): T | undefined => {\n  const batteryEntities = entities\n    .filter(\n      (entity) =>\n        hass.states[entity.entity_id] &&\n        hass.states[entity.entity_id].attributes.device_class === \"battery\" &&\n        batteryPriorities.includes(computeDomain(entity.entity_id))\n    )\n    .sort(\n      (a, b) =>\n        batteryPriorities.indexOf(computeDomain(a.entity_id)) -\n        batteryPriorities.indexOf(computeDomain(b.entity_id))\n    );\n  if (batteryEntities.length > 0) {\n    return batteryEntities[0];\n  }\n\n  return undefined;\n};\n\nexport const findBatteryChargingEntity = <T extends { entity_id: string }>(\n  hass: HomeAssistant,\n  entities: T[]\n): T | undefined =>\n  entities.find(\n    (entity) =>\n      hass.states[entity.entity_id] &&\n      hass.states[entity.entity_id].attributes.device_class ===\n        \"battery_charging\"\n  );\n\nexport const computeEntityRegistryName = (\n  hass: HomeAssistant,\n  entry: EntityRegistryEntry\n): string | null => {\n  if (entry.name) {\n    return entry.name;\n  }\n  const state = hass.states[entry.entity_id];\n  if (state) {\n    return computeStateName(state);\n  }\n  return entry.original_name ? entry.original_name : entry.entity_id;\n};\n\nexport const getExtendedEntityRegistryEntry = (\n  hass: HomeAssistant,\n  entityId: string\n): Promise<ExtEntityRegistryEntry> =>\n  hass.callWS({\n    type: \"config/entity_registry/get\",\n    entity_id: entityId,\n  });\n\nexport const getExtendedEntityRegistryEntries = (\n  hass: HomeAssistant,\n  entityIds: string[]\n): Promise<Record<string, ExtEntityRegistryEntry>> =>\n  hass.callWS({\n    type: \"config/entity_registry/get_entries\",\n    entity_ids: entityIds,\n  });\n\nexport const updateEntityRegistryEntry = (\n  hass: HomeAssistant,\n  entityId: string,\n  updates: Partial<EntityRegistryEntryUpdateParams>\n): Promise<UpdateEntityRegistryEntryResult> =>\n  hass.callWS({\n    type: \"config/entity_registry/update\",\n    entity_id: entityId,\n    ...updates,\n  });\n\nexport const removeEntityRegistryEntry = (\n  hass: HomeAssistant,\n  entityId: string\n): Promise<void> =>\n  hass.callWS({\n    type: \"config/entity_registry/remove\",\n    entity_id: entityId,\n  });\n\nexport const fetchEntityRegistry = (conn: Connection) =>\n  conn.sendMessagePromise<EntityRegistryEntry[]>({\n    type: \"config/entity_registry/list\",\n  });\n\nexport const fetchEntityRegistryDisplay = (conn: Connection) =>\n  conn.sendMessagePromise<EntityRegistryDisplayEntryResponse>({\n    type: \"config/entity_registry/list_for_display\",\n  });\n\nconst subscribeEntityRegistryUpdates = (\n  conn: Connection,\n  store: Store<EntityRegistryEntry[]>\n) =>\n  conn.subscribeEvents(\n    debounce(\n      () =>\n        fetchEntityRegistry(conn).then((entities) =>\n          store.setState(entities, true)\n        ),\n      500,\n      true\n    ),\n    \"entity_registry_updated\"\n  );\n\nexport const subscribeEntityRegistry = (\n  conn: Connection,\n  onChange: (entities: EntityRegistryEntry[]) => void\n) =>\n  createCollection<EntityRegistryEntry[]>(\n    \"_entityRegistry\",\n    fetchEntityRegistry,\n    subscribeEntityRegistryUpdates,\n    conn,\n    onChange\n  );\n\nexport const sortEntityRegistryByName = (\n  entries: EntityRegistryEntry[],\n  language: string\n) =>\n  entries.sort((entry1, entry2) =>\n    caseInsensitiveStringCompare(entry1.name || \"\", entry2.name || \"\", language)\n  );\n\nexport const entityRegistryByEntityId = memoizeOne(\n  (entries: EntityRegistryEntry[]) => {\n    const entities: Record<string, EntityRegistryEntry> = {};\n    for (const entity of entries) {\n      entities[entity.entity_id] = entity;\n    }\n    return entities;\n  }\n);\n\nexport const entityRegistryById = memoizeOne(\n  (entries: EntityRegistryEntry[]) => {\n    const entities: Record<string, EntityRegistryEntry> = {};\n    for (const entity of entries) {\n      entities[entity.id] = entity;\n    }\n    return entities;\n  }\n);\n\nexport const getEntityPlatformLookup = (\n  entities: EntityRegistryEntry[]\n): Record<string, string> => {\n  const entityLookup = {};\n  for (const confEnt of entities) {\n    if (!confEnt.platform) {\n      continue;\n    }\n    entityLookup[confEnt.entity_id] = confEnt.platform;\n  }\n  return entityLookup;\n};\n","import type { Connection } from \"home-assistant-js-websocket\";\nimport { createCollection } from \"home-assistant-js-websocket\";\nimport type { LocalizeFunc } from \"../common/translations/localize\";\nimport type { HomeAssistant } from \"../types\";\nimport { debounce } from \"../common/util/debounce\";\n\nexport const integrationsWithPanel = {\n  bluetooth: \"config/bluetooth\",\n  matter: \"config/matter\",\n  mqtt: \"config/mqtt\",\n  thread: \"config/thread\",\n  zha: \"config/zha/dashboard\",\n  zwave_js: \"config/zwave_js/dashboard\",\n};\n\nexport type IntegrationType =\n  | \"device\"\n  | \"helper\"\n  | \"hub\"\n  | \"service\"\n  | \"hardware\"\n  | \"entity\"\n  | \"system\";\n\nexport interface IntegrationManifest {\n  is_built_in: boolean;\n  overwrites_built_in?: boolean;\n  domain: string;\n  name: string;\n  config_flow: boolean;\n  documentation: string;\n  issue_tracker?: string;\n  dependencies?: string[];\n  after_dependencies?: string[];\n  codeowners?: string[];\n  requirements?: string[];\n  ssdp?: { manufacturer?: string; modelName?: string; st?: string }[];\n  zeroconf?: string[];\n  homekit?: { models: string[] };\n  integration_type?: IntegrationType;\n  loggers?: string[];\n  quality_scale?:\n    | \"bronze\"\n    | \"silver\"\n    | \"gold\"\n    | \"platinum\"\n    | \"no_score\"\n    | \"internal\"\n    | \"legacy\"\n    | \"custom\";\n  iot_class:\n    | \"assumed_state\"\n    | \"cloud_polling\"\n    | \"cloud_push\"\n    | \"local_polling\"\n    | \"local_push\";\n  single_config_entry?: boolean;\n  version?: string;\n}\nexport interface IntegrationSetup {\n  domain: string;\n  seconds?: number;\n}\n\nexport interface IntegrationLogInfo {\n  domain: string;\n  level?: number;\n}\n\nexport enum LogSeverity {\n  CRITICAL = 50,\n  ERROR = 40,\n  WARNING = 30,\n  INFO = 20,\n  DEBUG = 10,\n  NOTSET = 0,\n}\n\nexport type IntegrationLogPersistance = \"none\" | \"once\" | \"permanent\";\n\nexport const integrationIssuesUrl = (\n  domain: string,\n  manifest: IntegrationManifest\n) =>\n  manifest.issue_tracker ||\n  `https://github.com/home-assistant/core/issues?q=is%3Aissue+is%3Aopen+label%3A%22integration%3A+${domain}%22`;\n\nexport const domainToName = (\n  localize: LocalizeFunc,\n  domain: string,\n  manifest?: IntegrationManifest\n) => localize(`component.${domain}.title`) || manifest?.name || domain;\n\nexport const fetchIntegrationManifests = (\n  hass: HomeAssistant,\n  integrations?: string[]\n) => {\n  const params: any = {\n    type: \"manifest/list\",\n  };\n  if (integrations) {\n    params.integrations = integrations;\n  }\n  return hass.callWS<IntegrationManifest[]>(params);\n};\n\nexport const fetchIntegrationManifest = (\n  hass: HomeAssistant,\n  integration: string\n) => hass.callWS<IntegrationManifest>({ type: \"manifest/get\", integration });\n\nexport const fetchIntegrationSetups = (hass: HomeAssistant) =>\n  hass.callWS<IntegrationSetup[]>({ type: \"integration/setup_info\" });\n\nexport const fetchIntegrationLogInfo = (conn) =>\n  conn.sendMessagePromise({\n    type: \"logger/log_info\",\n  });\n\nexport const setIntegrationLogLevel = (\n  hass: HomeAssistant,\n  integration: string,\n  level: string,\n  persistence: IntegrationLogPersistance\n) =>\n  hass.callWS({\n    type: \"logger/integration_log_level\",\n    integration,\n    level,\n    persistence,\n  });\n\nconst subscribeLogInfoUpdates = (conn, store) =>\n  conn.subscribeEvents(\n    debounce(\n      () =>\n        fetchIntegrationLogInfo(conn).then((log_infos) =>\n          store.setState(log_infos, true)\n        ),\n      200,\n      true\n    ),\n    \"logging_changed\"\n  );\n\nexport const subscribeLogInfo = (\n  conn: Connection,\n  onChange: (devices: IntegrationLogInfo[]) => void\n) =>\n  createCollection<IntegrationLogInfo[]>(\n    \"_integration_log_info\",\n    fetchIntegrationLogInfo,\n    subscribeLogInfoUpdates,\n    conn,\n    onChange\n  );\n","import type { TemplateResult } from \"lit\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport type { HaFormSchema } from \"../../components/ha-form/types\";\nimport type {\n  DataEntryFlowStep,\n  DataEntryFlowStepAbort,\n  DataEntryFlowStepCreateEntry,\n  DataEntryFlowStepExternal,\n  DataEntryFlowStepForm,\n  DataEntryFlowStepMenu,\n  DataEntryFlowStepProgress,\n  FlowType,\n} from \"../../data/data_entry_flow\";\nimport type { IntegrationManifest } from \"../../data/integration\";\nimport type { HomeAssistant } from \"../../types\";\n\nexport interface FlowConfig {\n  flowType: FlowType;\n\n  showDevices: boolean;\n\n  createFlow(hass: HomeAssistant, handler: string): Promise<DataEntryFlowStep>;\n\n  fetchFlow(hass: HomeAssistant, flowId: string): Promise<DataEntryFlowStep>;\n\n  handleFlowStep(\n    hass: HomeAssistant,\n    flowId: string,\n    data: Record<string, any>\n  ): Promise<DataEntryFlowStep>;\n\n  deleteFlow(hass: HomeAssistant, flowId: string): Promise<unknown>;\n\n  renderAbortHeader?(\n    hass: HomeAssistant,\n    step: DataEntryFlowStepAbort\n  ): TemplateResult | string;\n\n  renderAbortDescription(\n    hass: HomeAssistant,\n    step: DataEntryFlowStepAbort\n  ): TemplateResult | string;\n\n  renderShowFormStepHeader(\n    hass: HomeAssistant,\n    step: DataEntryFlowStepForm\n  ): string | TemplateResult;\n\n  renderShowFormStepDescription(\n    hass: HomeAssistant,\n    step: DataEntryFlowStepForm\n  ): TemplateResult | \"\";\n\n  renderShowFormStepFieldLabel(\n    hass: HomeAssistant,\n    step: DataEntryFlowStepForm,\n    field: HaFormSchema,\n    options: { path?: string[]; [key: string]: any }\n  ): string;\n\n  renderShowFormStepFieldHelper(\n    hass: HomeAssistant,\n    step: DataEntryFlowStepForm,\n    field: HaFormSchema,\n    options: { path?: string[]; [key: string]: any }\n  ): TemplateResult | string;\n\n  renderShowFormStepFieldError(\n    hass: HomeAssistant,\n    step: DataEntryFlowStepForm,\n    error: string\n  ): string;\n\n  renderShowFormStepFieldLocalizeValue(\n    hass: HomeAssistant,\n    step: DataEntryFlowStepForm,\n    key: string\n  ): string;\n\n  renderShowFormStepSubmitButton(\n    hass: HomeAssistant,\n    step: DataEntryFlowStepForm\n  ): string;\n\n  renderExternalStepHeader(\n    hass: HomeAssistant,\n    step: DataEntryFlowStepExternal\n  ): string;\n\n  renderExternalStepDescription(\n    hass: HomeAssistant,\n    step: DataEntryFlowStepExternal\n  ): TemplateResult | \"\";\n\n  renderCreateEntryDescription(\n    hass: HomeAssistant,\n    step: DataEntryFlowStepCreateEntry\n  ): TemplateResult | \"\";\n\n  renderShowFormProgressHeader(\n    hass: HomeAssistant,\n    step: DataEntryFlowStepProgress\n  ): string | TemplateResult;\n\n  renderShowFormProgressDescription(\n    hass: HomeAssistant,\n    step: DataEntryFlowStepProgress\n  ): TemplateResult | \"\";\n\n  renderMenuHeader(\n    hass: HomeAssistant,\n    step: DataEntryFlowStepMenu\n  ): string | TemplateResult;\n\n  renderMenuDescription(\n    hass: HomeAssistant,\n    step: DataEntryFlowStepMenu\n  ): TemplateResult | \"\";\n\n  renderMenuOption(\n    hass: HomeAssistant,\n    step: DataEntryFlowStepMenu,\n    option: string\n  ): string;\n\n  renderLoadingDescription(\n    hass: HomeAssistant,\n    loadingReason: LoadingReason,\n    handler?: string,\n    step?: DataEntryFlowStep | null\n  ): string;\n}\n\nexport type LoadingReason =\n  | \"loading_handlers\"\n  | \"loading_flow\"\n  | \"loading_step\";\n\nexport interface DataEntryFlowDialogParams {\n  startFlowHandler?: string;\n  searchQuery?: string;\n  continueFlowId?: string;\n  manifest?: IntegrationManifest | null;\n  domain?: string;\n  dialogClosedCallback?: (params: {\n    flowFinished: boolean;\n    entryId?: string;\n  }) => void;\n  flowConfig: FlowConfig;\n  showAdvanced?: boolean;\n  dialogParentElement?: HTMLElement;\n  navigateToResult?: boolean;\n}\n\nexport const loadDataEntryFlowDialog = () => import(\"./dialog-data-entry-flow\");\n\nexport const showFlowDialog = (\n  element: HTMLElement,\n  dialogParams: Omit<DataEntryFlowDialogParams, \"flowConfig\">,\n  flowConfig: FlowConfig\n): void => {\n  fireEvent(element, \"show-dialog\", {\n    dialogTag: \"dialog-data-entry-flow\",\n    dialogImport: loadDataEntryFlowDialog,\n    dialogParams: {\n      ...dialogParams,\n      flowConfig,\n      dialogParentElement: element,\n    },\n  });\n};\n"],"names":["createOptionsFlow","hass","handler","_hass$userData","callApi","show_advanced_options","Boolean","userData","showAdvanced","fetchOptionsFlow","flowId","handleOptionsFlowStep","data","deleteOptionsFlow","NONE","_decorate","customElement","_initialize","_LitElement","HaConversationAgentPicker","constructor","args","F","d","kind","decorators","property","key","value","attribute","type","reflect","state","_this$_configEntry","this","_agents","nothing","required","agent","id","supported_languages","includes","language","html","_t","_","label","localize","disabled","_changed","stopPropagation","_t2","map","_t3","length","name","_configEntry","supports_options","_t4","_openOptionsFlow","changedProperties","_superPropGet","hasUpdated","has","_debouncedUpdateAgents","_updateAgents","_maybeFetchConfigEntry","entities","regEntry","getExtendedEntityRegistryEntry","config_entry_id","undefined","getConfigEntry","config_entry","_err","debounce","agents","listAgents","config","country","selectedAgent","find","fireEvent","showOptionsFlowDialog","element","configEntry","dialogParams","manifest","fetchIntegrationManifest","domain","showFlowDialog","Object","assign","startFlowHandler","entry_id","flowType","showDevices","createFlow","async","step","Promise","all","loadFragmentTranslation","loadBackendTranslation","fetchFlow","handleFlowStep","deleteFlow","renderAbortDescription","description","translation_domain","reason","description_placeholders","renderShowFormStepHeader","step_id","renderShowFormStepDescription","renderShowFormStepFieldLabel","field","options","_options$path","prefix","path","renderShowFormStepFieldHelper","_options$path2","renderShowFormStepFieldError","error","renderShowFormStepFieldLocalizeValue","_step","renderShowFormStepSubmitButton","last_step","renderExternalStepHeader","_hass","renderExternalStepDescription","renderCreateEntryDescription","renderShowFormProgressHeader","renderShowFormProgressDescription","progress_action","_t5","renderMenuHeader","renderMenuDescription","_t6","renderMenuOption","option","renderLoadingDescription","integration","domainToName","static","css","ev","_find","target","LitElement","HaConversationAgentSelector","_this$selector$conver","_this$context","selector","conversation_agent","context","helper","ConversationEntityFeature","callWS","getLanguageScores","computeEntityRegistryName","entry","states","entity_id","computeStateName","original_name","entityId","getExtendedEntityRegistryEntries","entityIds","entity_ids","entityRegistryByEntityId","memoizeOne","entries","entity","entityRegistryById","fetchIntegrationManifests","integrations","params","loadDataEntryFlowDialog","flowConfig","dialogTag","dialogImport","dialogParentElement"],"mappings":"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"}