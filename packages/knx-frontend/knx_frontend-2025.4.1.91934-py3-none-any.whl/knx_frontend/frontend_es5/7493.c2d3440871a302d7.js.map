{"version":3,"file":"7493.c2d3440871a302d7.js","sources":["webpack://knx-frontend/item.ts","webpack://knx-frontend/item-styles.ts","webpack://knx-frontend/list-controller.ts","webpack://knx-frontend/list-navigation-helpers.ts","webpack://knx-frontend/src/static.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {html, LitElement} from 'lit';\nimport {property, queryAll} from 'lit/decorators.js';\n\n/**\n * An item layout component.\n */\nexport class Item extends LitElement {\n  /**\n   * Only needed for SSR.\n   *\n   * Add this attribute when an item has two lines to avoid a Flash Of Unstyled\n   * Content. This attribute is not needed for single line items or items with\n   * three or more lines.\n   */\n  @property({type: Boolean, reflect: true}) multiline = false;\n\n  @queryAll('.text slot') private readonly textSlots!: HTMLSlotElement[];\n\n  override render() {\n    return html`\n      <slot name=\"container\"></slot>\n      <slot class=\"non-text\" name=\"start\"></slot>\n      <div class=\"text\">\n        <slot name=\"overline\" @slotchange=${this.handleTextSlotChange}></slot>\n        <slot\n          class=\"default-slot\"\n          @slotchange=${this.handleTextSlotChange}></slot>\n        <slot name=\"headline\" @slotchange=${this.handleTextSlotChange}></slot>\n        <slot\n          name=\"supporting-text\"\n          @slotchange=${this.handleTextSlotChange}></slot>\n      </div>\n      <slot class=\"non-text\" name=\"trailing-supporting-text\"></slot>\n      <slot class=\"non-text\" name=\"end\"></slot>\n    `;\n  }\n\n  private handleTextSlotChange() {\n    // Check if there's more than one text slot with content. If so, the item is\n    // multiline, which has a different min-height than single line items.\n    let isMultiline = false;\n    let slotsWithContent = 0;\n    for (const slot of this.textSlots) {\n      if (slotHasContent(slot)) {\n        slotsWithContent += 1;\n      }\n\n      if (slotsWithContent > 1) {\n        isMultiline = true;\n        break;\n      }\n    }\n\n    this.multiline = isMultiline;\n  }\n}\n\nfunction slotHasContent(slot: HTMLSlotElement) {\n  for (const node of slot.assignedNodes({flatten: true})) {\n    // Assume there's content if there's an element slotted in\n    const isElement = node.nodeType === Node.ELEMENT_NODE;\n    // If there's only text nodes for the default slot, check if there's\n    // non-whitespace.\n    const isTextWithContent =\n      node.nodeType === Node.TEXT_NODE && node.textContent?.match(/\\S/);\n    if (isElement || isTextWithContent) {\n      return true;\n    }\n  }\n\n  return false;\n}\n","/**\n * @license\n * Copyright 2024 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n// Generated stylesheet for ./labs/item/internal/item-styles.css.\nimport {css} from 'lit';\nexport const styles = css`:host{color:var(--md-sys-color-on-surface, #1d1b20);font-family:var(--md-sys-typescale-body-large-font, var(--md-ref-typeface-plain, Roboto));font-size:var(--md-sys-typescale-body-large-size, 1rem);font-weight:var(--md-sys-typescale-body-large-weight, var(--md-ref-typeface-weight-regular, 400));line-height:var(--md-sys-typescale-body-large-line-height, 1.5rem);align-items:center;box-sizing:border-box;display:flex;gap:16px;min-height:56px;overflow:hidden;padding:12px 16px;position:relative;text-overflow:ellipsis}:host([multiline]){min-height:72px}[name=overline]{color:var(--md-sys-color-on-surface-variant, #49454f);font-family:var(--md-sys-typescale-label-small-font, var(--md-ref-typeface-plain, Roboto));font-size:var(--md-sys-typescale-label-small-size, 0.6875rem);font-weight:var(--md-sys-typescale-label-small-weight, var(--md-ref-typeface-weight-medium, 500));line-height:var(--md-sys-typescale-label-small-line-height, 1rem)}[name=supporting-text]{color:var(--md-sys-color-on-surface-variant, #49454f);font-family:var(--md-sys-typescale-body-medium-font, var(--md-ref-typeface-plain, Roboto));font-size:var(--md-sys-typescale-body-medium-size, 0.875rem);font-weight:var(--md-sys-typescale-body-medium-weight, var(--md-ref-typeface-weight-regular, 400));line-height:var(--md-sys-typescale-body-medium-line-height, 1.25rem)}[name=trailing-supporting-text]{color:var(--md-sys-color-on-surface-variant, #49454f);font-family:var(--md-sys-typescale-label-small-font, var(--md-ref-typeface-plain, Roboto));font-size:var(--md-sys-typescale-label-small-size, 0.6875rem);font-weight:var(--md-sys-typescale-label-small-weight, var(--md-ref-typeface-weight-medium, 500));line-height:var(--md-sys-typescale-label-small-line-height, 1rem)}[name=container]::slotted(*){inset:0;position:absolute}.default-slot{display:inline}.default-slot,.text ::slotted(*){overflow:hidden;text-overflow:ellipsis}.text{display:flex;flex:1;flex-direction:column;overflow:hidden}\n`;\n","/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {\n  activateFirstItem,\n  activateLastItem,\n  activateNextItem,\n  activatePreviousItem,\n  getActiveItem,\n  getFirstActivatableItem,\n  ListItem,\n} from './list-navigation-helpers.js';\n\n// TODO: move this file to List and make List use this\n\n/**\n * Default keys that trigger navigation.\n */\n// tslint:disable:enforce-name-casing Following Enum style\nexport const NavigableKeys = {\n  ArrowDown: 'ArrowDown',\n  ArrowLeft: 'ArrowLeft',\n  ArrowUp: 'ArrowUp',\n  ArrowRight: 'ArrowRight',\n  Home: 'Home',\n  End: 'End',\n} as const;\n// tslint:enable:enforce-name-casing\n\n/**\n * Default set of navigable keys.\n */\nexport type NavigableKeys = (typeof NavigableKeys)[keyof typeof NavigableKeys];\n\n/**\n * The configuration object to customize the behavior of the List Controller\n */\nexport interface ListControllerConfig<Item extends ListItem> {\n  /**\n   * A function that determines whether or not the given element is an Item\n   */\n  isItem: (item: HTMLElement) => item is Item;\n  /**\n   * A function that returns an array of elements to consider as items. For\n   * example, all the slotted elements.\n   */\n  getPossibleItems: () => HTMLElement[];\n  /**\n   * A function that returns whether or not the list is in an RTL context.\n   */\n  isRtl: () => boolean;\n  /**\n   * Deactivates an item such as setting the tabindex to -1 and or sets selected\n   * to false.\n   */\n  deactivateItem: (item: Item) => void;\n  /**\n   * Activates an item such as setting the tabindex to 1 and or sets selected to\n   * true (but does not focus).\n   */\n  activateItem: (item: Item) => void;\n  /**\n   * Whether or not the key should be handled by the list for navigation.\n   */\n  isNavigableKey: (key: string) => boolean;\n  /**\n   * Whether or not the item can be activated. Defaults to items that are not\n   * disabled.\n   */\n  isActivatable?: (item: Item) => boolean;\n  /**\n   * Whether or not navigating past the end of the list wraps to the beginning\n   * and vice versa. Defaults to true.\n   */\n  wrapNavigation?: () => boolean;\n}\n\n/**\n * A controller that handles list keyboard navigation and item management.\n */\nexport class ListController<Item extends ListItem> {\n  isItem: (item: HTMLElement) => item is Item;\n  private readonly getPossibleItems: () => HTMLElement[];\n  private readonly isRtl: () => boolean;\n  private readonly deactivateItem: (item: Item) => void;\n  private readonly activateItem: (item: Item) => void;\n  private readonly isNavigableKey: (key: string) => boolean;\n  private readonly isActivatable?: (item: Item) => boolean;\n  private readonly wrapNavigation: () => boolean;\n\n  constructor(config: ListControllerConfig<Item>) {\n    const {\n      isItem,\n      getPossibleItems,\n      isRtl,\n      deactivateItem,\n      activateItem,\n      isNavigableKey,\n      isActivatable,\n      wrapNavigation,\n    } = config;\n    this.isItem = isItem;\n    this.getPossibleItems = getPossibleItems;\n    this.isRtl = isRtl;\n    this.deactivateItem = deactivateItem;\n    this.activateItem = activateItem;\n    this.isNavigableKey = isNavigableKey;\n    this.isActivatable = isActivatable;\n    this.wrapNavigation = wrapNavigation ?? (() => true);\n  }\n\n  /**\n   * The items being managed by the list. Additionally, attempts to see if the\n   * object has a sub-item in the `.item` property.\n   */\n  get items(): Item[] {\n    const maybeItems = this.getPossibleItems();\n    const items: Item[] = [];\n\n    for (const itemOrParent of maybeItems) {\n      const isItem = this.isItem(itemOrParent);\n      // if the item is a list item, add it to the list of items\n      if (isItem) {\n        items.push(itemOrParent);\n        continue;\n      }\n\n      // If the item exposes an `item` property check if it is a list item.\n      const subItem = (itemOrParent as HTMLElement & {item?: Item}).item;\n      if (subItem && this.isItem(subItem)) {\n        items.push(subItem);\n      }\n    }\n\n    return items;\n  }\n\n  /**\n   * Handles keyboard navigation. Should be bound to the node that will act as\n   * the List.\n   */\n  handleKeydown = (event: KeyboardEvent) => {\n    const key = event.key;\n    if (event.defaultPrevented || !this.isNavigableKey(key)) {\n      return;\n    }\n    // do not use this.items directly in upcoming calculations so we don't\n    // re-query the DOM unnecessarily\n    const items = this.items;\n\n    if (!items.length) {\n      return;\n    }\n\n    const activeItemRecord = getActiveItem(items, this.isActivatable);\n\n    event.preventDefault();\n\n    const isRtl = this.isRtl();\n    const inlinePrevious = isRtl\n      ? NavigableKeys.ArrowRight\n      : NavigableKeys.ArrowLeft;\n    const inlineNext = isRtl\n      ? NavigableKeys.ArrowLeft\n      : NavigableKeys.ArrowRight;\n\n    let nextActiveItem: Item | null = null;\n    switch (key) {\n      // Activate the next item\n      case NavigableKeys.ArrowDown:\n      case inlineNext:\n        nextActiveItem = activateNextItem(\n          items,\n          activeItemRecord,\n          this.isActivatable,\n          this.wrapNavigation(),\n        );\n        break;\n\n      // Activate the previous item\n      case NavigableKeys.ArrowUp:\n      case inlinePrevious:\n        nextActiveItem = activatePreviousItem(\n          items,\n          activeItemRecord,\n          this.isActivatable,\n          this.wrapNavigation(),\n        );\n        break;\n\n      // Activate the first item\n      case NavigableKeys.Home:\n        nextActiveItem = activateFirstItem(items, this.isActivatable);\n        break;\n\n      // Activate the last item\n      case NavigableKeys.End:\n        nextActiveItem = activateLastItem(items, this.isActivatable);\n        break;\n\n      default:\n        break;\n    }\n\n    if (\n      nextActiveItem &&\n      activeItemRecord &&\n      activeItemRecord.item !== nextActiveItem\n    ) {\n      // If a new item was activated, remove the tabindex of the previous\n      // activated item.\n      activeItemRecord.item.tabIndex = -1;\n    }\n  };\n\n  /**\n   * Activates the next item in the list. If at the end of the list, the first\n   * item will be activated.\n   *\n   * @return The activated list item or `null` if there are no items.\n   */\n  activateNextItem(): Item | null {\n    const items = this.items;\n    const activeItemRecord = getActiveItem(items, this.isActivatable);\n    if (activeItemRecord) {\n      activeItemRecord.item.tabIndex = -1;\n    }\n    return activateNextItem(\n      items,\n      activeItemRecord,\n      this.isActivatable,\n      this.wrapNavigation(),\n    );\n  }\n\n  /**\n   * Activates the previous item in the list. If at the start of the list, the\n   * last item will be activated.\n   *\n   * @return The activated list item or `null` if there are no items.\n   */\n  activatePreviousItem(): Item | null {\n    const items = this.items;\n    const activeItemRecord = getActiveItem(items, this.isActivatable);\n    if (activeItemRecord) {\n      activeItemRecord.item.tabIndex = -1;\n    }\n    return activatePreviousItem(\n      items,\n      activeItemRecord,\n      this.isActivatable,\n      this.wrapNavigation(),\n    );\n  }\n\n  /**\n   * Listener to be bound to the `deactivate-items` item event.\n   */\n  onDeactivateItems = () => {\n    const items = this.items;\n\n    for (const item of items) {\n      this.deactivateItem(item);\n    }\n  };\n\n  /**\n   * Listener to be bound to the `request-activation` item event..\n   */\n  onRequestActivation = (event: Event) => {\n    this.onDeactivateItems();\n    const target = event.target as Item;\n    this.activateItem(target);\n    target.focus();\n  };\n\n  /**\n   * Listener to be bound to the `slotchange` event for the slot that renders\n   * the items.\n   */\n  onSlotchange = () => {\n    const items = this.items;\n    // Whether we have encountered an item that has been activated\n    let encounteredActivated = false;\n\n    for (const item of items) {\n      const isActivated = !item.disabled && item.tabIndex > -1;\n\n      if (isActivated && !encounteredActivated) {\n        encounteredActivated = true;\n        item.tabIndex = 0;\n        continue;\n      }\n\n      // Deactivate the rest including disabled\n      item.tabIndex = -1;\n    }\n\n    if (encounteredActivated) {\n      return;\n    }\n\n    const firstActivatableItem = getFirstActivatableItem(\n      items,\n      this.isActivatable,\n    );\n\n    if (!firstActivatableItem) {\n      return;\n    }\n\n    firstActivatableItem.tabIndex = 0;\n  };\n}\n","/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport interface ListItem extends HTMLElement {\n  disabled: boolean;\n}\n\n/**\n * A record that describes a list item in a list with metadata such a reference\n * to the item and its index in the list.\n */\nexport interface ItemRecord<Item extends ListItem> {\n  item: Item;\n  index: number;\n}\n\n/**\n * Activates the first non-disabled item of a given array of items.\n *\n * @param items {Array<ListItem>} The items from which to activate the\n *     first item.\n * @param isActivatable Function to determine if an item can be  activated.\n *     Defaults to non-disabled items.\n */\nexport function activateFirstItem<Item extends ListItem>(\n  items: Item[],\n  isActivatable = isItemNotDisabled<Item>,\n) {\n  // NOTE: These selector functions are static and not on the instance such\n  // that multiple operations can be chained and we do not have to re-query\n  // the DOM\n  const firstItem = getFirstActivatableItem(items, isActivatable);\n  if (firstItem) {\n    firstItem.tabIndex = 0;\n    firstItem.focus();\n  }\n  return firstItem;\n}\n\n/**\n * Activates the last non-disabled item of a given array of items.\n *\n * @param items {Array<ListItem>} The items from which to activate the\n *     last item.\n * @param isActivatable Function to determine if an item can be  activated.\n *     Defaults to non-disabled items.\n * @nocollapse\n */\nexport function activateLastItem<Item extends ListItem>(\n  items: Item[],\n  isActivatable = isItemNotDisabled<Item>,\n) {\n  const lastItem = getLastActivatableItem(items, isActivatable);\n  if (lastItem) {\n    lastItem.tabIndex = 0;\n    lastItem.focus();\n  }\n  return lastItem;\n}\n\n/**\n * Deactivates the currently active item of a given array of items.\n *\n * @param items {Array<ListItem>} The items from which to deactivate the\n *     active item.\n * @param isActivatable Function to determine if an item can be  activated.\n *     Defaults to non-disabled items.\n * @return A record of the deleselcted activated item including the item and\n *     the index of the item or `null` if none are deactivated.\n * @nocollapse\n */\nexport function deactivateActiveItem<Item extends ListItem>(\n  items: Item[],\n  isActivatable = isItemNotDisabled<Item>,\n) {\n  const activeItem = getActiveItem(items, isActivatable);\n  if (activeItem) {\n    activeItem.item.tabIndex = -1;\n  }\n  return activeItem;\n}\n\n/**\n * Retrieves the first activated item of a given array of items.\n *\n * @param items {Array<ListItem>} The items to search.\n * @param isActivatable Function to determine if an item can be  activated.\n *     Defaults to non-disabled items.\n * @return A record of the first activated item including the item and the\n *     index of the item or `null` if none are activated.\n * @nocollapse\n */\nexport function getActiveItem<Item extends ListItem>(\n  items: Item[],\n  isActivatable = isItemNotDisabled<Item>,\n) {\n  for (let i = 0; i < items.length; i++) {\n    const item = items[i];\n    if (item.tabIndex === 0 && isActivatable(item)) {\n      return {\n        item,\n        index: i,\n      } as ItemRecord<Item>;\n    }\n  }\n  return null;\n}\n\n/**\n * Retrieves the first non-disabled item of a given array of items. This\n * the first item that is not disabled.\n *\n * @param items {Array<ListItem>} The items to search.\n * @param isActivatable Function to determine if an item can be  activated.\n *     Defaults to non-disabled items.\n * @return The first activatable item or `null` if none are activatable.\n * @nocollapse\n */\nexport function getFirstActivatableItem<Item extends ListItem>(\n  items: Item[],\n  isActivatable = isItemNotDisabled<Item>,\n) {\n  for (const item of items) {\n    if (isActivatable(item)) {\n      return item;\n    }\n  }\n\n  return null;\n}\n\n/**\n * Retrieves the last non-disabled item of a given array of items.\n *\n * @param items {Array<ListItem>} The items to search.\n * @param isActivatable Function to determine if an item can be  activated.\n *     Defaults to non-disabled items.\n * @return The last activatable item or `null` if none are activatable.\n * @nocollapse\n */\nexport function getLastActivatableItem<Item extends ListItem>(\n  items: Item[],\n  isActivatable = isItemNotDisabled<Item>,\n) {\n  for (let i = items.length - 1; i >= 0; i--) {\n    const item = items[i];\n    if (isActivatable(item)) {\n      return item;\n    }\n  }\n\n  return null;\n}\n\n/**\n * Retrieves the next non-disabled item of a given array of items.\n *\n * @param items {Array<ListItem>} The items to search.\n * @param index {{index: number}} The index to search from.\n * @param isActivatable Function to determine if an item can be  activated.\n *     Defaults to non-disabled items.\n * @param wrap If true, then the next item at the end of the list is the first\n *     item. Defaults to true.\n * @return The next activatable item or `null` if none are activatable.\n */\nexport function getNextItem<Item extends ListItem>(\n  items: Item[],\n  index: number,\n  isActivatable = isItemNotDisabled<Item>,\n  wrap = true,\n) {\n  for (let i = 1; i < items.length; i++) {\n    const nextIndex = (i + index) % items.length;\n    if (nextIndex < index && !wrap) {\n      // Return if the index loops back to the beginning and not wrapping.\n      return null;\n    }\n\n    const item = items[nextIndex];\n    if (isActivatable(item)) {\n      return item;\n    }\n  }\n\n  return items[index] ? items[index] : null;\n}\n\n/**\n * Retrieves the previous non-disabled item of a given array of items.\n *\n * @param items {Array<ListItem>} The items to search.\n * @param index {{index: number}} The index to search from.\n * @param isActivatable Function to determine if an item can be  activated.\n *     Defaults to non-disabled items.\n * @param wrap If true, then the previous item at the beginning of the list is\n *     the last item. Defaults to true.\n * @return The previous activatable item or `null` if none are activatable.\n */\nexport function getPrevItem<Item extends ListItem>(\n  items: Item[],\n  index: number,\n  isActivatable = isItemNotDisabled<Item>,\n  wrap = true,\n) {\n  for (let i = 1; i < items.length; i++) {\n    const prevIndex = (index - i + items.length) % items.length;\n    if (prevIndex > index && !wrap) {\n      // Return if the index loops back to the end and not wrapping.\n      return null;\n    }\n\n    const item = items[prevIndex];\n\n    if (isActivatable(item)) {\n      return item;\n    }\n  }\n\n  return items[index] ? items[index] : null;\n}\n\n/**\n * Activates the next item and focuses it. If nothing is currently activated,\n * activates the first item.\n */\nexport function activateNextItem<Item extends ListItem>(\n  items: Item[],\n  activeItemRecord: null | ItemRecord<Item>,\n  isActivatable = isItemNotDisabled<Item>,\n  wrap = true,\n): Item | null {\n  if (activeItemRecord) {\n    const next = getNextItem(\n      items,\n      activeItemRecord.index,\n      isActivatable,\n      wrap,\n    );\n\n    if (next) {\n      next.tabIndex = 0;\n      next.focus();\n    }\n\n    return next;\n  } else {\n    return activateFirstItem(items, isActivatable);\n  }\n}\n\n/**\n * Activates the previous item and focuses it. If nothing is currently\n * activated, activates the last item.\n */\nexport function activatePreviousItem<Item extends ListItem>(\n  items: Item[],\n  activeItemRecord: null | ItemRecord<Item>,\n  isActivatable = isItemNotDisabled<Item>,\n  wrap = true,\n): Item | null {\n  if (activeItemRecord) {\n    const prev = getPrevItem(\n      items,\n      activeItemRecord.index,\n      isActivatable,\n      wrap,\n    );\n    if (prev) {\n      prev.tabIndex = 0;\n      prev.focus();\n    }\n    return prev;\n  } else {\n    return activateLastItem(items, isActivatable);\n  }\n}\n\n/**\n * Creates an event that requests the parent md-list to deactivate all other\n * items.\n */\nexport function createDeactivateItemsEvent() {\n  return new Event('deactivate-items', {bubbles: true, composed: true});\n}\n\n/**\n * The type of the event that requests the parent md-list to deactivate all\n * other items.\n */\nexport type DeactivateItemsEvent = ReturnType<\n  typeof createDeactivateItemsEvent\n>;\n\n/**\n * Creates an event that requests the menu to set `tabindex=0` on the item and\n * focus it. We use this pattern because List keeps track of what element is\n * active in the List by maintaining tabindex. We do not want list items\n * to set tabindex on themselves or focus themselves so that we can organize all\n * that logic in the parent List and Menus, and list item stays as dumb as\n * possible.\n */\nexport function createRequestActivationEvent() {\n  return new Event('request-activation', {bubbles: true, composed: true});\n}\n\n/**\n * The type of the event that requests the list activates and focuses the item.\n */\nexport type RequestActivationEvent = ReturnType<\n  typeof createRequestActivationEvent\n>;\n\n/**\n * The default `isActivatable` function, which checks if an item is not\n * disabled.\n *\n * @param item The item to check.\n * @return true if `item.disabled` is `false.\n */\nfunction isItemNotDisabled<Item extends ListItem>(item: Item) {\n  return !item.disabled;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n// Any new exports need to be added to the export statement in\n// `packages/lit/src/index.all.ts`.\n\nimport {html as coreHtml, svg as coreSvg, TemplateResult} from './lit-html.js';\n\nexport interface StaticValue {\n  /** The value to interpolate as-is into the template. */\n  _$litStatic$: string;\n\n  /**\n   * A value that can't be decoded from ordinary JSON, make it harder for\n   * a attacker-controlled data that goes through JSON.parse to produce a valid\n   * StaticValue.\n   */\n  r: typeof brand;\n}\n\n/**\n * Prevents JSON injection attacks.\n *\n * The goals of this brand:\n *   1) fast to check\n *   2) code is small on the wire\n *   3) multiple versions of Lit in a single page will all produce mutually\n *      interoperable StaticValues\n *   4) normal JSON.parse (without an unusual reviver) can not produce a\n *      StaticValue\n *\n * Symbols satisfy (1), (2), and (4). We use Symbol.for to satisfy (3), but\n * we don't care about the key, so we break ties via (2) and use the empty\n * string.\n */\nconst brand = Symbol.for('');\n\n/** Safely extracts the string part of a StaticValue. */\nconst unwrapStaticValue = (value: unknown): string | undefined => {\n  if ((value as Partial<StaticValue>)?.r !== brand) {\n    return undefined;\n  }\n  return (value as Partial<StaticValue>)?.['_$litStatic$'];\n};\n\n/**\n * Wraps a string so that it behaves like part of the static template\n * strings instead of a dynamic value.\n *\n * Users must take care to ensure that adding the static string to the template\n * results in well-formed HTML, or else templates may break unexpectedly.\n *\n * Note that this function is unsafe to use on untrusted content, as it will be\n * directly parsed into HTML. Do not pass user input to this function\n * without sanitizing it.\n *\n * Static values can be changed, but they will cause a complete re-render\n * since they effectively create a new template.\n */\nexport const unsafeStatic = (value: string): StaticValue => ({\n  ['_$litStatic$']: value,\n  r: brand,\n});\n\nconst textFromStatic = (value: StaticValue) => {\n  if (value['_$litStatic$'] !== undefined) {\n    return value['_$litStatic$'];\n  } else {\n    throw new Error(\n      `Value passed to 'literal' function must be a 'literal' result: ${value}. Use 'unsafeStatic' to pass non-literal values, but\n            take care to ensure page security.`\n    );\n  }\n};\n\n/**\n * Tags a string literal so that it behaves like part of the static template\n * strings instead of a dynamic value.\n *\n * The only values that may be used in template expressions are other tagged\n * `literal` results or `unsafeStatic` values (note that untrusted content\n * should never be passed to `unsafeStatic`).\n *\n * Users must take care to ensure that adding the static string to the template\n * results in well-formed HTML, or else templates may break unexpectedly.\n *\n * Static values can be changed, but they will cause a complete re-render since\n * they effectively create a new template.\n */\nexport const literal = (\n  strings: TemplateStringsArray,\n  ...values: unknown[]\n): StaticValue => ({\n  ['_$litStatic$']: values.reduce(\n    (acc, v, idx) => acc + textFromStatic(v as StaticValue) + strings[idx + 1],\n    strings[0]\n  ) as string,\n  r: brand,\n});\n\nconst stringsCache = new Map<string, TemplateStringsArray>();\n\n/**\n * Wraps a lit-html template tag (`html` or `svg`) to add static value support.\n */\nexport const withStatic =\n  (coreTag: typeof coreHtml | typeof coreSvg) =>\n  (strings: TemplateStringsArray, ...values: unknown[]): TemplateResult => {\n    const l = values.length;\n    let staticValue: string | undefined;\n    let dynamicValue: unknown;\n    const staticStrings: Array<string> = [];\n    const dynamicValues: Array<unknown> = [];\n    let i = 0;\n    let hasStatics = false;\n    let s: string;\n\n    while (i < l) {\n      s = strings[i];\n      // Collect any unsafeStatic values, and their following template strings\n      // so that we treat a run of template strings and unsafe static values as\n      // a single template string.\n      while (\n        i < l &&\n        ((dynamicValue = values[i]),\n        (staticValue = unwrapStaticValue(dynamicValue))) !== undefined\n      ) {\n        s += staticValue + strings[++i];\n        hasStatics = true;\n      }\n      // If the last value is static, we don't need to push it.\n      if (i !== l) {\n        dynamicValues.push(dynamicValue);\n      }\n      staticStrings.push(s);\n      i++;\n    }\n    // If the last value isn't static (which would have consumed the last\n    // string), then we need to add the last string.\n    if (i === l) {\n      staticStrings.push(strings[l]);\n    }\n\n    if (hasStatics) {\n      const key = staticStrings.join('$$lit$$');\n      strings = stringsCache.get(key)!;\n      if (strings === undefined) {\n        // Beware: in general this pattern is unsafe, and doing so may bypass\n        // lit's security checks and allow an attacker to execute arbitrary\n        // code and inject arbitrary content.\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        (staticStrings as any).raw = staticStrings;\n        stringsCache.set(\n          key,\n          (strings = staticStrings as unknown as TemplateStringsArray)\n        );\n      }\n      values = dynamicValues;\n    }\n    return coreTag(strings, ...values);\n  };\n\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n *\n * Includes static value support from `lit-html/static.js`.\n */\nexport const html = withStatic(coreHtml);\n\n/**\n * Interprets a template literal as an SVG template that can efficiently\n * render to and update a container.\n *\n * Includes static value support from `lit-html/static.js`.\n */\nexport const svg = withStatic(coreSvg);\n"],"names":["Item","LitElement","constructor","multiline","render","html","_t","_","this","handleTextSlotChange","isMultiline","slotsWithContent","slot","textSlots","slotHasContent","node","assignedNodes","flatten","_node$textContent","isElement","nodeType","Node","ELEMENT_NODE","isTextWithContent","TEXT_NODE","textContent","match","__decorate","property","type","Boolean","reflect","queryAll","styles","css","MdItem","customElement","NavigableKeys","ArrowDown","ArrowLeft","ArrowUp","ArrowRight","Home","End","ListController","config","handleKeydown","event","key","defaultPrevented","isNavigableKey","items","length","activeItemRecord","getActiveItem","isActivatable","preventDefault","isRtl","inlinePrevious","inlineNext","nextActiveItem","activateNextItem","wrapNavigation","activatePreviousItem","activateFirstItem","activateLastItem","item","tabIndex","onDeactivateItems","deactivateItem","onRequestActivation","target","activateItem","focus","onSlotchange","encounteredActivated","disabled","firstActivatableItem","getFirstActivatableItem","isItem","getPossibleItems","maybeItems","itemOrParent","push","subItem","isItemNotDisabled","firstItem","lastItem","getLastActivatableItem","i","index","wrap","next","nextIndex","getNextItem","prev","prevIndex","getPrevItem","createRequestActivationEvent","Event","bubbles","composed","e","Symbol","for","l","t","r","_$litStatic$","literal","reduce","Error","s","Map","a","o","n","u","c","$","f","join","get","raw","set"],"mappings":"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"}