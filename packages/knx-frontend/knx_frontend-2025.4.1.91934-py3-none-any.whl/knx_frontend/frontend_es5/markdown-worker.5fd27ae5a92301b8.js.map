{"version":3,"file":"markdown-worker.5fd27ae5a92301b8.js","sources":["webpack://knx-frontend/./homeassistant-frontend/src/resources/markdown-worker.ts"],"sourcesContent":["import { expose } from \"comlink\";\nimport type { MarkedOptions } from \"marked\";\nimport { marked } from \"marked\";\nimport type { IWhiteList } from \"xss\";\nimport { filterXSS, getDefaultWhiteList } from \"xss\";\n\nlet whiteListNormal: IWhiteList | undefined;\nlet whiteListSvg: IWhiteList | undefined;\n\n// Override the default `onTagAttr` behavior to only render\n// our markdown checkboxes.\n// Returning undefined causes the default measure to be taken\n// in the xss library.\nconst onTagAttr = (\n  tag: string,\n  name: string,\n  value: string\n): string | undefined => {\n  if (tag === \"input\") {\n    if (\n      (name === \"type\" && value === \"checkbox\") ||\n      name === \"checked\" ||\n      name === \"disabled\"\n    ) {\n      return undefined;\n    }\n    return \"\";\n  }\n  return undefined;\n};\n\nconst renderMarkdown = async (\n  content: string,\n  markedOptions: MarkedOptions,\n  hassOptions: {\n    // Do not allow SVG on untrusted content, it allows XSS.\n    allowSvg?: boolean;\n  } = {}\n): Promise<string> => {\n  if (!whiteListNormal) {\n    whiteListNormal = {\n      ...getDefaultWhiteList(),\n      input: [\"type\", \"disabled\", \"checked\"],\n      \"ha-icon\": [\"icon\"],\n      \"ha-svg-icon\": [\"path\"],\n      \"ha-alert\": [\"alert-type\", \"title\"],\n      \"ha-qr-code\": [\n        \"data\",\n        \"scale\",\n        \"width\",\n        \"margin\",\n        \"error-correction-level\",\n        \"center-image\",\n      ],\n    };\n  }\n\n  let whiteList: IWhiteList | undefined;\n\n  if (hassOptions.allowSvg) {\n    if (!whiteListSvg) {\n      whiteListSvg = {\n        ...whiteListNormal,\n        svg: [\"xmlns\", \"height\", \"width\"],\n        path: [\"transform\", \"stroke\", \"d\"],\n        img: [\"src\"],\n      };\n    }\n    whiteList = whiteListSvg;\n  } else {\n    whiteList = whiteListNormal;\n  }\n\n  return filterXSS(await marked(content, markedOptions), {\n    whiteList,\n    onTagAttr,\n  });\n};\n\nconst api = {\n  renderMarkdown,\n};\n\nexport type Api = typeof api;\n\nexpose(api);\n"],"names":["whiteListNormal","whiteListSvg","onTagAttr","tag","name","value","api","renderMarkdown","async","content","markedOptions","hassOptions","whiteList","Object","assign","getDefaultWhiteList","input","allowSvg","svg","path","img","filterXSS","marked","expose"],"mappings":"0GAMA,IAAIA,EACAC,EAMJ,MAAMC,EAAYA,CAChBC,EACAC,EACAC,KAEA,GAAY,UAARF,EAAiB,CACnB,GACY,SAATC,GAA6B,aAAVC,GACX,YAATD,GACS,aAATA,EAEA,OAEF,MAAO,EACT,CACgB,EAmDZE,EAAM,CACVC,eAjDqBC,MACrBC,EACAC,EACAC,EAGI,CAAC,KAoBL,IAAIC,EAgBJ,OAlCKZ,IACHA,EAAea,OAAAC,OAAAD,OAAAC,OAAA,IACVC,EAAAA,EAAAA,wBAAqB,IACxBC,MAAO,CAAC,OAAQ,WAAY,WAC5B,UAAW,CAAC,QACZ,cAAe,CAAC,QAChB,WAAY,CAAC,aAAc,SAC3B,aAAc,CACZ,OACA,QACA,QACA,SACA,yBACA,mBAOFL,EAAYM,UACThB,IACHA,EAAYY,OAAAC,OAAAD,OAAAC,OAAA,GACPd,GAAe,IAClBkB,IAAK,CAAC,QAAS,SAAU,SACzBC,KAAM,CAAC,YAAa,SAAU,KAC9BC,IAAK,CAAC,UAGVR,EAAYX,GAEZW,EAAYZ,GAGPqB,EAAAA,EAAAA,iBAAgBC,EAAAA,EAAAA,IAAOb,EAASC,GAAgB,CACrDE,YACAV,aACA,IASJqB,EAAAA,EAAAA,IAAOjB,E"}