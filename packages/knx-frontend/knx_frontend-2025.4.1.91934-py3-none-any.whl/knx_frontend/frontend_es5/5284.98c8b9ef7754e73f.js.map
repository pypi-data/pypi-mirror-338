{"version":3,"file":"5284.98c8b9ef7754e73f.js","sources":["webpack://knx-frontend/mwc-checkbox.ts","webpack://knx-frontend/mwc-check-list-item-base.ts","webpack://knx-frontend/mwc-control-list-item.css.ts","webpack://knx-frontend/menuItemController.ts","webpack://knx-frontend/menu-item.ts","webpack://knx-frontend/menu-item-styles.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n// Style preference for leading underscores.\n// tslint:disable:strip-private-property-underscore\n\nimport {customElement} from 'lit/decorators.js';\n\nimport {CheckboxBase} from './mwc-checkbox-base.js';\nimport {styles} from './mwc-checkbox.css.js';\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'mwc-checkbox': Checkbox;\n  }\n}\n\n/** @soyCompatible */\n@customElement('mwc-checkbox')\nexport class Checkbox extends CheckboxBase {\n  static override styles = [styles];\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n// Style preference for leading underscores.\n// tslint:disable:strip-private-property-underscore\n\n\nimport '@material/mwc-checkbox/mwc-checkbox.js';\n\nimport {Checkbox} from '@material/mwc-checkbox/mwc-checkbox.js';\nimport {html} from 'lit';\nimport {property, query} from 'lit/decorators.js';\nimport {classMap} from 'lit/directives/class-map.js';\n\nimport {GraphicType, ListItemBase} from './mwc-list-item-base.js';\n\nexport class CheckListItemBase extends ListItemBase {\n  @query('slot') protected override slotElement!: HTMLSlotElement|null;\n  @query('mwc-checkbox') protected checkboxElement!: Checkbox;\n\n  @property({type: Boolean}) left = false;\n  @property({type: String, reflect: true})\n  override graphic: GraphicType = 'control';\n\n  override render() {\n    const checkboxClasses = {\n      'mdc-deprecated-list-item__graphic': this.left,\n      'mdc-deprecated-list-item__meta': !this.left,\n    };\n\n    const text = this.renderText();\n    const graphic = this.graphic && this.graphic !== 'control' && !this.left ?\n        this.renderGraphic() :\n        html``;\n    const meta = this.hasMeta && this.left ? this.renderMeta() : html``;\n    const ripple = this.renderRipple();\n\n    return html`\n      ${ripple}\n      ${graphic}\n      ${this.left ? '' : text}\n      <span class=${classMap(checkboxClasses)}>\n        <mwc-checkbox\n            reducedTouchTarget\n            tabindex=${this.tabindex}\n            .checked=${this.selected}\n            ?disabled=${this.disabled}\n            @change=${this.onChange}>\n        </mwc-checkbox>\n      </span>\n      ${this.left ? text : ''}\n      ${meta}`;\n  }\n\n  protected async onChange(evt: Event) {\n    const checkbox = evt.target as Checkbox;\n    const changeFromProp = this.selected === checkbox.checked;\n\n    if (!changeFromProp) {\n      this._skipPropRequest = true;\n      this.selected = checkbox.checked;\n      await this.updateComplete;\n      this._skipPropRequest = false;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-LIcense-Identifier: Apache-2.0\n */\nimport {css} from 'lit';\nexport const styles = css`:host(:not([twoline])){height:56px}:host(:not([left])) .mdc-deprecated-list-item__meta{height:40px;width:40px}`;\n","/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {ReactiveController, ReactiveControllerHost} from 'lit';\n\nimport {\n  CloseReason,\n  createDefaultCloseMenuEvent,\n  isClosableKey,\n} from './shared.js';\n\n/**\n * Interface specific to menu item and not HTMLElement.\n *\n * NOTE: required properties are expected to be reactive.\n */\ninterface MenuItemAdditions {\n  /**\n   * Whether or not the item is in the disabled state.\n   */\n  disabled: boolean;\n  /**\n   * The text of the item that will be used for typeahead. If not set, defaults\n   * to the textContent of the element slotted into the headline.\n   */\n  typeaheadText: string;\n  /**\n   * Whether or not the item is in the selected visual state.\n   */\n  selected: boolean;\n  /**\n   * Sets the behavior and role of the menu item, defaults to \"menuitem\".\n   */\n  type: MenuItemType;\n  /**\n   * Whether it should keep the menu open after click.\n   */\n  keepOpen?: boolean;\n  /**\n   * Sets the underlying `HTMLAnchorElement`'s `href` resource attribute.\n   */\n  href?: string;\n  /**\n   * Focuses the item.\n   */\n  focus: () => void;\n}\n\n/**\n * The interface of every menu item interactive with a menu. All menu items\n * should implement this interface to be compatible with md-menu. Additionally\n * it should have the `md-menu-item` attribute set.\n *\n * NOTE, the required properties are recommended to be reactive properties.\n */\nexport type MenuItem = MenuItemAdditions & HTMLElement;\n\n/**\n * Supported behaviors for a menu item.\n */\nexport type MenuItemType = 'menuitem' | 'option' | 'button' | 'link';\n\n/**\n * The options used to inialize MenuItemController.\n */\nexport interface MenuItemControllerConfig {\n  /**\n   * A function that returns the headline element of the menu item.\n   */\n  getHeadlineElements: () => HTMLElement[];\n\n  /**\n   * A function that returns the supporting-text element of the menu item.\n   */\n  getSupportingTextElements: () => HTMLElement[];\n\n  /**\n   * A function that returns the default slot / misc content.\n   */\n  getDefaultElements: () => Node[];\n\n  /**\n   * The HTML Element that accepts user interactions like click. Used for\n   * occasions like programmatically clicking anchor tags when `Enter` is\n   * pressed.\n   */\n  getInteractiveElement: () => HTMLElement | null;\n}\n\n/**\n * A controller that provides most functionality of an element that implements\n * the MenuItem interface.\n */\nexport class MenuItemController implements ReactiveController {\n  private internalTypeaheadText: string | null = null;\n  private readonly getHeadlineElements: MenuItemControllerConfig['getHeadlineElements'];\n  private readonly getSupportingTextElements: MenuItemControllerConfig['getSupportingTextElements'];\n  private readonly getDefaultElements: MenuItemControllerConfig['getDefaultElements'];\n  private readonly getInteractiveElement: MenuItemControllerConfig['getInteractiveElement'];\n\n  /**\n   * @param host The MenuItem in which to attach this controller to.\n   * @param config The object that configures this controller's behavior.\n   */\n  constructor(\n    private readonly host: ReactiveControllerHost & MenuItem,\n    config: MenuItemControllerConfig,\n  ) {\n    this.getHeadlineElements = config.getHeadlineElements;\n    this.getSupportingTextElements = config.getSupportingTextElements;\n    this.getDefaultElements = config.getDefaultElements;\n    this.getInteractiveElement = config.getInteractiveElement;\n    this.host.addController(this);\n  }\n\n  /**\n   * The text that is selectable via typeahead. If not set, defaults to the\n   * innerText of the item slotted into the `\"headline\"` slot, and if there are\n   * no slotted elements into headline, then it checks the _default_ slot, and\n   * then the `\"supporting-text\"` slot if nothing is in _default_.\n   */\n  get typeaheadText() {\n    if (this.internalTypeaheadText !== null) {\n      return this.internalTypeaheadText;\n    }\n\n    const headlineElements = this.getHeadlineElements();\n\n    const textParts: string[] = [];\n    headlineElements.forEach((headlineElement) => {\n      if (headlineElement.textContent && headlineElement.textContent.trim()) {\n        textParts.push(headlineElement.textContent.trim());\n      }\n    });\n\n    // If there are no headline elements, check the default slot's text content\n    if (textParts.length === 0) {\n      this.getDefaultElements().forEach((defaultElement) => {\n        if (defaultElement.textContent && defaultElement.textContent.trim()) {\n          textParts.push(defaultElement.textContent.trim());\n        }\n      });\n    }\n\n    // If there are no headline nor default slot elements, check the\n    //supporting-text slot's text content\n    if (textParts.length === 0) {\n      this.getSupportingTextElements().forEach((supportingTextElement) => {\n        if (\n          supportingTextElement.textContent &&\n          supportingTextElement.textContent.trim()\n        ) {\n          textParts.push(supportingTextElement.textContent.trim());\n        }\n      });\n    }\n\n    return textParts.join(' ');\n  }\n\n  /**\n   * The recommended tag name to render as the list item.\n   */\n  get tagName() {\n    const type = this.host.type;\n\n    switch (type) {\n      case 'link':\n        return 'a' as const;\n      case 'button':\n        return 'button' as const;\n      default:\n      case 'menuitem':\n      case 'option':\n        return 'li' as const;\n    }\n  }\n\n  /**\n   * The recommended role of the menu item.\n   */\n  get role() {\n    return this.host.type === 'option' ? 'option' : 'menuitem';\n  }\n\n  hostConnected() {\n    this.host.toggleAttribute('md-menu-item', true);\n  }\n\n  hostUpdate() {\n    if (this.host.href) {\n      this.host.type = 'link';\n    }\n  }\n\n  /**\n   * Bind this click listener to the interactive element. Handles closing the\n   * menu.\n   */\n  onClick = () => {\n    if (this.host.keepOpen) return;\n\n    this.host.dispatchEvent(\n      createDefaultCloseMenuEvent(this.host, {\n        kind: CloseReason.CLICK_SELECTION,\n      }),\n    );\n  };\n\n  /**\n   * Bind this click listener to the interactive element. Handles closing the\n   * menu.\n   */\n  onKeydown = (event: KeyboardEvent) => {\n    // Check if the interactive element is an anchor tag. If so, click it.\n    if (this.host.href && event.code === 'Enter') {\n      const interactiveElement = this.getInteractiveElement();\n      if (interactiveElement instanceof HTMLAnchorElement) {\n        interactiveElement.click();\n      }\n    }\n\n    if (event.defaultPrevented) return;\n\n    // If the host has keepOpen = true we should ignore clicks & Space/Enter,\n    // however we always maintain the ability to close a menu with a explicit\n    // `escape` keypress.\n    const keyCode = event.code;\n    if (this.host.keepOpen && keyCode !== 'Escape') return;\n\n    if (isClosableKey(keyCode)) {\n      event.preventDefault();\n      this.host.dispatchEvent(\n        createDefaultCloseMenuEvent(this.host, {\n          kind: CloseReason.KEYDOWN,\n          key: keyCode,\n        }),\n      );\n    }\n  };\n\n  /**\n   * Use to set the typeaheadText when it changes.\n   */\n  setTypeaheadText(text: string) {\n    this.internalTypeaheadText = text;\n  }\n}\n","/**\n * @license\n * Copyright 2022 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport '../../../focus/md-focus-ring.js';\nimport '../../../labs/item/item.js';\nimport '../../../ripple/ripple.js';\n\nimport {html, LitElement, nothing, TemplateResult} from 'lit';\nimport {\n  property,\n  query,\n  queryAssignedElements,\n  queryAssignedNodes,\n} from 'lit/decorators.js';\nimport {ClassInfo, classMap} from 'lit/directives/class-map.js';\nimport {literal, html as staticHtml, StaticValue} from 'lit/static-html.js';\n\nimport {ARIAMixinStrict} from '../../../internal/aria/aria.js';\nimport {mixinDelegatesAria} from '../../../internal/aria/delegate.js';\nimport {\n  MenuItem,\n  MenuItemController,\n  type MenuItemType,\n} from '../controllers/menuItemController.js';\n\n// Separate variable needed for closure.\nconst menuItemBaseClass = mixinDelegatesAria(LitElement);\n\n/**\n * @fires close-menu {CustomEvent<{initiator: SelectOption, reason: Reason, itemPath: SelectOption[]}>}\n * Closes the encapsulating menu on closable interaction. --bubbles --composed\n */\nexport class MenuItemEl extends menuItemBaseClass implements MenuItem {\n  /** @nocollapse */\n  static override shadowRootOptions = {\n    ...LitElement.shadowRootOptions,\n    delegatesFocus: true,\n  };\n\n  /**\n   * Disables the item and makes it non-selectable and non-interactive.\n   */\n  @property({type: Boolean, reflect: true}) disabled = false;\n\n  /**\n   * Sets the behavior and role of the menu item, defaults to \"menuitem\".\n   */\n  @property() type: MenuItemType = 'menuitem';\n\n  /**\n   * Sets the underlying `HTMLAnchorElement`'s `href` resource attribute.\n   */\n  @property() href = '';\n\n  /**\n   * Sets the underlying `HTMLAnchorElement`'s `target` attribute when `href` is\n   * set.\n   */\n  @property() target: '_blank' | '_parent' | '_self' | '_top' | '' = '';\n\n  /**\n   * Keeps the menu open if clicked or keyboard selected.\n   */\n  @property({type: Boolean, attribute: 'keep-open'}) keepOpen = false;\n\n  /**\n   * Sets the item in the selected visual state when a submenu is opened.\n   */\n  @property({type: Boolean}) selected = false;\n\n  @query('.list-item') protected readonly listItemRoot!: HTMLElement | null;\n\n  @queryAssignedElements({slot: 'headline'})\n  protected readonly headlineElements!: HTMLElement[];\n  @queryAssignedElements({slot: 'supporting-text'})\n  protected readonly supportingTextElements!: HTMLElement[];\n  @queryAssignedNodes({slot: ''})\n  protected readonly defaultElements!: Node[];\n\n  /**\n   * The text that is selectable via typeahead. If not set, defaults to the\n   * innerText of the item slotted into the `\"headline\"` slot.\n   */\n  get typeaheadText() {\n    return this.menuItemController.typeaheadText;\n  }\n\n  @property({attribute: 'typeahead-text'})\n  set typeaheadText(text: string) {\n    this.menuItemController.setTypeaheadText(text);\n  }\n\n  private readonly menuItemController = new MenuItemController(this, {\n    getHeadlineElements: () => {\n      return this.headlineElements;\n    },\n    getSupportingTextElements: () => {\n      return this.supportingTextElements;\n    },\n    getDefaultElements: () => {\n      return this.defaultElements;\n    },\n    getInteractiveElement: () => this.listItemRoot,\n  });\n\n  protected override render() {\n    return this.renderListItem(html`\n      <md-item>\n        <div slot=\"container\">\n          ${this.renderRipple()} ${this.renderFocusRing()}\n        </div>\n        <slot name=\"start\" slot=\"start\"></slot>\n        <slot name=\"end\" slot=\"end\"></slot>\n        ${this.renderBody()}\n      </md-item>\n    `);\n  }\n\n  /**\n   * Renders the root list item.\n   *\n   * @param content the child content of the list item.\n   */\n  protected renderListItem(content: unknown) {\n    const isAnchor = this.type === 'link';\n    let tag: StaticValue;\n    switch (this.menuItemController.tagName) {\n      case 'a':\n        tag = literal`a`;\n        break;\n      case 'button':\n        tag = literal`button`;\n        break;\n      default:\n      case 'li':\n        tag = literal`li`;\n        break;\n    }\n\n    // TODO(b/265339866): announce \"button\"/\"link\" inside of a list item. Until\n    // then all are \"menuitem\" roles for correct announcement.\n    const target = isAnchor && !!this.target ? this.target : nothing;\n    return staticHtml`\n      <${tag}\n        id=\"item\"\n        tabindex=${this.disabled && !isAnchor ? -1 : 0}\n        role=${this.menuItemController.role}\n        aria-label=${(this as ARIAMixinStrict).ariaLabel || nothing}\n        aria-selected=${(this as ARIAMixinStrict).ariaSelected || nothing}\n        aria-checked=${(this as ARIAMixinStrict).ariaChecked || nothing}\n        aria-expanded=${(this as ARIAMixinStrict).ariaExpanded || nothing}\n        aria-haspopup=${(this as ARIAMixinStrict).ariaHasPopup || nothing}\n        class=\"list-item ${classMap(this.getRenderClasses())}\"\n        href=${this.href || nothing}\n        target=${target}\n        @click=${this.menuItemController.onClick}\n        @keydown=${this.menuItemController.onKeydown}\n      >${content}</${tag}>\n    `;\n  }\n\n  /**\n   * Handles rendering of the ripple element.\n   */\n  protected renderRipple(): TemplateResult | typeof nothing {\n    return html` <md-ripple\n      part=\"ripple\"\n      for=\"item\"\n      ?disabled=${this.disabled}></md-ripple>`;\n  }\n\n  /**\n   * Handles rendering of the focus ring.\n   */\n  protected renderFocusRing(): TemplateResult | typeof nothing {\n    return html` <md-focus-ring\n      part=\"focus-ring\"\n      for=\"item\"\n      inward></md-focus-ring>`;\n  }\n\n  /**\n   * Classes applied to the list item root.\n   */\n  protected getRenderClasses(): ClassInfo {\n    return {\n      'disabled': this.disabled,\n      'selected': this.selected,\n    };\n  }\n\n  /**\n   * Handles rendering the headline and supporting text.\n   */\n  protected renderBody() {\n    return html`\n      <slot></slot>\n      <slot name=\"overline\" slot=\"overline\"></slot>\n      <slot name=\"headline\" slot=\"headline\"></slot>\n      <slot name=\"supporting-text\" slot=\"supporting-text\"></slot>\n      <slot\n        name=\"trailing-supporting-text\"\n        slot=\"trailing-supporting-text\"></slot>\n    `;\n  }\n\n  override focus() {\n    // TODO(b/300334509): needed for some cases where delegatesFocus doesn't\n    // work programmatically like in FF and select-option\n    this.listItemRoot?.focus();\n  }\n}\n","/**\n * @license\n * Copyright 2024 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n// Generated stylesheet for ./menu/internal/menuitem/menu-item-styles.css.\nimport {css} from 'lit';\nexport const styles = css`:host{display:flex;--md-ripple-hover-color: var(--md-menu-item-hover-state-layer-color, var(--md-sys-color-on-surface, #1d1b20));--md-ripple-hover-opacity: var(--md-menu-item-hover-state-layer-opacity, 0.08);--md-ripple-pressed-color: var(--md-menu-item-pressed-state-layer-color, var(--md-sys-color-on-surface, #1d1b20));--md-ripple-pressed-opacity: var(--md-menu-item-pressed-state-layer-opacity, 0.12)}:host([disabled]){opacity:var(--md-menu-item-disabled-opacity, 0.3);pointer-events:none}md-focus-ring{z-index:1;--md-focus-ring-shape: 8px}a,button,li{background:none;border:none;padding:0;margin:0;text-align:unset;text-decoration:none}.list-item{border-radius:inherit;display:flex;flex:1;max-width:inherit;min-width:inherit;outline:none;-webkit-tap-highlight-color:rgba(0,0,0,0)}.list-item:not(.disabled){cursor:pointer}[slot=container]{pointer-events:none}md-ripple{border-radius:inherit}md-item{border-radius:inherit;flex:1;color:var(--md-menu-item-label-text-color, var(--md-sys-color-on-surface, #1d1b20));font-family:var(--md-menu-item-label-text-font, var(--md-sys-typescale-body-large-font, var(--md-ref-typeface-plain, Roboto)));font-size:var(--md-menu-item-label-text-size, var(--md-sys-typescale-body-large-size, 1rem));line-height:var(--md-menu-item-label-text-line-height, var(--md-sys-typescale-body-large-line-height, 1.5rem));font-weight:var(--md-menu-item-label-text-weight, var(--md-sys-typescale-body-large-weight, var(--md-ref-typeface-weight-regular, 400)));min-height:var(--md-menu-item-one-line-container-height, 56px);padding-top:var(--md-menu-item-top-space, 12px);padding-bottom:var(--md-menu-item-bottom-space, 12px);padding-inline-start:var(--md-menu-item-leading-space, 16px);padding-inline-end:var(--md-menu-item-trailing-space, 16px)}md-item[multiline]{min-height:var(--md-menu-item-two-line-container-height, 72px)}[slot=supporting-text]{color:var(--md-menu-item-supporting-text-color, var(--md-sys-color-on-surface-variant, #49454f));font-family:var(--md-menu-item-supporting-text-font, var(--md-sys-typescale-body-medium-font, var(--md-ref-typeface-plain, Roboto)));font-size:var(--md-menu-item-supporting-text-size, var(--md-sys-typescale-body-medium-size, 0.875rem));line-height:var(--md-menu-item-supporting-text-line-height, var(--md-sys-typescale-body-medium-line-height, 1.25rem));font-weight:var(--md-menu-item-supporting-text-weight, var(--md-sys-typescale-body-medium-weight, var(--md-ref-typeface-weight-regular, 400)))}[slot=trailing-supporting-text]{color:var(--md-menu-item-trailing-supporting-text-color, var(--md-sys-color-on-surface-variant, #49454f));font-family:var(--md-menu-item-trailing-supporting-text-font, var(--md-sys-typescale-label-small-font, var(--md-ref-typeface-plain, Roboto)));font-size:var(--md-menu-item-trailing-supporting-text-size, var(--md-sys-typescale-label-small-size, 0.6875rem));line-height:var(--md-menu-item-trailing-supporting-text-line-height, var(--md-sys-typescale-label-small-line-height, 1rem));font-weight:var(--md-menu-item-trailing-supporting-text-weight, var(--md-sys-typescale-label-small-weight, var(--md-ref-typeface-weight-medium, 500)))}:is([slot=start],[slot=end])::slotted(*){fill:currentColor}[slot=start]{color:var(--md-menu-item-leading-icon-color, var(--md-sys-color-on-surface-variant, #49454f))}[slot=end]{color:var(--md-menu-item-trailing-icon-color, var(--md-sys-color-on-surface-variant, #49454f))}.list-item{background-color:var(--md-menu-item-container-color, transparent)}.list-item.selected{background-color:var(--md-menu-item-selected-container-color, var(--md-sys-color-secondary-container, #e8def8))}.selected:not(.disabled) ::slotted(*){color:var(--md-menu-item-selected-label-text-color, var(--md-sys-color-on-secondary-container, #1d192b))}@media(forced-colors: active){:host([disabled]),:host([disabled]) slot{color:GrayText;opacity:1}.list-item{position:relative}.list-item.selected::before{content:\"\";position:absolute;inset:0;box-sizing:border-box;border-radius:inherit;pointer-events:none;border:3px double CanvasText}}\n`;\n"],"names":["Checkbox","CheckboxBase","styles","__decorate","customElement","CheckListItemBase","ListItemBase","constructor","left","graphic","render","checkboxClasses","this","text","renderText","renderGraphic","html","_t","_","meta","hasMeta","renderMeta","_t2","ripple","renderRipple","_t3","classMap","tabindex","selected","disabled","onChange","evt","checkbox","target","checked","_skipPropRequest","updateComplete","query","property","type","Boolean","String","reflect","css","MenuItemController","host","config","internalTypeaheadText","onClick","keepOpen","dispatchEvent","createDefaultCloseMenuEvent","kind","CloseReason","onKeydown","event","href","code","interactiveElement","getInteractiveElement","HTMLAnchorElement","click","defaultPrevented","keyCode","isClosableKey","preventDefault","key","getHeadlineElements","getSupportingTextElements","getDefaultElements","addController","typeaheadText","headlineElements","textParts","forEach","headlineElement","textContent","trim","push","length","defaultElement","supportingTextElement","join","tagName","role","hostConnected","toggleAttribute","hostUpdate","setTypeaheadText","menuItemBaseClass","mixinDelegatesAria","LitElement","MenuItemEl","menuItemController","supportingTextElements","defaultElements","listItemRoot","renderListItem","renderFocusRing","renderBody","content","isAnchor","tag","literal","_t4","nothing","staticHtml","_t5","ariaLabel","ariaSelected","ariaChecked","ariaExpanded","ariaHasPopup","getRenderClasses","_t6","_t7","_t8","focus","_this$listItemRoot","shadowRootOptions","Object","assign","delegatesFocus","attribute","queryAssignedElements","slot","queryAssignedNodes","MdMenuItem"],"mappings":"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"}