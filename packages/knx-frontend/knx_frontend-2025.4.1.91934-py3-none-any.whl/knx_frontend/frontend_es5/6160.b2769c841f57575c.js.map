{"version":3,"file":"6160.b2769c841f57575c.js","sources":["webpack://knx-frontend/./homeassistant-frontend/src/common/entity/state_active.ts","webpack://knx-frontend/./homeassistant-frontend/src/common/entity/state_color.ts","webpack://knx-frontend/./homeassistant-frontend/src/resources/css-variables.ts","webpack://knx-frontend/./homeassistant-frontend/src/common/entity/color/battery_color.ts","webpack://knx-frontend/./homeassistant-frontend/src/data/group.ts","webpack://knx-frontend/./homeassistant-frontend/src/common/string/slugify.ts","webpack://knx-frontend/./homeassistant-frontend/src/common/style/icon_color_css.ts","webpack://knx-frontend/./homeassistant-frontend/src/components/entity/state-badge.ts","webpack://knx-frontend/./homeassistant-frontend/src/components/ha-state-icon.ts","webpack://knx-frontend/./homeassistant-frontend/src/data/camera.ts","webpack://knx-frontend/./homeassistant-frontend/src/data/climate.ts"],"sourcesContent":["import type { HassEntity } from \"home-assistant-js-websocket\";\nimport { isUnavailableState, OFF, UNAVAILABLE } from \"../../data/entity\";\nimport { computeDomain } from \"./compute_domain\";\n\nexport function stateActive(stateObj: HassEntity, state?: string): boolean {\n  const domain = computeDomain(stateObj.entity_id);\n  const compareState = state !== undefined ? state : stateObj?.state;\n\n  if ([\"button\", \"event\", \"input_button\", \"scene\"].includes(domain)) {\n    return compareState !== UNAVAILABLE;\n  }\n\n  if (isUnavailableState(compareState)) {\n    return false;\n  }\n\n  // The \"off\" check is relevant for most domains, but there are exceptions\n  // such as \"alert\" where \"off\" is still a somewhat active state and\n  // therefore gets a custom color and \"idle\" is instead the state that\n  // matches what most other domains consider inactive.\n  if (compareState === OFF && domain !== \"alert\") {\n    return false;\n  }\n\n  // Custom cases\n  switch (domain) {\n    case \"alarm_control_panel\":\n      return compareState !== \"disarmed\";\n    case \"alert\":\n      // \"on\" and \"off\" are active, as \"off\" just means alert was acknowledged but is still active\n      return compareState !== \"idle\";\n    case \"cover\":\n      return compareState !== \"closed\";\n    case \"device_tracker\":\n    case \"person\":\n      return compareState !== \"not_home\";\n    case \"lawn_mower\":\n      return [\"mowing\", \"error\"].includes(compareState);\n    case \"lock\":\n      return compareState !== \"locked\";\n    case \"media_player\":\n      return compareState !== \"standby\";\n    case \"vacuum\":\n      return ![\"idle\", \"docked\", \"paused\"].includes(compareState);\n    case \"valve\":\n      return compareState !== \"closed\";\n    case \"plant\":\n      return compareState === \"problem\";\n    case \"group\":\n      return [\"on\", \"home\", \"open\", \"locked\", \"problem\"].includes(compareState);\n    case \"timer\":\n      return compareState === \"active\";\n    case \"camera\":\n      return compareState === \"streaming\";\n  }\n\n  return true;\n}\n","/** Return a color representing a state. */\nimport type { HassEntity } from \"home-assistant-js-websocket\";\nimport { UNAVAILABLE } from \"../../data/entity\";\nimport type { GroupEntity } from \"../../data/group\";\nimport { computeGroupDomain } from \"../../data/group\";\nimport { computeCssVariable } from \"../../resources/css-variables\";\nimport { slugify } from \"../string/slugify\";\nimport { batteryStateColorProperty } from \"./color/battery_color\";\nimport { computeDomain } from \"./compute_domain\";\nimport { stateActive } from \"./state_active\";\n\nconst STATE_COLORED_DOMAIN = new Set([\n  \"alarm_control_panel\",\n  \"alert\",\n  \"automation\",\n  \"binary_sensor\",\n  \"calendar\",\n  \"camera\",\n  \"climate\",\n  \"cover\",\n  \"device_tracker\",\n  \"fan\",\n  \"group\",\n  \"humidifier\",\n  \"input_boolean\",\n  \"lawn_mower\",\n  \"light\",\n  \"lock\",\n  \"media_player\",\n  \"person\",\n  \"plant\",\n  \"remote\",\n  \"schedule\",\n  \"script\",\n  \"siren\",\n  \"sun\",\n  \"switch\",\n  \"timer\",\n  \"update\",\n  \"vacuum\",\n  \"valve\",\n  \"water_heater\",\n]);\n\nexport const stateColorCss = (stateObj: HassEntity, state?: string) => {\n  const compareState = state !== undefined ? state : stateObj?.state;\n  if (compareState === UNAVAILABLE) {\n    return `var(--state-unavailable-color)`;\n  }\n\n  const properties = stateColorProperties(stateObj, state);\n  if (properties) {\n    return computeCssVariable(properties);\n  }\n\n  return undefined;\n};\n\nexport const domainStateColorProperties = (\n  domain: string,\n  stateObj: HassEntity,\n  state?: string\n): string[] => {\n  const compareState = state !== undefined ? state : stateObj.state;\n  const active = stateActive(stateObj, state);\n\n  const properties: string[] = [];\n\n  const stateKey = slugify(compareState, \"_\");\n  const activeKey = active ? \"active\" : \"inactive\";\n\n  const dc = stateObj.attributes.device_class;\n\n  if (dc) {\n    properties.push(`--state-${domain}-${dc}-${stateKey}-color`);\n  }\n\n  properties.push(\n    `--state-${domain}-${stateKey}-color`,\n    `--state-${domain}-${activeKey}-color`,\n    `--state-${activeKey}-color`\n  );\n\n  return properties;\n};\n\nexport const stateColorProperties = (\n  stateObj: HassEntity,\n  state?: string\n): string[] | undefined => {\n  const compareState = state !== undefined ? state : stateObj?.state;\n  const domain = computeDomain(stateObj.entity_id);\n  const dc = stateObj.attributes.device_class;\n\n  // Special rules for battery coloring\n  if (domain === \"sensor\" && dc === \"battery\") {\n    const property = batteryStateColorProperty(compareState);\n    if (property) {\n      return [property];\n    }\n  }\n\n  // Special rules for group coloring\n  if (domain === \"group\") {\n    const groupDomain = computeGroupDomain(stateObj as GroupEntity);\n    if (groupDomain && STATE_COLORED_DOMAIN.has(groupDomain)) {\n      return domainStateColorProperties(groupDomain, stateObj, state);\n    }\n  }\n\n  if (STATE_COLORED_DOMAIN.has(domain)) {\n    return domainStateColorProperties(domain, stateObj, state);\n  }\n\n  return undefined;\n};\n\nexport const stateColorBrightness = (stateObj: HassEntity): string => {\n  if (\n    stateObj.attributes.brightness &&\n    computeDomain(stateObj.entity_id) !== \"plant\"\n  ) {\n    // lowest brightness will be around 50% (that's pretty dark)\n    const brightness = stateObj.attributes.brightness;\n    return `brightness(${(brightness + 245) / 5}%)`;\n  }\n  return \"\";\n};\n","export function computeCssVariable(\n  props: string | string[]\n): string | undefined {\n  if (Array.isArray(props)) {\n    return props\n      .reverse()\n      .reduce<\n        string | undefined\n      >((str, variable) => `var(${variable}${str ? `, ${str}` : \"\"})`, undefined);\n  }\n  return `var(${props})`;\n}\n\nexport function computeCssValue(\n  prop: string | string[],\n  computedStyles: CSSStyleDeclaration\n): string | undefined {\n  if (Array.isArray(prop)) {\n    for (const property of prop) {\n      const value = computeCssValue(property, computedStyles);\n      if (value) return value;\n    }\n    return undefined;\n  }\n\n  if (!prop.endsWith(\"-color\")) {\n    return undefined;\n  }\n  return computedStyles.getPropertyValue(prop).trim() || undefined;\n}\n","export const batteryStateColorProperty = (\n  state: string\n): string | undefined => {\n  const value = Number(state);\n  if (isNaN(value)) {\n    return undefined;\n  }\n  if (value >= 70) {\n    return \"--state-sensor-battery-high-color\";\n  }\n  if (value >= 30) {\n    return \"--state-sensor-battery-medium-color\";\n  }\n  return \"--state-sensor-battery-low-color\";\n};\n","import type {\n  HassEntityAttributeBase,\n  HassEntityBase,\n} from \"home-assistant-js-websocket\";\nimport { computeDomain } from \"../common/entity/compute_domain\";\n\ninterface GroupEntityAttributes extends HassEntityAttributeBase {\n  entity_id: string[];\n  order: number;\n  auto?: boolean;\n  view?: boolean;\n  control?: \"hidden\";\n}\nexport interface GroupEntity extends HassEntityBase {\n  attributes: GroupEntityAttributes;\n}\n\nexport const computeGroupDomain = (\n  stateObj: GroupEntity\n): string | undefined => {\n  const entityIds = stateObj.attributes.entity_id || [];\n  const uniqueDomains = [\n    ...new Set(entityIds.map((entityId) => computeDomain(entityId))),\n  ];\n  return uniqueDomains.length === 1 ? uniqueDomains[0] : undefined;\n};\n","// https://gist.github.com/hagemann/382adfc57adbd5af078dc93feef01fe1\nexport const slugify = (value: string, delimiter = \"_\") => {\n  const a =\n    \"àáâäæãåāăąçćčđďèéêëēėęěğǵḧîïíīįìıİłḿñńǹňôöòóœøōõőṕŕřßśšşșťțûüùúūǘůűųẃẍÿýžźż·\";\n  const b = `aaaaaaaaaacccddeeeeeeeegghiiiiiiiilmnnnnoooooooooprrsssssttuuuuuuuuuwxyyzzz${delimiter}`;\n  const p = new RegExp(a.split(\"\").join(\"|\"), \"g\");\n\n  let slugified;\n\n  if (value === \"\") {\n    slugified = \"\";\n  } else {\n    slugified = value\n      .toString()\n      .toLowerCase()\n      .replace(p, (c) => b.charAt(a.indexOf(c))) // Replace special characters\n      .replace(/(\\d),(?=\\d)/g, \"$1\") // Remove Commas between numbers\n      .replace(/[^a-z0-9]+/g, delimiter) // Replace all non-word characters\n      .replace(new RegExp(`(${delimiter})\\\\1+`, \"g\"), \"$1\") // Replace multiple delimiters with single delimiter\n      .replace(new RegExp(`^${delimiter}+`), \"\") // Trim delimiter from start of text\n      .replace(new RegExp(`${delimiter}+$`), \"\"); // Trim delimiter from end of text\n\n    if (slugified === \"\") {\n      slugified = \"unknown\";\n    }\n  }\n\n  return slugified;\n};\n","import { css } from \"lit\";\n\nexport const iconColorCSS = css`\n  ha-state-icon[data-domain=\"alarm_control_panel\"][data-state=\"pending\"],\n  ha-state-icon[data-domain=\"alarm_control_panel\"][data-state=\"arming\"],\n  ha-state-icon[data-domain=\"alarm_control_panel\"][data-state=\"triggered\"],\n  ha-state-icon[data-domain=\"lock\"][data-state=\"jammed\"] {\n    animation: pulse 1s infinite;\n  }\n\n  @keyframes pulse {\n    0% {\n      opacity: 1;\n    }\n    50% {\n      opacity: 0;\n    }\n    100% {\n      opacity: 1;\n    }\n  }\n\n  /* Color the icon if unavailable */\n  ha-state-icon[data-state=\"unavailable\"] {\n    color: var(--state-unavailable-color);\n  }\n`;\n","import { mdiAlert } from \"@mdi/js\";\nimport type { HassEntity } from \"home-assistant-js-websocket\";\nimport type { CSSResultGroup, PropertyValues } from \"lit\";\nimport { LitElement, css, html, nothing } from \"lit\";\nimport { property, state } from \"lit/decorators\";\nimport { ifDefined } from \"lit/directives/if-defined\";\nimport { styleMap } from \"lit/directives/style-map\";\nimport { computeDomain } from \"../../common/entity/compute_domain\";\nimport { computeStateDomain } from \"../../common/entity/compute_state_domain\";\nimport {\n  stateColorBrightness,\n  stateColorCss,\n} from \"../../common/entity/state_color\";\nimport { iconColorCSS } from \"../../common/style/icon_color_css\";\nimport { cameraUrlWithWidthHeight } from \"../../data/camera\";\nimport { CLIMATE_HVAC_ACTION_TO_MODE } from \"../../data/climate\";\nimport type { HomeAssistant } from \"../../types\";\nimport \"../ha-state-icon\";\n\nexport class StateBadge extends LitElement {\n  public hass?: HomeAssistant;\n\n  @property({ attribute: false }) public stateObj?: HassEntity;\n\n  @property({ attribute: false }) public overrideIcon?: string;\n\n  @property({ attribute: false }) public overrideImage?: string;\n\n  // Cannot be a boolean attribute because undefined is treated different than\n  // false.  When it is undefined, state is still colored for light entities.\n  @property({ attribute: false }) public stateColor?: boolean;\n\n  @property() public color?: string;\n\n  // @todo Consider reworking to eliminate need for attribute since it is manipulated internally\n  @property({ type: Boolean, reflect: true }) public icon = true;\n\n  @state() private _iconStyle: Record<string, string | undefined> = {};\n\n  connectedCallback(): void {\n    super.connectedCallback();\n    if (\n      this.hasUpdated &&\n      this.overrideImage === undefined &&\n      (this.stateObj?.attributes.entity_picture ||\n        this.stateObj?.attributes.entity_picture_local)\n    ) {\n      // Update image on connect, so we get new auth token\n      this.requestUpdate(\"stateObj\");\n    }\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    if (\n      this.overrideImage === undefined &&\n      (this.stateObj?.attributes.entity_picture ||\n        this.stateObj?.attributes.entity_picture_local)\n    ) {\n      // Clear image on disconnect so we don't fetch with old auth when we reconnect\n      this.style.backgroundImage = \"\";\n    }\n  }\n\n  private get _stateColor() {\n    const domain = this.stateObj\n      ? computeStateDomain(this.stateObj)\n      : undefined;\n    return this.stateColor ?? domain === \"light\";\n  }\n\n  protected render() {\n    const stateObj = this.stateObj;\n\n    // We either need a `stateObj` or one override\n    if (!stateObj && !this.overrideIcon && !this.overrideImage) {\n      return html`<div class=\"missing\">\n        <ha-svg-icon .path=${mdiAlert}></ha-svg-icon>\n      </div>`;\n    }\n\n    if (!this.icon) {\n      return nothing;\n    }\n\n    const domain = stateObj ? computeStateDomain(stateObj) : undefined;\n\n    return html`<ha-state-icon\n      .hass=${this.hass}\n      style=${styleMap(this._iconStyle)}\n      data-domain=${ifDefined(domain)}\n      data-state=${ifDefined(stateObj?.state)}\n      .icon=${this.overrideIcon}\n      .stateObj=${stateObj}\n    ></ha-state-icon>`;\n  }\n\n  public willUpdate(changedProps: PropertyValues<this>) {\n    super.willUpdate(changedProps);\n    if (\n      !changedProps.has(\"stateObj\") &&\n      !changedProps.has(\"overrideImage\") &&\n      !changedProps.has(\"overrideIcon\") &&\n      !changedProps.has(\"stateColor\") &&\n      !changedProps.has(\"color\")\n    ) {\n      return;\n    }\n    const stateObj = this.stateObj;\n\n    const iconStyle: Record<string, string> = {};\n    let backgroundImage = \"\";\n\n    this.icon = true;\n\n    if (stateObj) {\n      const domain = computeDomain(stateObj.entity_id);\n      if (this.overrideImage === undefined) {\n        // hide icon if we have entity picture\n        if (\n          (stateObj.attributes.entity_picture_local ||\n            stateObj.attributes.entity_picture) &&\n          !this.overrideIcon\n        ) {\n          let imageUrl =\n            stateObj.attributes.entity_picture_local ||\n            stateObj.attributes.entity_picture;\n          if (this.hass) {\n            imageUrl = this.hass.hassUrl(imageUrl);\n          }\n          if (domain === \"camera\") {\n            imageUrl = cameraUrlWithWidthHeight(imageUrl, 80, 80);\n          }\n          backgroundImage = `url(${imageUrl})`;\n          this.icon = false;\n        } else if (this.color) {\n          // Externally provided overriding color wins over state color\n          iconStyle.color = this.color;\n        } else if (this._stateColor) {\n          const color = stateColorCss(stateObj);\n          if (color) {\n            iconStyle.color = color;\n          }\n          if (stateObj.attributes.rgb_color) {\n            iconStyle.color = `rgb(${stateObj.attributes.rgb_color.join(\",\")})`;\n          }\n          if (stateObj.attributes.brightness) {\n            const brightness = stateObj.attributes.brightness;\n            if (typeof brightness !== \"number\") {\n              const errorMessage = `Type error: state-badge expected number, but type of ${\n                stateObj.entity_id\n              }.attributes.brightness is ${typeof brightness} (${brightness})`;\n              // eslint-disable-next-line\n              console.warn(errorMessage);\n            }\n            iconStyle.filter = stateColorBrightness(stateObj);\n          }\n          if (stateObj.attributes.hvac_action) {\n            const hvacAction = stateObj.attributes.hvac_action;\n            if (hvacAction in CLIMATE_HVAC_ACTION_TO_MODE) {\n              iconStyle.color = stateColorCss(\n                stateObj,\n                CLIMATE_HVAC_ACTION_TO_MODE[hvacAction]\n              )!;\n            } else {\n              delete iconStyle.color;\n            }\n          }\n        }\n      } else if (this.overrideImage) {\n        let imageUrl = this.overrideImage;\n        if (this.hass) {\n          imageUrl = this.hass.hassUrl(imageUrl);\n        }\n        backgroundImage = `url(${imageUrl})`;\n        this.icon = false;\n      }\n\n      if (domain === \"update\") {\n        this.style.borderRadius = \"0\";\n      } else if (domain === \"media_player\" || domain === \"camera\") {\n        this.style.borderRadius = \"8%\";\n      }\n    }\n\n    this._iconStyle = iconStyle;\n    this.style.backgroundImage = backgroundImage;\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      iconColorCSS,\n      css`\n        :host {\n          position: relative;\n          display: inline-block;\n          width: 40px;\n          color: var(--paper-item-icon-color, #44739e);\n          border-radius: 50%;\n          height: 40px;\n          text-align: center;\n          background-size: cover;\n          line-height: 40px;\n          vertical-align: middle;\n          box-sizing: border-box;\n          --state-inactive-color: initial;\n        }\n        :host(:focus) {\n          outline: none;\n        }\n        :host(:not([icon]):focus) {\n          border: 2px solid var(--divider-color);\n        }\n        :host([icon]:focus) {\n          background: var(--divider-color);\n        }\n        ha-state-icon {\n          transition:\n            color 0.3s ease-in-out,\n            filter 0.3s ease-in-out;\n        }\n        .missing {\n          color: #fce588;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"state-badge\": StateBadge;\n  }\n}\n\ncustomElements.define(\"state-badge\", StateBadge);\n","import type { HassEntity } from \"home-assistant-js-websocket\";\nimport { html, LitElement, nothing } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { until } from \"lit/directives/until\";\nimport { computeStateDomain } from \"../common/entity/compute_state_domain\";\nimport {\n  DEFAULT_DOMAIN_ICON,\n  entityIcon,\n  FALLBACK_DOMAIN_ICONS,\n} from \"../data/icons\";\nimport type { HomeAssistant } from \"../types\";\nimport \"./ha-icon\";\nimport \"./ha-svg-icon\";\n\n@customElement(\"ha-state-icon\")\nexport class HaStateIcon extends LitElement {\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @property({ attribute: false }) public stateObj?: HassEntity;\n\n  @property({ attribute: false }) public stateValue?: string;\n\n  @property() public icon?: string;\n\n  protected render() {\n    const overrideIcon =\n      this.icon ||\n      (this.stateObj && this.hass?.entities[this.stateObj.entity_id]?.icon) ||\n      this.stateObj?.attributes.icon;\n    if (overrideIcon) {\n      return html`<ha-icon .icon=${overrideIcon}></ha-icon>`;\n    }\n    if (!this.stateObj) {\n      return nothing;\n    }\n    if (!this.hass) {\n      return this._renderFallback();\n    }\n    const icon = entityIcon(this.hass, this.stateObj, this.stateValue).then(\n      (icn) => {\n        if (icn) {\n          return html`<ha-icon .icon=${icn}></ha-icon>`;\n        }\n        return this._renderFallback();\n      }\n    );\n    return html`${until(icon)}`;\n  }\n\n  private _renderFallback() {\n    const domain = computeStateDomain(this.stateObj!);\n\n    return html`\n      <ha-svg-icon\n        .path=${FALLBACK_DOMAIN_ICONS[domain] || DEFAULT_DOMAIN_ICON}\n      ></ha-svg-icon>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-state-icon\": HaStateIcon;\n  }\n}\n","import type {\n  HassEntityAttributeBase,\n  HassEntityBase,\n} from \"home-assistant-js-websocket\";\nimport { timeCacheEntityPromiseFunc } from \"../common/util/time-cache-entity-promise-func\";\nimport type { HomeAssistant } from \"../types\";\nimport { getSignedPath } from \"./auth\";\n\nexport const CAMERA_ORIENTATIONS = [1, 2, 3, 4, 6, 8];\nexport const CAMERA_SUPPORT_ON_OFF = 1;\nexport const CAMERA_SUPPORT_STREAM = 2;\n\nexport const STREAM_TYPE_HLS = \"hls\";\nexport const STREAM_TYPE_WEB_RTC = \"web_rtc\";\n\nexport type StreamType = typeof STREAM_TYPE_HLS | typeof STREAM_TYPE_WEB_RTC;\n\ninterface CameraEntityAttributes extends HassEntityAttributeBase {\n  model_name: string;\n  access_token: string;\n  brand: string;\n  motion_detection: boolean;\n  frontend_stream_type: string;\n}\n\nexport interface CameraEntity extends HassEntityBase {\n  attributes: CameraEntityAttributes;\n}\n\nexport interface CameraPreferences {\n  preload_stream: boolean;\n  orientation: number;\n}\n\nexport interface CameraThumbnail {\n  content_type: string;\n  content: string;\n}\n\nexport interface Stream {\n  url: string;\n}\n\nexport type WebRtcOfferEvent =\n  | WebRtcId\n  | WebRtcAnswer\n  | WebRtcCandidate\n  | WebRtcError;\n\nexport interface WebRtcId {\n  type: \"session\";\n  session_id: string;\n}\n\nexport interface WebRtcAnswer {\n  type: \"answer\";\n  answer: string;\n}\n\nexport interface WebRtcCandidate {\n  type: \"candidate\";\n  candidate: RTCIceCandidateInit;\n}\n\nexport interface WebRtcError {\n  type: \"error\";\n  code: string;\n  message: string;\n}\n\nexport interface WebRtcOfferResponse {\n  id: string;\n}\n\nexport const cameraUrlWithWidthHeight = (\n  base_url: string,\n  width: number,\n  height: number\n) => `${base_url}&width=${width}&height=${height}`;\n\nexport const computeMJPEGStreamUrl = (entity: CameraEntity) =>\n  `/api/camera_proxy_stream/${entity.entity_id}?token=${entity.attributes.access_token}`;\n\nexport const fetchThumbnailUrlWithCache = async (\n  hass: HomeAssistant,\n  entityId: string,\n  width: number,\n  height: number\n) => {\n  const base_url = await timeCacheEntityPromiseFunc(\n    \"_cameraTmbUrl\",\n    9000,\n    fetchThumbnailUrl,\n    hass,\n    entityId\n  );\n  return cameraUrlWithWidthHeight(base_url, width, height);\n};\n\nexport const fetchThumbnailUrl = async (\n  hass: HomeAssistant,\n  entityId: string\n) => {\n  const path = await getSignedPath(hass, `/api/camera_proxy/${entityId}`);\n  return hass.hassUrl(path.path);\n};\n\nexport const fetchStreamUrl = async (\n  hass: HomeAssistant,\n  entityId: string,\n  format?: \"hls\"\n) => {\n  const data = {\n    type: \"camera/stream\",\n    entity_id: entityId,\n  };\n  if (format) {\n    // @ts-ignore\n    data.format = format;\n  }\n  const stream = await hass.callWS<Stream>(data);\n  stream.url = hass.hassUrl(stream.url);\n  return stream;\n};\n\nexport const webRtcOffer = (\n  hass: HomeAssistant,\n  entity_id: string,\n  offer: string,\n  callback: (event: WebRtcOfferEvent) => void\n) =>\n  hass.connection.subscribeMessage<WebRtcOfferEvent>(callback, {\n    type: \"camera/webrtc/offer\",\n    entity_id,\n    offer,\n  });\n\nexport const addWebRtcCandidate = (\n  hass: HomeAssistant,\n  entity_id: string,\n  session_id: string,\n  candidate: RTCIceCandidateInit\n) =>\n  hass.callWS({\n    type: \"camera/webrtc/candidate\",\n    entity_id,\n    session_id,\n    candidate: candidate,\n  });\n\nexport const fetchCameraPrefs = (hass: HomeAssistant, entityId: string) =>\n  hass.callWS<CameraPreferences>({\n    type: \"camera/get_prefs\",\n    entity_id: entityId,\n  });\n\ntype ValueOf<T extends any[]> = T[number];\nexport const updateCameraPrefs = (\n  hass: HomeAssistant,\n  entityId: string,\n  prefs: {\n    preload_stream?: boolean;\n    orientation?: ValueOf<typeof CAMERA_ORIENTATIONS>;\n  }\n) =>\n  hass.callWS<CameraPreferences>({\n    type: \"camera/update_prefs\",\n    entity_id: entityId,\n    ...prefs,\n  });\n\nconst CAMERA_MEDIA_SOURCE_PREFIX = \"media-source://camera/\";\n\nexport const isCameraMediaSource = (mediaContentId: string) =>\n  mediaContentId.startsWith(CAMERA_MEDIA_SOURCE_PREFIX);\n\nexport const getEntityIdFromCameraMediaSource = (mediaContentId: string) =>\n  mediaContentId.substring(CAMERA_MEDIA_SOURCE_PREFIX.length);\n\nexport interface CameraCapabilities {\n  frontend_stream_types: StreamType[];\n}\n\nexport const fetchCameraCapabilities = async (\n  hass: HomeAssistant,\n  entity_id: string\n) =>\n  hass.callWS<CameraCapabilities>({ type: \"camera/capabilities\", entity_id });\n\nexport interface WebRTCClientConfiguration {\n  configuration: RTCConfiguration;\n  dataChannel?: string;\n  getCandidatesUpfront: boolean;\n}\n\nexport const fetchWebRtcClientConfiguration = async (\n  hass: HomeAssistant,\n  entityId: string\n) =>\n  hass.callWS<WebRTCClientConfiguration>({\n    type: \"camera/webrtc/get_client_config\",\n    entity_id: entityId,\n  });\n","import {\n  mdiFan,\n  mdiFire,\n  mdiPower,\n  mdiSnowflake,\n  mdiSunSnowflakeVariant,\n  mdiThermostat,\n  mdiThermostatAuto,\n  mdiWaterPercent,\n} from \"@mdi/js\";\nimport type {\n  HassEntityAttributeBase,\n  HassEntityBase,\n} from \"home-assistant-js-websocket\";\n\nexport const HVAC_MODES = [\n  \"auto\",\n  \"heat_cool\",\n  \"heat\",\n  \"cool\",\n  \"dry\",\n  \"fan_only\",\n  \"off\",\n] as const;\n\nexport type HvacMode = (typeof HVAC_MODES)[number];\n\nexport const CLIMATE_PRESET_NONE = \"none\";\n\nexport type HvacAction =\n  | \"cooling\"\n  | \"defrosting\"\n  | \"drying\"\n  | \"fan\"\n  | \"heating\"\n  | \"idle\"\n  | \"off\"\n  | \"preheating\";\n\nexport type ClimateEntity = HassEntityBase & {\n  attributes: HassEntityAttributeBase & {\n    hvac_mode: HvacMode;\n    hvac_modes: HvacMode[];\n    hvac_action?: HvacAction;\n    current_temperature: number;\n    min_temp: number;\n    max_temp: number;\n    temperature: number;\n    target_temp_step?: number;\n    target_temp_high?: number;\n    target_temp_low?: number;\n    humidity?: number;\n    current_humidity?: number;\n    target_humidity_low?: number;\n    target_humidity_high?: number;\n    min_humidity?: number;\n    max_humidity?: number;\n    fan_mode?: string;\n    fan_modes?: string[];\n    preset_mode?: string;\n    preset_modes?: string[];\n    swing_mode?: string;\n    swing_modes?: string[];\n    swing_horizontal_mode?: string;\n    swing_horizontal_modes?: string[];\n    aux_heat?: \"on\" | \"off\";\n  };\n};\n\nexport const enum ClimateEntityFeature {\n  TARGET_TEMPERATURE = 1,\n  TARGET_TEMPERATURE_RANGE = 2,\n  TARGET_HUMIDITY = 4,\n  FAN_MODE = 8,\n  PRESET_MODE = 16,\n  SWING_MODE = 32,\n  AUX_HEAT = 64,\n  TURN_OFF = 128,\n  TURN_ON = 256,\n  SWING_HORIZONTAL_MODE = 512,\n}\n\nconst hvacModeOrdering = HVAC_MODES.reduce(\n  (order, mode, index) => {\n    order[mode] = index;\n    return order;\n  },\n  {} as Record<HvacMode, number>\n);\n\nexport const compareClimateHvacModes = (mode1: HvacMode, mode2: HvacMode) =>\n  hvacModeOrdering[mode1] - hvacModeOrdering[mode2];\n\nexport const CLIMATE_HVAC_ACTION_TO_MODE: Record<HvacAction, HvacMode> = {\n  cooling: \"cool\",\n  defrosting: \"heat\",\n  drying: \"dry\",\n  fan: \"fan_only\",\n  heating: \"heat\",\n  idle: \"off\",\n  off: \"off\",\n  preheating: \"heat\",\n};\n\nexport const CLIMATE_HVAC_MODE_ICONS: Record<HvacMode, string> = {\n  cool: mdiSnowflake,\n  dry: mdiWaterPercent,\n  fan_only: mdiFan,\n  auto: mdiThermostatAuto,\n  heat: mdiFire,\n  off: mdiPower,\n  heat_cool: mdiSunSnowflakeVariant,\n};\n\nexport const climateHvacModeIcon = (mode: string) =>\n  CLIMATE_HVAC_MODE_ICONS[mode] || mdiThermostat;\n"],"names":["stateActive","stateObj","state","domain","computeDomain","entity_id","compareState","undefined","includes","UNAVAILABLE","isUnavailableState","OFF","STATE_COLORED_DOMAIN","Set","stateColorCss","properties","stateColorProperties","props","Array","isArray","reverse","reduce","str","variable","domainStateColorProperties","active","stateKey","slugify","activeKey","dc","attributes","device_class","push","property","value","Number","isNaN","batteryStateColorProperty","groupDomain","entityIds","uniqueDomains","map","entityId","length","computeGroupDomain","has","stateColorBrightness","brightness","delimiter","a","b","p","RegExp","split","join","slugified","toString","toLowerCase","replace","c","charAt","indexOf","iconColorCSS","css","_t","StateBadge","_decorate","_initialize","_LitElement","constructor","args","F","d","kind","key","decorators","attribute","type","Boolean","reflect","_this$stateObj","_this$stateObj2","_superPropGet","this","hasUpdated","overrideImage","entity_picture","entity_picture_local","requestUpdate","_this$stateObj3","_this$stateObj4","style","backgroundImage","_this$stateColor","computeStateDomain","stateColor","overrideIcon","html","_","mdiAlert","icon","nothing","_t2","hass","styleMap","_iconStyle","ifDefined","changedProps","iconStyle","color","_stateColor","rgb_color","errorMessage","console","warn","filter","hvac_action","hvacAction","CLIMATE_HVAC_ACTION_TO_MODE","imageUrl","hassUrl","cameraUrlWithWidthHeight","borderRadius","static","_t3","LitElement","customElements","define","customElement","_this$hass","entities","_renderFallback","entityIcon","stateValue","then","icn","until","_t4","FALLBACK_DOMAIN_ICONS","DEFAULT_DOMAIN_ICON","base_url","width","height","fetchStreamUrl","async","format","data","stream","callWS","url","CLIMATE_PRESET_NONE","order","mode","index","cooling","defrosting","drying","fan","heating","idle","off","preheating"],"mappings":"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"}