{"version":3,"file":"8714.5503b91bfdfa935c.js","sources":["webpack://knx-frontend/./homeassistant-frontend/src/common/language/format_language.ts","webpack://knx-frontend/./homeassistant-frontend/src/components/ha-assist-pipeline-picker.ts","webpack://knx-frontend/./homeassistant-frontend/src/components/ha-selector/ha-selector-assist-pipeline.ts","webpack://knx-frontend/./homeassistant-frontend/src/data/assist_pipeline.ts"],"sourcesContent":["import memoizeOne from \"memoize-one\";\nimport type { FrontendLocaleData } from \"../../data/translation\";\n\nexport const formatLanguageCode = (\n  languageCode: string,\n  locale: FrontendLocaleData\n) => {\n  try {\n    return formatLanguageCodeMem(locale)?.of(languageCode) ?? languageCode;\n  } catch {\n    return languageCode;\n  }\n};\n\nconst formatLanguageCodeMem = memoizeOne(\n  (locale: FrontendLocaleData) =>\n    new Intl.DisplayNames(locale.language, {\n      type: \"language\",\n      fallback: \"code\",\n    })\n);\n","import type { PropertyValueMap } from \"lit\";\nimport { css, html, LitElement, nothing } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { stopPropagation } from \"../common/dom/stop_propagation\";\nimport { formatLanguageCode } from \"../common/language/format_language\";\nimport type { AssistPipeline } from \"../data/assist_pipeline\";\nimport { listAssistPipelines } from \"../data/assist_pipeline\";\nimport type { HomeAssistant } from \"../types\";\nimport \"./ha-list-item\";\nimport \"./ha-select\";\nimport type { HaSelect } from \"./ha-select\";\n\nconst PREFERRED = \"preferred\";\nconst LAST_USED = \"last_used\";\n\n@customElement(\"ha-assist-pipeline-picker\")\nexport class HaAssistPipelinePicker extends LitElement {\n  @property() public value?: string;\n\n  @property() public label?: string;\n\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean, reflect: true }) public disabled = false;\n\n  @property({ type: Boolean }) public required = false;\n\n  @property({ attribute: false }) public includeLastUsed = false;\n\n  @state() _pipelines?: AssistPipeline[];\n\n  @state() _preferredPipeline: string | null = null;\n\n  private get _default() {\n    return this.includeLastUsed ? LAST_USED : PREFERRED;\n  }\n\n  protected render() {\n    if (!this._pipelines) {\n      return nothing;\n    }\n    const value = this.value ?? this._default;\n    return html`\n      <ha-select\n        .label=${this.label ||\n        this.hass!.localize(\"ui.components.pipeline-picker.pipeline\")}\n        .value=${value}\n        .required=${this.required}\n        .disabled=${this.disabled}\n        @selected=${this._changed}\n        @closed=${stopPropagation}\n        fixedMenuPosition\n        naturalMenuWidth\n      >\n        ${this.includeLastUsed\n          ? html`\n              <ha-list-item .value=${LAST_USED}>\n                ${this.hass!.localize(\n                  \"ui.components.pipeline-picker.last_used\"\n                )}\n              </ha-list-item>\n            `\n          : null}\n        <ha-list-item .value=${PREFERRED}>\n          ${this.hass!.localize(\"ui.components.pipeline-picker.preferred\", {\n            preferred: this._pipelines.find(\n              (pipeline) => pipeline.id === this._preferredPipeline\n            )?.name,\n          })}\n        </ha-list-item>\n        ${this._pipelines.map(\n          (pipeline) =>\n            html`<ha-list-item .value=${pipeline.id}>\n              ${pipeline.name}\n              (${formatLanguageCode(pipeline.language, this.hass.locale)})\n            </ha-list-item>`\n        )}\n      </ha-select>\n    `;\n  }\n\n  protected firstUpdated(\n    changedProperties: PropertyValueMap<any> | Map<PropertyKey, unknown>\n  ): void {\n    super.firstUpdated(changedProperties);\n    listAssistPipelines(this.hass).then((pipelines) => {\n      this._pipelines = pipelines.pipelines;\n      this._preferredPipeline = pipelines.preferred_pipeline;\n    });\n  }\n\n  static styles = css`\n    ha-select {\n      width: 100%;\n    }\n  `;\n\n  private _changed(ev): void {\n    const target = ev.target as HaSelect;\n    if (\n      !this.hass ||\n      target.value === \"\" ||\n      target.value === this.value ||\n      (this.value === undefined && target.value === this._default)\n    ) {\n      return;\n    }\n    this.value = target.value === this._default ? undefined : target.value;\n    fireEvent(this, \"value-changed\", { value: this.value });\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-assist-pipeline-picker\": HaAssistPipelinePicker;\n  }\n}\n","import { css, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport type { AssistPipelineSelector } from \"../../data/selector\";\nimport type { HomeAssistant } from \"../../types\";\nimport \"../ha-assist-pipeline-picker\";\n\n@customElement(\"ha-selector-assist_pipeline\")\nexport class HaAssistPipelineSelector extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public selector!: AssistPipelineSelector;\n\n  @property() public value?: any;\n\n  @property() public label?: string;\n\n  @property() public helper?: string;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public required = true;\n\n  protected render() {\n    return html`\n      <ha-assist-pipeline-picker\n        .hass=${this.hass}\n        .value=${this.value}\n        .label=${this.label}\n        .helper=${this.helper}\n        .disabled=${this.disabled}\n        .required=${this.required}\n        .includeLastUsed=${Boolean(\n          this.selector.assist_pipeline?.include_last_used\n        )}\n      ></ha-assist-pipeline-picker>\n    `;\n  }\n\n  static styles = css`\n    ha-conversation-agent-picker {\n      width: 100%;\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-selector-assist_pipeline\": HaAssistPipelineSelector;\n  }\n}\n","import type { HomeAssistant } from \"../types\";\nimport type { ConversationResult } from \"./conversation\";\nimport type { ResolvedMediaSource } from \"./media_source\";\nimport type { SpeechMetadata } from \"./stt\";\n\nexport interface AssistPipeline {\n  id: string;\n  name: string;\n  language: string;\n  conversation_engine: string;\n  conversation_language: string | null;\n  prefer_local_intents?: boolean;\n  stt_engine: string | null;\n  stt_language: string | null;\n  tts_engine: string | null;\n  tts_language: string | null;\n  tts_voice: string | null;\n  wake_word_entity: string | null;\n  wake_word_id: string | null;\n}\n\nexport interface AssistDevice {\n  device_id: string;\n  pipeline_entity: string;\n}\n\nexport interface AssistPipelineMutableParams {\n  name: string;\n  language: string;\n  conversation_engine: string;\n  conversation_language: string | null;\n  prefer_local_intents?: boolean;\n  stt_engine: string | null;\n  stt_language: string | null;\n  tts_engine: string | null;\n  tts_language: string | null;\n  tts_voice: string | null;\n  wake_word_entity: string | null;\n  wake_word_id: string | null;\n}\n\nexport interface AssistRunListing {\n  pipeline_run_id: string;\n  timestamp: string;\n}\n\ninterface PipelineEventBase {\n  timestamp: string;\n}\n\ninterface PipelineRunStartEvent extends PipelineEventBase {\n  type: \"run-start\";\n  data: {\n    pipeline: string;\n    language: string;\n    runner_data: {\n      stt_binary_handler_id: number | null;\n      timeout: number;\n    };\n  };\n}\ninterface PipelineRunEndEvent extends PipelineEventBase {\n  type: \"run-end\";\n  data: Record<string, never>;\n}\n\ninterface PipelineErrorEvent extends PipelineEventBase {\n  type: \"error\";\n  data: {\n    code: string;\n    message: string;\n  };\n}\n\ninterface PipelineWakeWordStartEvent extends PipelineEventBase {\n  type: \"wake_word-start\";\n  data: {\n    engine: string;\n    metadata: SpeechMetadata;\n  };\n}\n\ninterface PipelineWakeWordEndEvent extends PipelineEventBase {\n  type: \"wake_word-end\";\n  data: { wake_word_output: { ww_id: string; timestamp: number } };\n}\n\ninterface PipelineSTTStartEvent extends PipelineEventBase {\n  type: \"stt-start\";\n  data: {\n    engine: string;\n    metadata: SpeechMetadata;\n  };\n}\ninterface PipelineSTTEndEvent extends PipelineEventBase {\n  type: \"stt-end\";\n  data: {\n    stt_output: { text: string };\n  };\n}\n\ninterface PipelineIntentStartEvent extends PipelineEventBase {\n  type: \"intent-start\";\n  data: {\n    engine: string;\n    language: string;\n    prefer_local_intents: boolean;\n    intent_input: string;\n  };\n}\n\ninterface ConversationChatLogAssistantDelta {\n  role: \"assistant\";\n  content: string;\n  tool_calls: {\n    id: string;\n    tool_name: string;\n    tool_args: Record<string, unknown>;\n  }[];\n}\n\ninterface ConversationChatLogToolResultDelta {\n  role: \"tool_result\";\n  agent_id: string;\n  tool_call_id: string;\n  tool_name: string;\n  tool_result: unknown;\n}\ninterface PipelineIntentProgressEvent extends PipelineEventBase {\n  type: \"intent-progress\";\n  data: {\n    chat_log_delta:\n      | Partial<ConversationChatLogAssistantDelta>\n      // These always come in 1 chunk\n      | ConversationChatLogToolResultDelta;\n  };\n}\n\ninterface PipelineIntentEndEvent extends PipelineEventBase {\n  type: \"intent-end\";\n  data: {\n    processed_locally: boolean;\n    intent_output: ConversationResult;\n  };\n}\n\ninterface PipelineTTSStartEvent extends PipelineEventBase {\n  type: \"tts-start\";\n  data: {\n    engine: string;\n    language: string;\n    voice: string;\n    tts_input: string;\n  };\n}\ninterface PipelineTTSEndEvent extends PipelineEventBase {\n  type: \"tts-end\";\n  data: {\n    tts_output: ResolvedMediaSource;\n  };\n}\n\nexport type PipelineRunEvent =\n  | PipelineRunStartEvent\n  | PipelineRunEndEvent\n  | PipelineErrorEvent\n  | PipelineWakeWordStartEvent\n  | PipelineWakeWordEndEvent\n  | PipelineSTTStartEvent\n  | PipelineSTTEndEvent\n  | PipelineIntentStartEvent\n  | PipelineIntentProgressEvent\n  | PipelineIntentEndEvent\n  | PipelineTTSStartEvent\n  | PipelineTTSEndEvent;\n\nexport type PipelineRunOptions = (\n  | {\n      start_stage: \"intent\" | \"tts\";\n      input: { text: string };\n    }\n  | {\n      start_stage: \"stt\";\n      input: { sample_rate: number };\n    }\n  | {\n      start_stage: \"wake_word\";\n      input: {\n        sample_rate: number;\n        timeout?: number;\n        audio_seconds_to_buffer?: number;\n      };\n    }\n) & {\n  end_stage: \"stt\" | \"intent\" | \"tts\";\n  pipeline?: string;\n  conversation_id?: string | null;\n};\n\nexport interface PipelineRun {\n  init_options?: PipelineRunOptions;\n  events: PipelineRunEvent[];\n  stage: \"ready\" | \"wake_word\" | \"stt\" | \"intent\" | \"tts\" | \"done\" | \"error\";\n  run: PipelineRunStartEvent[\"data\"];\n  error?: PipelineErrorEvent[\"data\"];\n  wake_word?: PipelineWakeWordStartEvent[\"data\"] &\n    Partial<PipelineWakeWordEndEvent[\"data\"]> & { done: boolean };\n  stt?: PipelineSTTStartEvent[\"data\"] &\n    Partial<PipelineSTTEndEvent[\"data\"]> & { done: boolean };\n  intent?: PipelineIntentStartEvent[\"data\"] &\n    Partial<PipelineIntentEndEvent[\"data\"]> & { done: boolean };\n  tts?: PipelineTTSStartEvent[\"data\"] &\n    Partial<PipelineTTSEndEvent[\"data\"]> & { done: boolean };\n}\n\nexport const processEvent = (\n  run: PipelineRun | undefined,\n  event: PipelineRunEvent,\n  options?: PipelineRunOptions\n): PipelineRun | undefined => {\n  if (event.type === \"run-start\") {\n    run = {\n      init_options: options,\n      stage: \"ready\",\n      run: event.data,\n      events: [event],\n    };\n    return run;\n  }\n\n  if (!run) {\n    // eslint-disable-next-line no-console\n    console.warn(\"Received unexpected event before receiving session\", event);\n    return undefined;\n  }\n\n  if (event.type === \"wake_word-start\") {\n    run = {\n      ...run,\n      stage: \"wake_word\",\n      wake_word: { ...event.data, done: false },\n    };\n  } else if (event.type === \"wake_word-end\") {\n    run = {\n      ...run,\n      wake_word: { ...run.wake_word!, ...event.data, done: true },\n    };\n  } else if (event.type === \"stt-start\") {\n    run = {\n      ...run,\n      stage: \"stt\",\n      stt: { ...event.data, done: false },\n    };\n  } else if (event.type === \"stt-end\") {\n    run = {\n      ...run,\n      stt: { ...run.stt!, ...event.data, done: true },\n    };\n  } else if (event.type === \"intent-start\") {\n    run = {\n      ...run,\n      stage: \"intent\",\n      intent: { ...event.data, done: false },\n    };\n  } else if (event.type === \"intent-end\") {\n    run = {\n      ...run,\n      intent: { ...run.intent!, ...event.data, done: true },\n    };\n  } else if (event.type === \"tts-start\") {\n    run = {\n      ...run,\n      stage: \"tts\",\n      tts: { ...event.data, done: false },\n    };\n  } else if (event.type === \"tts-end\") {\n    run = {\n      ...run,\n      tts: { ...run.tts!, ...event.data, done: true },\n    };\n  } else if (event.type === \"run-end\") {\n    run = { ...run, stage: \"done\" };\n  } else if (event.type === \"error\") {\n    run = { ...run, stage: \"error\", error: event.data };\n  } else {\n    run = { ...run };\n  }\n\n  run.events = [...run.events, event];\n\n  return run;\n};\n\nexport const runDebugAssistPipeline = (\n  hass: HomeAssistant,\n  callback: (run: PipelineRun) => void,\n  options: PipelineRunOptions\n) => {\n  let run: PipelineRun | undefined;\n\n  const unsubProm = runAssistPipeline(\n    hass,\n    (updateEvent) => {\n      run = processEvent(run, updateEvent, options);\n\n      if (updateEvent.type === \"run-end\" || updateEvent.type === \"error\") {\n        unsubProm.then((unsub) => unsub());\n      }\n\n      if (run) {\n        callback(run);\n      }\n    },\n    options\n  );\n\n  return unsubProm;\n};\n\nexport const runAssistPipeline = (\n  hass: HomeAssistant,\n  callback: (event: PipelineRunEvent) => void,\n  options: PipelineRunOptions\n) =>\n  hass.connection.subscribeMessage<PipelineRunEvent>(callback, {\n    ...options,\n    type: \"assist_pipeline/run\",\n  });\n\nexport const listAssistPipelineRuns = (\n  hass: HomeAssistant,\n  pipeline_id: string\n) =>\n  hass.callWS<{\n    pipeline_runs: AssistRunListing[];\n  }>({\n    type: \"assist_pipeline/pipeline_debug/list\",\n    pipeline_id,\n  });\n\nexport const getAssistPipelineRun = (\n  hass: HomeAssistant,\n  pipeline_id: string,\n  pipeline_run_id: string\n) =>\n  hass.callWS<{\n    events: PipelineRunEvent[];\n  }>({\n    type: \"assist_pipeline/pipeline_debug/get\",\n    pipeline_id,\n    pipeline_run_id,\n  });\n\nexport const listAssistPipelines = (hass: HomeAssistant) =>\n  hass.callWS<{\n    pipelines: AssistPipeline[];\n    preferred_pipeline: string | null;\n  }>({\n    type: \"assist_pipeline/pipeline/list\",\n  });\n\nexport const getAssistPipeline = (hass: HomeAssistant, pipeline_id?: string) =>\n  hass.callWS<AssistPipeline>({\n    type: \"assist_pipeline/pipeline/get\",\n    pipeline_id,\n  });\n\nexport const createAssistPipeline = (\n  hass: HomeAssistant,\n  pipeline: AssistPipelineMutableParams\n) =>\n  hass.callWS<AssistPipeline>({\n    type: \"assist_pipeline/pipeline/create\",\n    ...pipeline,\n  });\n\nexport const updateAssistPipeline = (\n  hass: HomeAssistant,\n  pipeline_id: string,\n  pipeline: AssistPipelineMutableParams\n) =>\n  hass.callWS<AssistPipeline>({\n    type: \"assist_pipeline/pipeline/update\",\n    pipeline_id,\n    ...pipeline,\n  });\n\nexport const setAssistPipelinePreferred = (\n  hass: HomeAssistant,\n  pipeline_id: string\n) =>\n  hass.callWS({\n    type: \"assist_pipeline/pipeline/set_preferred\",\n    pipeline_id,\n  });\n\nexport const deleteAssistPipeline = (hass: HomeAssistant, pipelineId: string) =>\n  hass.callWS<undefined>({\n    type: \"assist_pipeline/pipeline/delete\",\n    pipeline_id: pipelineId,\n  });\n\nexport const fetchAssistPipelineLanguages = (hass: HomeAssistant) =>\n  hass.callWS<{ languages: string[] }>({\n    type: \"assist_pipeline/language/list\",\n  });\n\nexport const listAssistDevices = (hass: HomeAssistant) =>\n  hass.callWS<AssistDevice[]>({\n    type: \"assist_pipeline/device/list\",\n  });\n"],"names":["formatLanguageCode","languageCode","locale","_formatLanguageCodeMe","_formatLanguageCodeMe2","formatLanguageCodeMem","of","_unused","memoizeOne","Intl","DisplayNames","language","type","fallback","PREFERRED","LAST_USED","_decorate","customElement","_initialize","_LitElement","HaAssistPipelinePicker","constructor","args","F","d","kind","decorators","property","key","value","attribute","Boolean","reflect","state","this","includeLastUsed","_this$value","_this$_pipelines$find","_pipelines","nothing","_default","html","_t","_","label","hass","localize","required","disabled","_changed","stopPropagation","_t2","preferred","find","pipeline","id","_preferredPipeline","name","map","_t3","changedProperties","_superPropGet","listAssistPipelines","then","pipelines","preferred_pipeline","static","css","_t4","ev","target","undefined","fireEvent","LitElement","HaAssistPipelineSelector","_this$selector$assist","helper","selector","assist_pipeline","include_last_used","processEvent","run","event","options","init_options","stage","data","events","Object","assign","wake_word","done","stt","intent","tts","error","console","warn","runAssistPipeline","callback","connection","subscribeMessage","callWS","getAssistPipeline","pipeline_id","createAssistPipeline","updateAssistPipeline","fetchAssistPipelineLanguages"],"mappings":"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"}