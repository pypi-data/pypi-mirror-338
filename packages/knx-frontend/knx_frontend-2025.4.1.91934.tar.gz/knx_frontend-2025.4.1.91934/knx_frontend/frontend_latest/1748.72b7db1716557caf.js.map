{"version":3,"file":"1748.72b7db1716557caf.js","sources":["webpack://knx-frontend/./homeassistant-frontend/src/common/entity/compute_state_name.ts","webpack://knx-frontend/./homeassistant-frontend/src/components/entity/ha-statistic-picker.ts","webpack://knx-frontend/./homeassistant-frontend/src/components/entity/ha-statistics-picker.ts","webpack://knx-frontend/./homeassistant-frontend/src/components/ha-selector/ha-selector-statistic.ts","webpack://knx-frontend/./homeassistant-frontend/src/data/entity.ts","webpack://knx-frontend/./homeassistant-frontend/src/data/recorder.ts","webpack://knx-frontend/./homeassistant-frontend/src/util/documentation-url.ts","webpack://knx-frontend/../src/directives/private-async-helpers.ts","webpack://knx-frontend/../src/directives/until.ts"],"sourcesContent":["import type { HassEntity } from \"home-assistant-js-websocket\";\nimport { computeObjectId } from \"./compute_object_id\";\n\nexport const computeStateNameFromEntityAttributes = (\n  entityId: string,\n  attributes: Record<string, any>\n): string =>\n  attributes.friendly_name === undefined\n    ? computeObjectId(entityId).replace(/_/g, \" \")\n    : (attributes.friendly_name ?? \"\").toString();\n\nexport const computeStateName = (stateObj: HassEntity): string =>\n  computeStateNameFromEntityAttributes(stateObj.entity_id, stateObj.attributes);\n","import \"@material/mwc-list/mwc-list-item\";\nimport type { HassEntity } from \"home-assistant-js-websocket\";\nimport type { PropertyValues, TemplateResult } from \"lit\";\nimport { html, LitElement, nothing } from \"lit\";\nimport type { ComboBoxLitRenderer } from \"@vaadin/combo-box/lit\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { ensureArray } from \"../../common/array/ensure-array\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport { stringCompare } from \"../../common/string/compare\";\nimport type { StatisticsMetaData } from \"../../data/recorder\";\nimport { getStatisticIds, getStatisticLabel } from \"../../data/recorder\";\nimport type { ValueChangedEvent, HomeAssistant } from \"../../types\";\nimport { documentationUrl } from \"../../util/documentation-url\";\nimport \"../ha-combo-box\";\nimport type { HaComboBox } from \"../ha-combo-box\";\nimport \"../ha-svg-icon\";\nimport \"./state-badge\";\nimport type { ScorableTextItem } from \"../../common/string/filter/sequence-matching\";\nimport { fuzzyFilterSort } from \"../../common/string/filter/sequence-matching\";\n\ninterface StatisticItem extends ScorableTextItem {\n  id: string;\n  name: string;\n  state?: HassEntity;\n}\n\n@customElement(\"ha-statistic-picker\")\nexport class HaStatisticPicker extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public label?: string;\n\n  @property() public value?: string;\n\n  @property({ attribute: \"statistic-types\" })\n  public statisticTypes?: \"mean\" | \"sum\";\n\n  @property({ type: Boolean, attribute: \"allow-custom-entity\" })\n  public allowCustomEntity;\n\n  @property({ attribute: false, type: Array })\n  public statisticIds?: StatisticsMetaData[];\n\n  @property({ type: Boolean }) public disabled = false;\n\n  /**\n   * Show only statistics natively stored with these units of measurements.\n   * @type {Array}\n   * @attr include-statistics-unit-of-measurement\n   */\n  @property({\n    type: Array,\n    attribute: \"include-statistics-unit-of-measurement\",\n  })\n  public includeStatisticsUnitOfMeasurement?: string | string[];\n\n  /**\n   * Show only statistics with these unit classes.\n   * @attr include-unit-class\n   */\n  @property({ attribute: \"include-unit-class\" })\n  public includeUnitClass?: string | string[];\n\n  /**\n   * Show only statistics with these device classes.\n   * @attr include-device-class\n   */\n  @property({ attribute: \"include-device-class\" })\n  public includeDeviceClass?: string | string[];\n\n  /**\n   * Show only statistics on entities.\n   * @type {Boolean}\n   * @attr entities-only\n   */\n  @property({ type: Boolean, attribute: \"entities-only\" })\n  public entitiesOnly = false;\n\n  /**\n   * List of statistics to be excluded.\n   * @type {Array}\n   * @attr exclude-statistics\n   */\n  @property({ type: Array, attribute: \"exclude-statistics\" })\n  public excludeStatistics?: string[];\n\n  @property({ attribute: false }) public helpMissingEntityUrl =\n    \"/more-info/statistics/\";\n\n  @state() private _opened?: boolean;\n\n  @query(\"ha-combo-box\", true) public comboBox!: HaComboBox;\n\n  private _init = false;\n\n  private _statistics: StatisticItem[] = [];\n\n  @state() private _filteredItems?: StatisticItem[] = undefined;\n\n  private _rowRenderer: ComboBoxLitRenderer<StatisticItem> = (item) =>\n    html`<mwc-list-item graphic=\"avatar\" twoline>\n      ${item.state\n        ? html`<state-badge\n            slot=\"graphic\"\n            .stateObj=${item.state}\n            .hass=${this.hass}\n          ></state-badge>`\n        : \"\"}\n      <span>${item.name}</span>\n      <span slot=\"secondary\"\n        >${item.id === \"\" || item.id === \"__missing\"\n          ? html`<a\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              href=${documentationUrl(this.hass, this.helpMissingEntityUrl)}\n              >${this.hass.localize(\n                \"ui.components.statistic-picker.learn_more\"\n              )}</a\n            >`\n          : item.id}</span\n      >\n    </mwc-list-item>`;\n\n  private _getStatistics = memoizeOne(\n    (\n      statisticIds: StatisticsMetaData[],\n      includeStatisticsUnitOfMeasurement?: string | string[],\n      includeUnitClass?: string | string[],\n      includeDeviceClass?: string | string[],\n      entitiesOnly?: boolean,\n      excludeStatistics?: string[],\n      value?: string\n    ): StatisticItem[] => {\n      if (!statisticIds.length) {\n        return [\n          {\n            id: \"\",\n            name: this.hass.localize(\n              \"ui.components.statistic-picker.no_statistics\"\n            ),\n            strings: [],\n          },\n        ];\n      }\n\n      if (includeStatisticsUnitOfMeasurement) {\n        const includeUnits: (string | null)[] = ensureArray(\n          includeStatisticsUnitOfMeasurement\n        );\n        statisticIds = statisticIds.filter((meta) =>\n          includeUnits.includes(meta.statistics_unit_of_measurement)\n        );\n      }\n      if (includeUnitClass) {\n        const includeUnitClasses: (string | null)[] =\n          ensureArray(includeUnitClass);\n        statisticIds = statisticIds.filter((meta) =>\n          includeUnitClasses.includes(meta.unit_class)\n        );\n      }\n      if (includeDeviceClass) {\n        const includeDeviceClasses: (string | null)[] =\n          ensureArray(includeDeviceClass);\n        statisticIds = statisticIds.filter((meta) => {\n          const stateObj = this.hass.states[meta.statistic_id];\n          if (!stateObj) {\n            return true;\n          }\n          return includeDeviceClasses.includes(\n            stateObj.attributes.device_class || \"\"\n          );\n        });\n      }\n\n      const output: StatisticItem[] = [];\n      statisticIds.forEach((meta) => {\n        if (\n          excludeStatistics &&\n          meta.statistic_id !== value &&\n          excludeStatistics.includes(meta.statistic_id)\n        ) {\n          return;\n        }\n        const entityState = this.hass.states[meta.statistic_id];\n        if (!entityState) {\n          if (!entitiesOnly) {\n            const id = meta.statistic_id;\n            const name = getStatisticLabel(this.hass, meta.statistic_id, meta);\n            output.push({\n              id,\n              name,\n              strings: [id, name],\n            });\n          }\n          return;\n        }\n        const id = meta.statistic_id;\n        const name = getStatisticLabel(this.hass, meta.statistic_id, meta);\n        output.push({\n          id,\n          name,\n          state: entityState,\n          strings: [id, name],\n        });\n      });\n\n      if (!output.length) {\n        return [\n          {\n            id: \"\",\n            name: this.hass.localize(\"ui.components.statistic-picker.no_match\"),\n            strings: [],\n          },\n        ];\n      }\n\n      if (output.length > 1) {\n        output.sort((a, b) =>\n          stringCompare(a.name || \"\", b.name || \"\", this.hass.locale.language)\n        );\n      }\n\n      output.push({\n        id: \"__missing\",\n        name: this.hass.localize(\n          \"ui.components.statistic-picker.missing_entity\"\n        ),\n        strings: [],\n      });\n\n      return output;\n    }\n  );\n\n  public open() {\n    this.comboBox?.open();\n  }\n\n  public focus() {\n    this.comboBox?.focus();\n  }\n\n  public willUpdate(changedProps: PropertyValues) {\n    if (\n      (!this.hasUpdated && !this.statisticIds) ||\n      changedProps.has(\"statisticTypes\")\n    ) {\n      this._getStatisticIds();\n    }\n    if (\n      (!this._init && this.statisticIds) ||\n      (changedProps.has(\"_opened\") && this._opened)\n    ) {\n      this._init = true;\n      if (this.hasUpdated) {\n        this._statistics = this._getStatistics(\n          this.statisticIds!,\n          this.includeStatisticsUnitOfMeasurement,\n          this.includeUnitClass,\n          this.includeDeviceClass,\n          this.entitiesOnly,\n          this.excludeStatistics,\n          this.value\n        );\n      } else {\n        this.updateComplete.then(() => {\n          this._statistics = this._getStatistics(\n            this.statisticIds!,\n            this.includeStatisticsUnitOfMeasurement,\n            this.includeUnitClass,\n            this.includeDeviceClass,\n            this.entitiesOnly,\n            this.excludeStatistics,\n            this.value\n          );\n        });\n      }\n    }\n  }\n\n  protected render(): TemplateResult | typeof nothing {\n    if (this._statistics.length === 0) {\n      return nothing;\n    }\n\n    return html`\n      <ha-combo-box\n        .hass=${this.hass}\n        .label=${this.label === undefined && this.hass\n          ? this.hass.localize(\"ui.components.statistic-picker.statistic\")\n          : this.label}\n        .value=${this._value}\n        .renderer=${this._rowRenderer}\n        .disabled=${this.disabled}\n        .allowCustomValue=${this.allowCustomEntity}\n        .items=${this._statistics}\n        .filteredItems=${this._filteredItems ?? this._statistics}\n        item-value-path=\"id\"\n        item-id-path=\"id\"\n        item-label-path=\"name\"\n        @opened-changed=${this._openedChanged}\n        @value-changed=${this._statisticChanged}\n        @filter-changed=${this._filterChanged}\n      ></ha-combo-box>\n    `;\n  }\n\n  private async _getStatisticIds() {\n    this.statisticIds = await getStatisticIds(this.hass, this.statisticTypes);\n  }\n\n  private get _value() {\n    return this.value || \"\";\n  }\n\n  private _statisticChanged(ev: ValueChangedEvent<string>) {\n    ev.stopPropagation();\n    let newValue = ev.detail.value;\n    if (newValue === \"__missing\") {\n      newValue = \"\";\n    }\n\n    if (newValue !== this._value) {\n      this._setValue(newValue);\n    }\n  }\n\n  private _openedChanged(ev: ValueChangedEvent<boolean>) {\n    this._opened = ev.detail.value;\n  }\n\n  private _filterChanged(ev: CustomEvent): void {\n    const filterString = ev.detail.value.toLowerCase();\n    this._filteredItems = filterString.length\n      ? fuzzyFilterSort<StatisticItem>(filterString, this._statistics)\n      : undefined;\n  }\n\n  private _setValue(value: string) {\n    this.value = value;\n    setTimeout(() => {\n      fireEvent(this, \"value-changed\", { value });\n      fireEvent(this, \"change\");\n    }, 0);\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-statistic-picker\": HaStatisticPicker;\n  }\n}\n","import { css, html, LitElement, nothing } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { repeat } from \"lit/directives/repeat\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport type { ValueChangedEvent, HomeAssistant } from \"../../types\";\nimport \"./ha-statistic-picker\";\n\n@customElement(\"ha-statistics-picker\")\nclass HaStatisticsPicker extends LitElement {\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @property({ type: Array }) public value?: string[];\n\n  @property({ attribute: false, type: Array }) public statisticIds?: string[];\n\n  @property({ attribute: \"statistic-types\" })\n  public statisticTypes?: \"mean\" | \"sum\";\n\n  @property({ attribute: \"picked-statistic-label\" })\n  public pickedStatisticLabel?: string;\n\n  @property({ attribute: \"pick-statistic-label\" })\n  public pickStatisticLabel?: string;\n\n  @property({ type: Boolean, attribute: \"allow-custom-entity\" })\n  public allowCustomEntity;\n\n  /**\n   * Show only statistics natively stored with these units of measurements.\n   * @attr include-statistics-unit-of-measurement\n   */\n  @property({\n    attribute: \"include-statistics-unit-of-measurement\",\n  })\n  public includeStatisticsUnitOfMeasurement?: string[] | string;\n\n  /**\n   * Show only statistics with these unit classes.\n   * @attr include-unit-class\n   */\n  @property({ attribute: \"include-unit-class\" })\n  public includeUnitClass?: string | string[];\n\n  /**\n   * Show only statistics with these device classes.\n   * @attr include-device-class\n   */\n  @property({ attribute: \"include-device-class\" })\n  public includeDeviceClass?: string | string[];\n\n  /**\n   * Ignore filtering of statistics type and units when only a single statistic is selected.\n   * @type {boolean}\n   * @attr ignore-restrictions-on-first-statistic\n   */\n  @property({\n    type: Boolean,\n    attribute: \"ignore-restrictions-on-first-statistic\",\n  })\n  public ignoreRestrictionsOnFirstStatistic = false;\n\n  protected render() {\n    if (!this.hass) {\n      return nothing;\n    }\n\n    const ignoreRestriction =\n      this.ignoreRestrictionsOnFirstStatistic &&\n      this._currentStatistics.length <= 1;\n\n    const includeStatisticsUnitCurrent = ignoreRestriction\n      ? undefined\n      : this.includeStatisticsUnitOfMeasurement;\n    const includeUnitClassCurrent = ignoreRestriction\n      ? undefined\n      : this.includeUnitClass;\n    const includeDeviceClassCurrent = ignoreRestriction\n      ? undefined\n      : this.includeDeviceClass;\n    const includeStatisticTypesCurrent = ignoreRestriction\n      ? undefined\n      : this.statisticTypes;\n\n    return html`\n      ${repeat(\n        this._currentStatistics,\n        (statisticId) => statisticId,\n        (statisticId) => html`\n          <div>\n            <ha-statistic-picker\n              .curValue=${statisticId}\n              .hass=${this.hass}\n              .includeStatisticsUnitOfMeasurement=${includeStatisticsUnitCurrent}\n              .includeUnitClass=${includeUnitClassCurrent}\n              .includeDeviceClass=${includeDeviceClassCurrent}\n              .value=${statisticId}\n              .statisticTypes=${includeStatisticTypesCurrent}\n              .statisticIds=${this.statisticIds}\n              .label=${this.pickedStatisticLabel}\n              .excludeStatistics=${this.value}\n              .allowCustomEntity=${this.allowCustomEntity}\n              @value-changed=${this._statisticChanged}\n            ></ha-statistic-picker>\n          </div>\n        `\n      )}\n      <div>\n        <ha-statistic-picker\n          .hass=${this.hass}\n          .includeStatisticsUnitOfMeasurement=${this\n            .includeStatisticsUnitOfMeasurement}\n          .includeUnitClass=${this.includeUnitClass}\n          .includeDeviceClass=${this.includeDeviceClass}\n          .statisticTypes=${this.statisticTypes}\n          .statisticIds=${this.statisticIds}\n          .label=${this.pickStatisticLabel}\n          .excludeStatistics=${this.value}\n          .allowCustomEntity=${this.allowCustomEntity}\n          @value-changed=${this._addStatistic}\n        ></ha-statistic-picker>\n      </div>\n    `;\n  }\n\n  private get _currentStatistics() {\n    return this.value || [];\n  }\n\n  private async _updateStatistics(entities) {\n    this.value = entities;\n\n    fireEvent(this, \"value-changed\", {\n      value: entities,\n    });\n  }\n\n  private _statisticChanged(event: ValueChangedEvent<string>) {\n    event.stopPropagation();\n    const oldValue = (event.currentTarget as any).curValue;\n    const newValue = event.detail.value;\n    if (newValue === oldValue) {\n      return;\n    }\n    const currentStatistics = this._currentStatistics;\n    if (!newValue || currentStatistics.includes(newValue)) {\n      this._updateStatistics(\n        currentStatistics.filter((ent) => ent !== oldValue)\n      );\n      return;\n    }\n    this._updateStatistics(\n      currentStatistics.map((ent) => (ent === oldValue ? newValue : ent))\n    );\n  }\n\n  private async _addStatistic(event: ValueChangedEvent<string>) {\n    event.stopPropagation();\n    const toAdd = event.detail.value;\n    if (!toAdd) {\n      return;\n    }\n    (event.currentTarget as any).value = \"\";\n    if (!toAdd) {\n      return;\n    }\n    const currentEntities = this._currentStatistics;\n    if (currentEntities.includes(toAdd)) {\n      return;\n    }\n\n    this._updateStatistics([...currentEntities, toAdd]);\n  }\n\n  static styles = css`\n    :host {\n      width: 200px;\n      display: block;\n    }\n    ha-statistic-picker {\n      display: block;\n      width: 100%;\n      margin-top: 8px;\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-statistics-picker\": HaStatisticsPicker;\n  }\n}\n","import { html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport type { StatisticSelector } from \"../../data/selector\";\nimport type { HomeAssistant } from \"../../types\";\nimport \"../entity/ha-statistics-picker\";\n\n@customElement(\"ha-selector-statistic\")\nexport class HaStatisticSelector extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public selector!: StatisticSelector;\n\n  @property() public value?: any;\n\n  @property() public label?: string;\n\n  @property() public helper?: string;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public required = true;\n\n  protected render() {\n    if (!this.selector.statistic.multiple) {\n      return html`<ha-statistic-picker\n        .hass=${this.hass}\n        .value=${this.value}\n        .label=${this.label}\n        .helper=${this.helper}\n        .disabled=${this.disabled}\n        .required=${this.required}\n        allow-custom-entity\n      ></ha-statistic-picker>`;\n    }\n\n    return html`\n      ${this.label ? html`<label>${this.label}</label>` : \"\"}\n      <ha-statistics-picker\n        .hass=${this.hass}\n        .value=${this.value}\n        .helper=${this.helper}\n        .disabled=${this.disabled}\n        .required=${this.required}\n      ></ha-statistics-picker>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-selector-statistic\": HaStatisticSelector;\n  }\n}\n","import { arrayLiteralIncludes } from \"../common/array/literal-includes\";\n\nexport const UNAVAILABLE = \"unavailable\";\nexport const UNKNOWN = \"unknown\";\nexport const ON = \"on\";\nexport const OFF = \"off\";\n\nexport const UNAVAILABLE_STATES = [UNAVAILABLE, UNKNOWN] as const;\nexport const OFF_STATES = [UNAVAILABLE, UNKNOWN, OFF] as const;\n\nexport const isUnavailableState = arrayLiteralIncludes(UNAVAILABLE_STATES);\nexport const isOffState = arrayLiteralIncludes(OFF_STATES);\n","import type { Connection } from \"home-assistant-js-websocket\";\nimport { computeStateName } from \"../common/entity/compute_state_name\";\nimport type { HaDurationData } from \"../components/ha-duration-input\";\nimport type { HomeAssistant } from \"../types\";\n\nexport interface RecorderInfo {\n  backlog: number | null;\n  db_in_default_location: boolean;\n  max_backlog: number;\n  migration_in_progress: boolean;\n  migration_is_live: boolean;\n  recording: boolean;\n  thread_running: boolean;\n}\n\nexport type StatisticType = \"change\" | \"state\" | \"sum\" | \"min\" | \"max\" | \"mean\";\n\nexport type Statistics = Record<string, StatisticValue[]>;\n\nexport interface StatisticValue {\n  start: number;\n  end: number;\n  change?: number | null;\n  last_reset?: number | null;\n  max?: number | null;\n  mean?: number | null;\n  min?: number | null;\n  sum?: number | null;\n  state?: number | null;\n}\n\nexport interface Statistic {\n  max: number | null;\n  mean: number | null;\n  min: number | null;\n  change: number | null;\n}\n\nexport enum StatisticMeanType {\n  NONE = 0,\n  ARITHMETIC = 1,\n  CIRCULAR = 2,\n}\n\nexport interface StatisticsMetaData {\n  statistics_unit_of_measurement: string | null;\n  statistic_id: string;\n  source: string;\n  name?: string | null;\n  has_sum: boolean;\n  mean_type: StatisticMeanType;\n  unit_class: string | null;\n}\n\nexport const STATISTIC_TYPES: StatisticsValidationResult[\"type\"][] = [\n  \"entity_not_recorded\",\n  \"entity_no_longer_recorded\",\n  \"state_class_removed\",\n  \"units_changed\",\n  \"mean_type_changed\",\n  \"no_state\",\n];\n\nexport type StatisticsValidationResult =\n  | StatisticsValidationResultNoState\n  | StatisticsValidationResultEntityNotRecorded\n  | StatisticsValidationResultEntityNoLongerRecorded\n  | StatisticsValidationResultStateClassRemoved\n  | StatisticsValidationResultUnitsChanged\n  | StatisticsValidationResultMeanTypeChanged;\n\nexport interface StatisticsValidationResultNoState {\n  type: \"no_state\";\n  data: { statistic_id: string };\n}\n\nexport interface StatisticsValidationResultEntityNoLongerRecorded {\n  type: \"entity_no_longer_recorded\";\n  data: { statistic_id: string };\n}\n\nexport interface StatisticsValidationResultEntityNotRecorded {\n  type: \"entity_not_recorded\";\n  data: { statistic_id: string };\n}\n\nexport interface StatisticsValidationResultStateClassRemoved {\n  type: \"state_class_removed\";\n  data: { statistic_id: string };\n}\n\nexport interface StatisticsValidationResultUnitsChanged {\n  type: \"units_changed\";\n  data: {\n    statistic_id: string;\n    state_unit: string;\n    metadata_unit: string;\n    supported_unit: string;\n  };\n}\n\nexport interface StatisticsValidationResultMeanTypeChanged {\n  type: \"mean_type_changed\";\n  data: {\n    statistic_id: string;\n    state_mean_type: StatisticMeanType;\n    metadata_mean_type: StatisticMeanType;\n  };\n}\n\nexport interface StatisticsUnitConfiguration {\n  energy?: \"Wh\" | \"kWh\" | \"MWh\" | \"GJ\";\n  power?: \"W\" | \"kW\";\n  pressure?:\n    | \"Pa\"\n    | \"hPa\"\n    | \"kPa\"\n    | \"bar\"\n    | \"cbar\"\n    | \"mbar\"\n    | \"inHg\"\n    | \"psi\"\n    | \"mmHg\";\n  temperature?: \"°C\" | \"°F\" | \"K\";\n  volume?: \"L\" | \"gal\" | \"ft³\" | \"m³\";\n}\n\nconst _statisticTypes = [\n  \"change\",\n  \"last_reset\",\n  \"max\",\n  \"mean\",\n  \"min\",\n  \"state\",\n  \"sum\",\n] as const;\nexport type StatisticsTypes = (typeof _statisticTypes)[number][];\n\nexport type StatisticsValidationResults = Record<\n  string,\n  StatisticsValidationResult[]\n>;\n\nexport const getRecorderInfo = (conn: Connection) =>\n  conn.sendMessagePromise<RecorderInfo>({\n    type: \"recorder/info\",\n  });\n\nexport const getStatisticIds = (\n  hass: HomeAssistant,\n  statistic_type?: \"mean\" | \"sum\"\n) =>\n  hass.callWS<StatisticsMetaData[]>({\n    type: \"recorder/list_statistic_ids\",\n    statistic_type,\n  });\n\nexport const getStatisticMetadata = (\n  hass: HomeAssistant,\n  statistic_ids?: string[]\n) =>\n  hass.callWS<StatisticsMetaData[]>({\n    type: \"recorder/get_statistics_metadata\",\n    statistic_ids,\n  });\n\nexport const fetchStatistics = (\n  hass: HomeAssistant,\n  startTime: Date,\n  endTime?: Date,\n  statistic_ids?: string[],\n  period: \"5minute\" | \"hour\" | \"day\" | \"week\" | \"month\" = \"hour\",\n  units?: StatisticsUnitConfiguration,\n  types?: StatisticsTypes\n) =>\n  hass.callWS<Statistics>({\n    type: \"recorder/statistics_during_period\",\n    start_time: startTime.toISOString(),\n    end_time: endTime?.toISOString(),\n    statistic_ids,\n    period,\n    units,\n    types,\n  });\n\nexport const fetchStatistic = (\n  hass: HomeAssistant,\n  statistic_id: string,\n  period: {\n    fixed_period?: { start: string | Date; end: string | Date };\n    calendar?: { period: string; offset: number };\n    rolling_window?: { duration: HaDurationData; offset: HaDurationData };\n  },\n  units?: StatisticsUnitConfiguration\n) =>\n  hass.callWS<Statistic>({\n    type: \"recorder/statistic_during_period\",\n    statistic_id,\n    units,\n    fixed_period: period.fixed_period\n      ? {\n          start_time:\n            period.fixed_period.start instanceof Date\n              ? period.fixed_period.start.toISOString()\n              : period.fixed_period.start,\n          end_time:\n            period.fixed_period.end instanceof Date\n              ? period.fixed_period.end.toISOString()\n              : period.fixed_period.end,\n        }\n      : undefined,\n    calendar: period.calendar,\n    rolling_window: period.rolling_window,\n  });\n\nexport const validateStatistics = (hass: HomeAssistant) =>\n  hass.callWS<StatisticsValidationResults>({\n    type: \"recorder/validate_statistics\",\n  });\n\nexport const updateStatisticsMetadata = (\n  hass: HomeAssistant,\n  statistic_id: string,\n  unit_of_measurement: string | null\n) =>\n  hass.callWS<undefined>({\n    type: \"recorder/update_statistics_metadata\",\n    statistic_id,\n    unit_of_measurement,\n  });\n\nexport const clearStatistics = (hass: HomeAssistant, statistic_ids: string[]) =>\n  hass.callWS<undefined>({\n    type: \"recorder/clear_statistics\",\n    statistic_ids,\n  });\n\nexport const calculateStatisticSumGrowth = (\n  values: StatisticValue[]\n): number | null => {\n  let growth: number | null = null;\n\n  if (!values) {\n    return null;\n  }\n\n  for (const value of values) {\n    if (value.change === null || value.change === undefined) {\n      continue;\n    }\n    if (growth === null) {\n      growth = value.change;\n    } else {\n      growth += value.change;\n    }\n  }\n\n  return growth;\n};\n\nexport const calculateStatisticsSumGrowth = (\n  data: Statistics,\n  stats: string[]\n): number | null => {\n  let totalGrowth: number | null = null;\n\n  for (const stat of stats) {\n    if (!(stat in data)) {\n      continue;\n    }\n    const statGrowth = calculateStatisticSumGrowth(data[stat]);\n\n    if (statGrowth === null) {\n      continue;\n    }\n    if (totalGrowth === null) {\n      totalGrowth = statGrowth;\n    } else {\n      totalGrowth += statGrowth;\n    }\n  }\n\n  return totalGrowth;\n};\n\nexport const statisticsHaveType = (\n  stats: StatisticValue[],\n  type: StatisticType\n) => stats.some((stat) => stat[type] !== undefined && stat[type] !== null);\n\nconst mean_stat_types: readonly StatisticType[] = [\"mean\", \"min\", \"max\"];\nconst sum_stat_types: readonly StatisticType[] = [\"sum\", \"state\", \"change\"];\n\nexport const statisticsMetaHasType = (\n  metadata: StatisticsMetaData,\n  type: StatisticType\n) => {\n  if (\n    mean_stat_types.includes(type) &&\n    metadata.mean_type !== StatisticMeanType.NONE\n  ) {\n    return true;\n  }\n  if (sum_stat_types.includes(type) && metadata.has_sum) {\n    return true;\n  }\n  return false;\n};\n\nexport const adjustStatisticsSum = (\n  hass: HomeAssistant,\n  statistic_id: string,\n  start_time: number,\n  adjustment: number,\n  adjustment_unit_of_measurement: string | null\n): Promise<void> => {\n  const start_time_iso = new Date(start_time).toISOString();\n  return hass.callWS<undefined>({\n    type: \"recorder/adjust_sum_statistics\",\n    statistic_id,\n    start_time: start_time_iso,\n    adjustment,\n    adjustment_unit_of_measurement,\n  });\n};\n\nexport const getStatisticLabel = (\n  hass: HomeAssistant,\n  statisticsId: string,\n  statisticsMetaData: StatisticsMetaData | undefined\n): string => {\n  const entity = hass.states[statisticsId];\n  if (entity) {\n    return computeStateName(entity);\n  }\n  return statisticsMetaData?.name || statisticsId;\n};\n\nexport const getDisplayUnit = (\n  hass: HomeAssistant,\n  statisticsId: string | undefined,\n  statisticsMetaData: StatisticsMetaData | undefined\n): string | null | undefined => {\n  let unit: string | undefined;\n  if (statisticsId) {\n    unit = hass.states[statisticsId]?.attributes.unit_of_measurement;\n  }\n  return unit === undefined\n    ? statisticsMetaData?.statistics_unit_of_measurement\n    : unit;\n};\n\nexport const isExternalStatistic = (statisticsId: string): boolean =>\n  statisticsId.includes(\":\");\n\nexport const updateStatisticsIssues = (hass: HomeAssistant) =>\n  hass.callWS<undefined>({ type: \"recorder/update_statistics_issues\" });\n","import type { HomeAssistant } from \"../types\";\n\nexport const documentationUrl = (hass: HomeAssistant, path: string) =>\n  `https://${\n    hass.config.version.includes(\"b\")\n      ? \"rc\"\n      : hass.config.version.includes(\"dev\")\n        ? \"next\"\n        : \"www\"\n  }.home-assistant.io${path}`;\n","/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n// Note, this module is not included in package exports so that it's private to\n// our first-party directives. If it ends up being useful, we can open it up and\n// export it.\n\n/**\n * Helper to iterate an AsyncIterable in its own closure.\n * @param iterable The iterable to iterate\n * @param callback The callback to call for each value. If the callback returns\n * `false`, the loop will be broken.\n */\nexport const forAwaitOf = async <T>(\n  iterable: AsyncIterable<T>,\n  callback: (value: T) => Promise<boolean>\n) => {\n  for await (const v of iterable) {\n    if ((await callback(v)) === false) {\n      return;\n    }\n  }\n};\n\n/**\n * Holds a reference to an instance that can be disconnected and reconnected,\n * so that a closure over the ref (e.g. in a then function to a promise) does\n * not strongly hold a ref to the instance. Approximates a WeakRef but must\n * be manually connected & disconnected to the backing instance.\n */\nexport class PseudoWeakRef<T> {\n  private _ref?: T;\n  constructor(ref: T) {\n    this._ref = ref;\n  }\n  /**\n   * Disassociates the ref with the backing instance.\n   */\n  disconnect() {\n    this._ref = undefined;\n  }\n  /**\n   * Reassociates the ref with the backing instance.\n   */\n  reconnect(ref: T) {\n    this._ref = ref;\n  }\n  /**\n   * Retrieves the backing instance (will be undefined when disconnected)\n   */\n  deref() {\n    return this._ref;\n  }\n}\n\n/**\n * A helper to pause and resume waiting on a condition in an async function\n */\nexport class Pauser {\n  private _promise?: Promise<void> = undefined;\n  private _resolve?: () => void = undefined;\n  /**\n   * When paused, returns a promise to be awaited; when unpaused, returns\n   * undefined. Note that in the microtask between the pauser being resumed\n   * an an await of this promise resolving, the pauser could be paused again,\n   * hence callers should check the promise in a loop when awaiting.\n   * @returns A promise to be awaited when paused or undefined\n   */\n  get() {\n    return this._promise;\n  }\n  /**\n   * Creates a promise to be awaited\n   */\n  pause() {\n    this._promise ??= new Promise((resolve) => (this._resolve = resolve));\n  }\n  /**\n   * Resolves the promise which may be awaited\n   */\n  resume() {\n    this._resolve?.();\n    this._promise = this._resolve = undefined;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {Part, noChange} from '../lit-html.js';\nimport {isPrimitive} from '../directive-helpers.js';\nimport {directive, AsyncDirective} from '../async-directive.js';\nimport {Pauser, PseudoWeakRef} from './private-async-helpers.js';\n\nconst isPromise = (x: unknown) => {\n  return !isPrimitive(x) && typeof (x as {then?: unknown}).then === 'function';\n};\n// Effectively infinity, but a SMI.\nconst _infinity = 0x3fffffff;\n\nexport class UntilDirective extends AsyncDirective {\n  private __lastRenderedIndex: number = _infinity;\n  private __values: unknown[] = [];\n  private __weakThis = new PseudoWeakRef(this);\n  private __pauser = new Pauser();\n\n  render(...args: Array<unknown>) {\n    return args.find((x) => !isPromise(x)) ?? noChange;\n  }\n\n  override update(_part: Part, args: Array<unknown>) {\n    const previousValues = this.__values;\n    let previousLength = previousValues.length;\n    this.__values = args;\n\n    const weakThis = this.__weakThis;\n    const pauser = this.__pauser;\n\n    // If our initial render occurs while disconnected, ensure that the pauser\n    // and weakThis are in the disconnected state\n    if (!this.isConnected) {\n      this.disconnected();\n    }\n\n    for (let i = 0; i < args.length; i++) {\n      // If we've rendered a higher-priority value already, stop.\n      if (i > this.__lastRenderedIndex) {\n        break;\n      }\n\n      const value = args[i];\n\n      // Render non-Promise values immediately\n      if (!isPromise(value)) {\n        this.__lastRenderedIndex = i;\n        // Since a lower-priority value will never overwrite a higher-priority\n        // synchronous value, we can stop processing now.\n        return value;\n      }\n\n      // If this is a Promise we've already handled, skip it.\n      if (i < previousLength && value === previousValues[i]) {\n        continue;\n      }\n\n      // We have a Promise that we haven't seen before, so priorities may have\n      // changed. Forget what we rendered before.\n      this.__lastRenderedIndex = _infinity;\n      previousLength = 0;\n\n      // Note, the callback avoids closing over `this` so that the directive\n      // can be gc'ed before the promise resolves; instead `this` is retrieved\n      // from `weakThis`, which can break the hard reference in the closure when\n      // the directive disconnects\n      Promise.resolve(value).then(async (result: unknown) => {\n        // If we're disconnected, wait until we're (maybe) reconnected\n        // The while loop here handles the case that the connection state\n        // thrashes, causing the pauser to resume and then get re-paused\n        while (pauser.get()) {\n          await pauser.get();\n        }\n        // If the callback gets here and there is no `this`, it means that the\n        // directive has been disconnected and garbage collected and we don't\n        // need to do anything else\n        const _this = weakThis.deref();\n        if (_this !== undefined) {\n          const index = _this.__values.indexOf(value);\n          // If state.values doesn't contain the value, we've re-rendered without\n          // the value, so don't render it. Then, only render if the value is\n          // higher-priority than what's already been rendered.\n          if (index > -1 && index < _this.__lastRenderedIndex) {\n            _this.__lastRenderedIndex = index;\n            _this.setValue(result);\n          }\n        }\n      });\n    }\n\n    return noChange;\n  }\n\n  override disconnected() {\n    this.__weakThis.disconnect();\n    this.__pauser.pause();\n  }\n\n  override reconnected() {\n    this.__weakThis.reconnect(this);\n    this.__pauser.resume();\n  }\n}\n\n/**\n * Renders one of a series of values, including Promises, to a Part.\n *\n * Values are rendered in priority order, with the first argument having the\n * highest priority and the last argument having the lowest priority. If a\n * value is a Promise, low-priority values will be rendered until it resolves.\n *\n * The priority of values can be used to create placeholder content for async\n * data. For example, a Promise with pending content can be the first,\n * highest-priority, argument, and a non_promise loading indicator template can\n * be used as the second, lower-priority, argument. The loading indicator will\n * render immediately, and the primary content will render when the Promise\n * resolves.\n *\n * Example:\n *\n * ```js\n * const content = fetch('./content.txt').then(r => r.text());\n * html`${until(content, html`<span>Loading...</span>`)}`\n * ```\n */\nexport const until = directive(UntilDirective);\n\n/**\n * The type of the class that powers this directive. Necessary for naming the\n * directive's return type.\n */\n// export type {UntilDirective};\n"],"names":["computeStateName","stateObj","computeStateNameFromEntityAttributes","entityId","entity_id","undefined","attributes","friendly_name","computeObjectId","replace","toString","_decorate","customElement","_initialize","_LitElement","F","constructor","args","d","kind","decorators","property","attribute","key","value","type","Boolean","Array","state","query","item","html","this","hass","name","id","documentationUrl","helpMissingEntityUrl","localize","memoizeOne","statisticIds","includeStatisticsUnitOfMeasurement","includeUnitClass","includeDeviceClass","entitiesOnly","excludeStatistics","length","strings","includeUnits","ensureArray","filter","meta","includes","statistics_unit_of_measurement","includeUnitClasses","unit_class","includeDeviceClasses","states","statistic_id","device_class","output","forEach","entityState","getStatisticLabel","push","sort","a","b","stringCompare","locale","language","comboBox","open","focus","changedProps","hasUpdated","has","_getStatisticIds","_init","_opened","_statistics","_getStatistics","updateComplete","then","nothing","label","_value","_rowRenderer","disabled","allowCustomEntity","_filteredItems","_openedChanged","_statisticChanged","_filterChanged","getStatisticIds","statisticTypes","ev","stopPropagation","newValue","detail","_setValue","filterString","toLowerCase","fuzzyFilterSort","setTimeout","fireEvent","LitElement","ignoreRestriction","ignoreRestrictionsOnFirstStatistic","_currentStatistics","includeStatisticsUnitCurrent","includeUnitClassCurrent","includeDeviceClassCurrent","includeStatisticTypesCurrent","repeat","statisticId","pickedStatisticLabel","pickStatisticLabel","_addStatistic","entities","event","oldValue","currentTarget","curValue","currentStatistics","_updateStatistics","map","ent","toAdd","currentEntities","static","css","HaStatisticSelector","selector","statistic","multiple","helper","required","UNAVAILABLE","UNKNOWN","ON","OFF","UNAVAILABLE_STATES","OFF_STATES","isUnavailableState","arrayLiteralIncludes","statistic_type","callWS","statisticsId","statisticsMetaData","entity","path","config","version","s","t","G","disconnect","reconnect","deref","i","Y","Z","get","pause","Promise","resume","call","n","h","c","arguments","_$C_t","_$Cwt","_$Cq","r","_$CK","e","render","find","update","o","isConnected","disconnected","resolve","async","indexOf","setValue","reconnected","m"],"mappings":";8HAGO,MAQMA,EAAoBC,IAC/BC,OARAC,EAQqCF,EAASG,eALjBC,KAF7BC,EAOyDL,EAASK,YALvDC,eACPC,EAAAA,EAAAA,GAAgBL,GAAUM,QAAQ,KAAM,MACvCH,EAAWC,eAAiB,IAAIG,WANaR,IAClDC,EACAG,CAO6E,0PCgBjDK,EAAAA,EAAAA,GAAA,EAD7BC,EAAAA,EAAAA,IAAc,yBAAsB,SAAAC,EAAAC,GA+TpC,OAAAC,EA/TD,cAC8BD,EAAoBE,WAAAA,IAAAC,GAAA,SAAAA,GAAAJ,EAAA,QAApBK,EAAA,EAAAC,KAAA,QAAAC,WAAA,EAC3BC,EAAAA,EAAAA,IAAS,CAAEC,WAAW,KAAQC,IAAA,OAAAC,WAAA,IAAAL,KAAA,QAAAC,WAAA,EAE9BC,EAAAA,EAAAA,OAAUE,IAAA,QAAAC,WAAA,IAAAL,KAAA,QAAAC,WAAA,EAEVC,EAAAA,EAAAA,OAAUE,IAAA,QAAAC,WAAA,IAAAL,KAAA,QAAAC,WAAA,EAEVC,EAAAA,EAAAA,IAAS,CAAEC,UAAW,qBAAoBC,IAAA,iBAAAC,WAAA,IAAAL,KAAA,QAAAC,WAAA,EAG1CC,EAAAA,EAAAA,IAAS,CAAEI,KAAMC,QAASJ,UAAW,yBAAwBC,IAAA,oBAAAC,WAAA,IAAAL,KAAA,QAAAC,WAAA,EAG7DC,EAAAA,EAAAA,IAAS,CAAEC,WAAW,EAAOG,KAAME,SAAQJ,IAAA,eAAAC,WAAA,IAAAL,KAAA,QAAAC,WAAA,EAG3CC,EAAAA,EAAAA,IAAS,CAAEI,KAAMC,WAAUH,IAAA,WAAAC,KAAAA,GAAA,OAAmB,CAAK,IAAAL,KAAA,QAAAC,WAAA,EAOnDC,EAAAA,EAAAA,IAAS,CACRI,KAAME,MACNL,UAAW,4CACXC,IAAA,qCAAAC,WAAA,IAAAL,KAAA,QAAAC,WAAA,EAODC,EAAAA,EAAAA,IAAS,CAAEC,UAAW,wBAAuBC,IAAA,mBAAAC,WAAA,IAAAL,KAAA,QAAAC,WAAA,EAO7CC,EAAAA,EAAAA,IAAS,CAAEC,UAAW,0BAAyBC,IAAA,qBAAAC,WAAA,IAAAL,KAAA,QAAAC,WAAA,EAQ/CC,EAAAA,EAAAA,IAAS,CAAEI,KAAMC,QAASJ,UAAW,mBAAkBC,IAAA,eAAAC,KAAAA,GAAA,OAClC,CAAK,IAAAL,KAAA,QAAAC,WAAA,EAO1BC,EAAAA,EAAAA,IAAS,CAAEI,KAAME,MAAOL,UAAW,wBAAuBC,IAAA,oBAAAC,WAAA,IAAAL,KAAA,QAAAC,WAAA,EAG1DC,EAAAA,EAAAA,IAAS,CAAEC,WAAW,KAAQC,IAAA,uBAAAC,KAAAA,GAAA,MAC7B,wBAAwB,IAAAL,KAAA,QAAAC,WAAA,EAEzBQ,EAAAA,EAAAA,OAAOL,IAAA,UAAAC,WAAA,IAAAL,KAAA,QAAAC,WAAA,EAEPS,EAAAA,EAAAA,IAAM,gBAAgB,IAAKN,IAAA,WAAAC,WAAA,IAAAL,KAAA,QAAAI,IAAA,QAAAC,KAAAA,GAAA,OAEZ,CAAK,IAAAL,KAAA,QAAAI,IAAA,cAAAC,KAAAA,GAAA,MAEkB,EAAE,IAAAL,KAAA,QAAAC,WAAA,EAExCQ,EAAAA,EAAAA,OAAOL,IAAA,iBAAAC,KAAAA,GAAqD,IAAAL,KAAA,QAAAI,IAAA,eAAAC,KAAAA,GAAA,OAEDM,GAC1DC,EAAAA,EAAI;QACAD,EAAKF,MACHG,EAAAA,EAAI;;wBAEUD,EAAKF;oBACTI,KAAKC;2BAEf;cACIH,EAAKI;;WAEI,KAAZJ,EAAKK,IAAyB,cAAZL,EAAKK,GACtBJ,EAAAA,EAAI;;;sBAGKK,EAAAA,EAAAA,GAAiBJ,KAAKC,KAAMD,KAAKK;iBACrCL,KAAKC,KAAKK,SACX;eAGJR,EAAKK;;qBAEI,IAAAhB,KAAA,QAAAI,IAAA,iBAAAC,KAAAA,GAAA,OAEMe,EAAAA,EAAAA,IACvB,CACEC,EACAC,EACAC,EACAC,EACAC,EACAC,EACArB,KAEA,IAAKgB,EAAaM,OAChB,MAAO,CACL,CACEX,GAAI,GACJD,KAAMF,KAAKC,KAAKK,SACd,gDAEFS,QAAS,KAKf,GAAIN,EAAoC,CACtC,MAAMO,GAAkCC,EAAAA,EAAAA,GACtCR,GAEFD,EAAeA,EAAaU,QAAQC,GAClCH,EAAaI,SAASD,EAAKE,iCAE/B,CACA,GAAIX,EAAkB,CACpB,MAAMY,GACJL,EAAAA,EAAAA,GAAYP,GACdF,EAAeA,EAAaU,QAAQC,GAClCG,EAAmBF,SAASD,EAAKI,aAErC,CACA,GAAIZ,EAAoB,CACtB,MAAMa,GACJP,EAAAA,EAAAA,GAAYN,GACdH,EAAeA,EAAaU,QAAQC,IAClC,MAAMlD,EAAW+B,KAAKC,KAAKwB,OAAON,EAAKO,cACvC,OAAKzD,GAGEuD,EAAqBJ,SAC1BnD,EAASK,WAAWqD,cAAgB,GACrC,GAEL,CAEA,MAAMC,EAA0B,GAgChC,OA/BApB,EAAaqB,SAASV,IACpB,GACEN,GACAM,EAAKO,eAAiBlC,GACtBqB,EAAkBO,SAASD,EAAKO,cAEhC,OAEF,MAAMI,EAAc9B,KAAKC,KAAKwB,OAAON,EAAKO,cAC1C,IAAKI,EAAa,CAChB,IAAKlB,EAAc,CACjB,MAAMT,EAAKgB,EAAKO,aACVxB,GAAO6B,EAAAA,EAAAA,IAAkB/B,KAAKC,KAAMkB,EAAKO,aAAcP,GAC7DS,EAAOI,KAAK,CACV7B,KACAD,OACAa,QAAS,CAACZ,EAAID,IAElB,CACA,MACF,CACA,MAAMC,EAAKgB,EAAKO,aACVxB,GAAO6B,EAAAA,EAAAA,IAAkB/B,KAAKC,KAAMkB,EAAKO,aAAcP,GAC7DS,EAAOI,KAAK,CACV7B,KACAD,OACAN,MAAOkC,EACPf,QAAS,CAACZ,EAAID,IACd,IAGC0B,EAAOd,QAURc,EAAOd,OAAS,GAClBc,EAAOK,MAAK,CAACC,EAAGC,KACdC,EAAAA,EAAAA,IAAcF,EAAEhC,MAAQ,GAAIiC,EAAEjC,MAAQ,GAAIF,KAAKC,KAAKoC,OAAOC,YAI/DV,EAAOI,KAAK,CACV7B,GAAI,YACJD,KAAMF,KAAKC,KAAKK,SACd,iDAEFS,QAAS,KAGJa,GAvBE,CACL,CACEzB,GAAI,GACJD,KAAMF,KAAKC,KAAKK,SAAS,2CACzBS,QAAS,IAmBF,GAEhB,IAAA5B,KAAA,SAAAI,IAAA,OAAAC,MAED,WACEQ,KAAKuC,UAAUC,MACjB,GAAC,CAAArD,KAAA,SAAAI,IAAA,QAAAC,MAED,WACEQ,KAAKuC,UAAUE,OACjB,GAAC,CAAAtD,KAAA,SAAAI,IAAA,aAAAC,MAED,SAAkBkD,KAEZ1C,KAAK2C,aAAe3C,KAAKQ,cAC3BkC,EAAaE,IAAI,oBAEjB5C,KAAK6C,qBAGH7C,KAAK8C,OAAS9C,KAAKQ,cACpBkC,EAAaE,IAAI,YAAc5C,KAAK+C,WAErC/C,KAAK8C,OAAQ,EACT9C,KAAK2C,WACP3C,KAAKgD,YAAchD,KAAKiD,eACtBjD,KAAKQ,aACLR,KAAKS,mCACLT,KAAKU,iBACLV,KAAKW,mBACLX,KAAKY,aACLZ,KAAKa,kBACLb,KAAKR,OAGPQ,KAAKkD,eAAeC,MAAK,KACvBnD,KAAKgD,YAAchD,KAAKiD,eACtBjD,KAAKQ,aACLR,KAAKS,mCACLT,KAAKU,iBACLV,KAAKW,mBACLX,KAAKY,aACLZ,KAAKa,kBACLb,KAAKR,MACN,IAIT,GAAC,CAAAL,KAAA,SAAAI,IAAA,SAAAC,MAED,WACE,OAAgC,IAA5BQ,KAAKgD,YAAYlC,OACZsC,EAAAA,GAGFrD,EAAAA,EAAI;;gBAECC,KAAKC;sBACW5B,IAAf2B,KAAKqD,OAAuBrD,KAAKC,KACtCD,KAAKC,KAAKK,SAAS,4CACnBN,KAAKqD;iBACArD,KAAKsD;oBACFtD,KAAKuD;oBACLvD,KAAKwD;4BACGxD,KAAKyD;iBAChBzD,KAAKgD;yBACGhD,KAAK0D,gBAAkB1D,KAAKgD;;;;0BAI3BhD,KAAK2D;yBACN3D,KAAK4D;0BACJ5D,KAAK6D;;KAG7B,GAAC,CAAA1E,KAAA,SAAAI,IAAA,mBAAAC,MAED,iBACEQ,KAAKQ,mBAAqBsD,EAAAA,EAAAA,IAAgB9D,KAAKC,KAAMD,KAAK+D,eAC5D,GAAC,CAAA5E,KAAA,MAAAI,IAAA,SAAAC,MAED,WACE,OAAOQ,KAAKR,OAAS,EACvB,GAAC,CAAAL,KAAA,SAAAI,IAAA,oBAAAC,MAED,SAA0BwE,GACxBA,EAAGC,kBACH,IAAIC,EAAWF,EAAGG,OAAO3E,MACR,cAAb0E,IACFA,EAAW,IAGTA,IAAalE,KAAKsD,QACpBtD,KAAKoE,UAAUF,EAEnB,GAAC,CAAA/E,KAAA,SAAAI,IAAA,iBAAAC,MAED,SAAuBwE,GACrBhE,KAAK+C,QAAUiB,EAAGG,OAAO3E,KAC3B,GAAC,CAAAL,KAAA,SAAAI,IAAA,iBAAAC,MAED,SAAuBwE,GACrB,MAAMK,EAAeL,EAAGG,OAAO3E,MAAM8E,cACrCtE,KAAK0D,eAAiBW,EAAavD,QAC/ByD,EAAAA,EAAAA,GAA+BF,EAAcrE,KAAKgD,kBAClD3E,CACN,GAAC,CAAAc,KAAA,SAAAI,IAAA,YAAAC,MAED,SAAkBA,GAChBQ,KAAKR,MAAQA,EACbgF,YAAW,MACTC,EAAAA,EAAAA,GAAUzE,KAAM,gBAAiB,CAAER,WACnCiF,EAAAA,EAAAA,GAAUzE,KAAM,SAAS,GACxB,EACL,IAAC,GA7ToC0E,EAAAA,4LCpBf/F,EAAAA,EAAAA,GAAA,EADvBC,EAAAA,EAAAA,IAAc,0BAAuB,SAAAC,EAAAC,GAiLrC,OAAAC,EAjLD,cACwBD,EAAoBE,WAAAA,IAAAC,GAAA,SAAAA,GAAAJ,EAAA,QAApBK,EAAA,EAAAC,KAAA,QAAAC,WAAA,EACrBC,EAAAA,EAAAA,IAAS,CAAEC,WAAW,KAAQC,IAAA,OAAAC,WAAA,IAAAL,KAAA,QAAAC,WAAA,EAE9BC,EAAAA,EAAAA,IAAS,CAAEI,KAAME,SAAQJ,IAAA,QAAAC,WAAA,IAAAL,KAAA,QAAAC,WAAA,EAEzBC,EAAAA,EAAAA,IAAS,CAAEC,WAAW,EAAOG,KAAME,SAAQJ,IAAA,eAAAC,WAAA,IAAAL,KAAA,QAAAC,WAAA,EAE3CC,EAAAA,EAAAA,IAAS,CAAEC,UAAW,qBAAoBC,IAAA,iBAAAC,WAAA,IAAAL,KAAA,QAAAC,WAAA,EAG1CC,EAAAA,EAAAA,IAAS,CAAEC,UAAW,4BAA2BC,IAAA,uBAAAC,WAAA,IAAAL,KAAA,QAAAC,WAAA,EAGjDC,EAAAA,EAAAA,IAAS,CAAEC,UAAW,0BAAyBC,IAAA,qBAAAC,WAAA,IAAAL,KAAA,QAAAC,WAAA,EAG/CC,EAAAA,EAAAA,IAAS,CAAEI,KAAMC,QAASJ,UAAW,yBAAwBC,IAAA,oBAAAC,WAAA,IAAAL,KAAA,QAAAC,WAAA,EAO7DC,EAAAA,EAAAA,IAAS,CACRC,UAAW,4CACXC,IAAA,qCAAAC,WAAA,IAAAL,KAAA,QAAAC,WAAA,EAODC,EAAAA,EAAAA,IAAS,CAAEC,UAAW,wBAAuBC,IAAA,mBAAAC,WAAA,IAAAL,KAAA,QAAAC,WAAA,EAO7CC,EAAAA,EAAAA,IAAS,CAAEC,UAAW,0BAAyBC,IAAA,qBAAAC,WAAA,IAAAL,KAAA,QAAAC,WAAA,EAQ/CC,EAAAA,EAAAA,IAAS,CACRI,KAAMC,QACNJ,UAAW,4CACXC,IAAA,qCAAAC,KAAAA,GAAA,OAC0C,CAAK,IAAAL,KAAA,SAAAI,IAAA,SAAAC,MAEjD,WACE,IAAKQ,KAAKC,KACR,OAAOmD,EAAAA,GAGT,MAAMuB,EACJ3E,KAAK4E,oCACL5E,KAAK6E,mBAAmB/D,QAAU,EAE9BgE,EAA+BH,OACjCtG,EACA2B,KAAKS,mCACHsE,EAA0BJ,OAC5BtG,EACA2B,KAAKU,iBACHsE,EAA4BL,OAC9BtG,EACA2B,KAAKW,mBACHsE,EAA+BN,OACjCtG,EACA2B,KAAK+D,eAET,OAAOhE,EAAAA,EAAI;SACPmF,EAAAA,EAAAA,GACAlF,KAAK6E,oBACJM,GAAgBA,IAChBA,GAAgBpF,EAAAA,EAAI;;;0BAGHoF;sBACJnF,KAAKC;oDACyB6E;kCAClBC;oCACEC;uBACbG;gCACSF;8BACFjF,KAAKQ;uBACZR,KAAKoF;mCACOpF,KAAKR;mCACLQ,KAAKyD;+BACTzD,KAAK4D;;;;;;kBAOlB5D,KAAKC;gDACyBD,KACnCS;8BACiBT,KAAKU;gCACHV,KAAKW;4BACTX,KAAK+D;0BACP/D,KAAKQ;mBACZR,KAAKqF;+BACOrF,KAAKR;+BACLQ,KAAKyD;2BACTzD,KAAKsF;;;KAI9B,GAAC,CAAAnG,KAAA,MAAAI,IAAA,qBAAAC,MAED,WACE,OAAOQ,KAAKR,OAAS,EACvB,GAAC,CAAAL,KAAA,SAAAI,IAAA,oBAAAC,MAED,eAAgC+F,GAC9BvF,KAAKR,MAAQ+F,GAEbd,EAAAA,EAAAA,GAAUzE,KAAM,gBAAiB,CAC/BR,MAAO+F,GAEX,GAAC,CAAApG,KAAA,SAAAI,IAAA,oBAAAC,MAED,SAA0BgG,GACxBA,EAAMvB,kBACN,MAAMwB,EAAYD,EAAME,cAAsBC,SACxCzB,EAAWsB,EAAMrB,OAAO3E,MAC9B,GAAI0E,IAAauB,EACf,OAEF,MAAMG,EAAoB5F,KAAK6E,mBAC1BX,IAAY0B,EAAkBxE,SAAS8C,GAM5ClE,KAAK6F,kBACHD,EAAkBE,KAAKC,GAASA,IAAQN,EAAWvB,EAAW6B,KAN9D/F,KAAK6F,kBACHD,EAAkB1E,QAAQ6E,GAAQA,IAAQN,IAOhD,GAAC,CAAAtG,KAAA,SAAAI,IAAA,gBAAAC,MAED,eAA4BgG,GAC1BA,EAAMvB,kBACN,MAAM+B,EAAQR,EAAMrB,OAAO3E,MAC3B,IAAKwG,EACH,OAGF,GADCR,EAAME,cAAsBlG,MAAQ,IAChCwG,EACH,OAEF,MAAMC,EAAkBjG,KAAK6E,mBACzBoB,EAAgB7E,SAAS4E,IAI7BhG,KAAK6F,kBAAkB,IAAII,EAAiBD,GAC9C,GAAC,CAAA7G,KAAA,QAAA+G,QAAA,EAAA3G,IAAA,SAAAC,KAAAA,GAAA,OAEe2G,EAAAA,EAAG;;;;;;;;;;GAUlB,OA/K8BzB,EAAAA,+MCFjC,IACa0B,GAAmBzH,EAAAA,EAAAA,GAAA,EAD/BC,EAAAA,EAAAA,IAAc,2BAAwB,SAAAC,EAAAC,GAwCtC,OAAAC,EAxCD,cACgCD,EAAoBE,WAAAA,IAAAC,GAAA,SAAAA,GAAAJ,EAAA,QAApBK,EAAA,EAAAC,KAAA,QAAAC,WAAA,EAC7BC,EAAAA,EAAAA,IAAS,CAAEC,WAAW,KAAQC,IAAA,OAAAC,WAAA,IAAAL,KAAA,QAAAC,WAAA,EAE9BC,EAAAA,EAAAA,IAAS,CAAEC,WAAW,KAAQC,IAAA,WAAAC,WAAA,IAAAL,KAAA,QAAAC,WAAA,EAE9BC,EAAAA,EAAAA,OAAUE,IAAA,QAAAC,WAAA,IAAAL,KAAA,QAAAC,WAAA,EAEVC,EAAAA,EAAAA,OAAUE,IAAA,QAAAC,WAAA,IAAAL,KAAA,QAAAC,WAAA,EAEVC,EAAAA,EAAAA,OAAUE,IAAA,SAAAC,WAAA,IAAAL,KAAA,QAAAC,WAAA,EAEVC,EAAAA,EAAAA,IAAS,CAAEI,KAAMC,WAAUH,IAAA,WAAAC,KAAAA,GAAA,OAAmB,CAAK,IAAAL,KAAA,QAAAC,WAAA,EAEnDC,EAAAA,EAAAA,IAAS,CAAEI,KAAMC,WAAUH,IAAA,WAAAC,KAAAA,GAAA,OAAmB,CAAI,IAAAL,KAAA,SAAAI,IAAA,SAAAC,MAEnD,WACE,OAAKQ,KAAKqG,SAASC,UAAUC,SAYtBxG,EAAAA,EAAI;QACPC,KAAKqD,MAAQtD,EAAAA,EAAI,UAAUC,KAAKqD,gBAAkB;;gBAE1CrD,KAAKC;iBACJD,KAAKR;kBACJQ,KAAKwG;oBACHxG,KAAKwD;oBACLxD,KAAKyG;;MAlBZ1G,EAAAA,EAAI;gBACDC,KAAKC;iBACJD,KAAKR;iBACLQ,KAAKqD;kBACJrD,KAAKwG;oBACHxG,KAAKwD;oBACLxD,KAAKyG;;8BAevB,IAAC,GAtCsC/B,EAAAA,+HCLlC,MAAMgC,EAAc,cACdC,EAAU,UACVC,EAAK,KACLC,EAAM,MAENC,EAAqB,CAACJ,EAAaC,GACnCI,EAAa,CAACL,EAAaC,EAASE,GAEpCG,GAAqBC,EAAAA,EAAAA,GAAqBH,IAC7BG,EAAAA,EAAAA,GAAqBF,oEC2CxC,MA8FMjD,EAAkBA,CAC7B7D,EACAiH,IAEAjH,EAAKkH,OAA6B,CAChC1H,KAAM,8BACNyH,mBA4KSnF,EAAoBA,CAC/B9B,EACAmH,EACAC,KAEA,MAAMC,EAASrH,EAAKwB,OAAO2F,GAC3B,OAAIE,GACKtJ,EAAAA,EAAAA,GAAiBsJ,GAEnBD,GAAoBnH,MAAQkH,CAAY,0CC7U1C,MAAMhH,EAAmBA,CAACH,EAAqBsH,IACpD,WACEtH,EAAKuH,OAAOC,QAAQrG,SAAS,KACzB,KACAnB,EAAKuH,OAAOC,QAAQrG,SAAS,OAC3B,OACA,0BACamG,+ECepB,MASUG,EAEX1I,WAAAA,CAAY2I,GACV3H,KAAK4H,EAAOD,CACb,CAIDE,UAAAA,GACE7H,KAAK4H,OAAA,CACN,CAIDE,SAAAA,CAAUH,GACR3H,KAAK4H,EAAOD,CACb,CAIDI,KAAAA,GACE,OAAO/H,KAAK4H,CACb,QAMUI,EAAbhJ,WAAAA,GACU,KAAQiJ,OAAA,EACR,KAAQC,OAAA,CAwBjB,CAhBCC,GAAAA,GACE,OAAOnI,KAAKiI,CACb,CAIDG,KAAAA,GAAA,IAAAT,EACE,QAAAA,EAAA3H,KAAKiI,SAAA,IAALN,IAAA3H,KAAKiI,EAAa,IAAII,SAASV,GAAa3H,KAAKkI,EAAWP,IAC7D,CAIDW,MAAAA,GAAA,IAAAX,EACe,QAAbA,EAAA3H,KAAKkI,SAAA,IAAQP,GAAAA,EAAAY,KAAA,MACbvI,KAAKiI,EAAWjI,KAAKkI,OAAA,CACtB,iBC3EH,MAAMM,EAAab,KACTD,EAAAA,EAAAA,IAAYC,IAA8C,mBAAhCA,EAAuBxE,KAGrDsF,EAAY,WAEZ,MAAOC,UAAuBV,EAAAA,GAApChJ,WAAAA,GAAA,SAAA2J,WACU,KAAmBC,MAAWH,EAC9B,KAAQI,MAAc,GACtB,KAAAC,KAAa,IAAIC,EAAc/I,MAC/B,KAAAgJ,KAAW,IAAIC,CAsFxB,CApFCC,MAAAA,IAAUxB,GAAA,IAAAM,EACR,OAAsC,QAAAA,EAA/BN,EAAKyB,MAAMxB,IAAOa,EAAUb,YAAA,IAAGK,EAAAA,EAAIL,EAAAA,EAC3C,CAEQyB,MAAAA,CAAO1B,EAAaM,GAC3B,MAAMe,EAAiB/I,KAAK6I,MAC5B,IAAII,EAAiBF,EAAejI,OACpCd,KAAK6I,MAAWb,EAEhB,MAAMqB,EAAWrJ,KAAK8I,KAChBJ,EAAS1I,KAAKgJ,KAIfhJ,KAAKsJ,aACRtJ,KAAKuJ,eAGP,IAAK,IAAI5B,EAAI,EAAGA,EAAIK,EAAKlH,UAEnB6G,EAAI3H,KAAK4I,OAFkBjB,IAAK,CAMpC,MAAMD,EAAQM,EAAKL,GAGnB,IAAKa,EAAUd,GAIb,OAHA1H,KAAK4I,MAAsBjB,EAGpBD,EAILC,EAAIsB,GAAkBvB,IAAUqB,EAAepB,KAMnD3H,KAAK4I,MAAsBH,EAC3BQ,EAAiB,EAMjBZ,QAAQmB,QAAQ9B,GAAOvE,MAAKsG,UAI1B,KAAOf,EAAOP,aACNO,EAAOP,MAKf,MAAMH,EAAQqB,EAAStB,QACvB,QAAI,IAAAC,EAAqB,CACvB,MAAMe,EAAQf,EAAMa,MAASa,QAAQhC,GAIjCqB,GAAS,GAAKA,EAAQf,EAAMY,QAC9BZ,EAAMY,MAAsBG,EAC5Bf,EAAM2B,SAAShC,GAElB,KAEJ,CAED,OAAOA,EAAAA,EACR,CAEQ4B,YAAAA,GACPvJ,KAAK8I,KAAWjB,aAChB7H,KAAKgJ,KAASZ,OACf,CAEQwB,WAAAA,GACP5J,KAAK8I,KAAWhB,UAAU9H,MAC1BA,KAAKgJ,KAASV,QACf,QAwBUuB,GAAQR,EAAAA,EAAAA,IAAUX"}