{"version":3,"file":"9645.9b91db6fd82133f5.js","sources":["webpack://knx-frontend/../../src/layouts/shared/SizeCache.ts","webpack://knx-frontend/../src/layouts/flow.ts","webpack://knx-frontend/../../src/layouts/shared/BaseLayout.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nexport interface SizeCacheConfig {\n  roundAverageSize?: boolean;\n}\n\nexport class SizeCache {\n  private _map = new Map<number | string, number>();\n  private _roundAverageSize = false;\n  totalSize = 0;\n\n  constructor(config?: SizeCacheConfig) {\n    if (config?.roundAverageSize === true) {\n      this._roundAverageSize = true;\n    }\n  }\n\n  set(index: number | string, value: number): void {\n    const prev = this._map.get(index) || 0;\n    this._map.set(index, value);\n    this.totalSize += value - prev;\n  }\n\n  get averageSize(): number {\n    if (this._map.size > 0) {\n      const average = this.totalSize / this._map.size;\n      return this._roundAverageSize ? Math.round(average) : average;\n    }\n    return 0;\n  }\n\n  getSize(index: number | string) {\n    return this._map.get(index);\n  }\n\n  clear() {\n    this._map.clear();\n    this.totalSize = 0;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {SizeCache} from './shared/SizeCache.js';\nimport {BaseLayout, dim1} from './shared/BaseLayout.js';\nimport {\n  Positions,\n  Size,\n  Margins,\n  margin,\n  ScrollDirection,\n  offsetAxis,\n  ChildMeasurements,\n  BaseLayoutConfig,\n  LayoutHostSink,\n} from './shared/Layout.js';\n\ntype ItemBounds = {\n  pos: number;\n  size: number;\n};\n\ntype FlowLayoutConstructor = {\n  prototype: FlowLayout;\n  new (hostSink: LayoutHostSink, config?: BaseLayoutConfig): FlowLayout;\n};\n\ntype FlowLayoutSpecifier = BaseLayoutConfig & {\n  type: FlowLayoutConstructor;\n};\n\ntype FlowLayoutSpecifierFactory = (\n  config?: BaseLayoutConfig\n) => FlowLayoutSpecifier;\n\nexport const flow: FlowLayoutSpecifierFactory = (config?: BaseLayoutConfig) =>\n  Object.assign(\n    {\n      type: FlowLayout,\n    },\n    config\n  );\n\nfunction leadingMargin(direction: ScrollDirection): margin {\n  return direction === 'horizontal' ? 'marginLeft' : 'marginTop';\n}\n\nfunction trailingMargin(direction: ScrollDirection): margin {\n  return direction === 'horizontal' ? 'marginRight' : 'marginBottom';\n}\n\nfunction offset(direction: ScrollDirection): offsetAxis {\n  return direction === 'horizontal' ? 'xOffset' : 'yOffset';\n}\n\nfunction collapseMargins(a: number, b: number): number {\n  const m = [a, b].sort();\n  return m[1] <= 0 ? Math.min(...m) : m[0] >= 0 ? Math.max(...m) : m[0] + m[1];\n}\n\nclass MetricsCache {\n  private _childSizeCache = new SizeCache();\n  private _marginSizeCache = new SizeCache();\n  private _metricsCache = new Map<number, Size & Margins>();\n\n  update(metrics: {[key: number]: Size & Margins}, direction: ScrollDirection) {\n    const marginsToUpdate = new Set<number>();\n    Object.keys(metrics).forEach((key) => {\n      const k = Number(key);\n      this._metricsCache.set(k, metrics[k]);\n      this._childSizeCache.set(k, metrics[k][dim1(direction)]);\n      marginsToUpdate.add(k);\n      marginsToUpdate.add(k + 1);\n    });\n    for (const k of marginsToUpdate) {\n      const a = this._metricsCache.get(k)?.[leadingMargin(direction)] || 0;\n      const b = this._metricsCache.get(k - 1)?.[trailingMargin(direction)] || 0;\n      this._marginSizeCache.set(k, collapseMargins(a, b));\n    }\n  }\n\n  get averageChildSize(): number {\n    return this._childSizeCache.averageSize;\n  }\n\n  get totalChildSize(): number {\n    return this._childSizeCache.totalSize;\n  }\n\n  get averageMarginSize(): number {\n    return this._marginSizeCache.averageSize;\n  }\n\n  get totalMarginSize(): number {\n    return this._marginSizeCache.totalSize;\n  }\n\n  getLeadingMarginValue(index: number, direction: ScrollDirection) {\n    return this._metricsCache.get(index)?.[leadingMargin(direction)] || 0;\n  }\n\n  getChildSize(index: number) {\n    return this._childSizeCache.getSize(index);\n  }\n\n  getMarginSize(index: number) {\n    return this._marginSizeCache.getSize(index);\n  }\n\n  clear() {\n    this._childSizeCache.clear();\n    this._marginSizeCache.clear();\n    this._metricsCache.clear();\n  }\n}\n\nexport class FlowLayout extends BaseLayout<BaseLayoutConfig> {\n  /**\n   * Initial estimate of item size\n   */\n  _itemSize: Size = {width: 100, height: 100};\n\n  /**\n   * Indices of children mapped to their (position and length) in the scrolling\n   * direction. Used to keep track of children that are in range.\n   */\n  _physicalItems = new Map<number, ItemBounds>();\n\n  /**\n   * Used in tandem with _physicalItems to track children in range across\n   * reflows.\n   */\n  _newPhysicalItems = new Map<number, ItemBounds>();\n\n  /**\n   * Width and height of children by their index.\n   */\n  _metricsCache = new MetricsCache();\n\n  /**\n   * anchorIdx is the anchor around which we reflow. It is designed to allow\n   * jumping to any point of the scroll size. We choose it once and stick with\n   * it until stable. _first and _last are deduced around it.\n   */\n  _anchorIdx: number | null = null;\n\n  /**\n   * Position in the scrolling direction of the anchor child.\n   */\n  _anchorPos: number | null = null;\n\n  /**\n   * Whether all children in range were in range during the previous reflow.\n   */\n  _stable = true;\n\n  private _measureChildren = true;\n\n  _estimate = true;\n\n  // protected _defaultConfig: BaseLayoutConfig = Object.assign({}, super._defaultConfig, {\n\n  // })\n\n  // constructor(config: Layout1dConfig) {\n  //   super(config);\n  // }\n\n  get measureChildren() {\n    return this._measureChildren;\n  }\n\n  /**\n   * Determine the average size of all children represented in the sizes\n   * argument.\n   */\n  updateItemSizes(sizes: ChildMeasurements) {\n    this._metricsCache.update(sizes as Size & Margins, this.direction);\n    // if (this._nMeasured) {\n    // this._updateItemSize();\n    this._scheduleReflow();\n    // }\n  }\n\n  /**\n   * Set the average item size based on the total length and number of children\n   * in range.\n   */\n  // _updateItemSize() {\n  //   // Keep integer values.\n  //   this._itemSize[this._sizeDim] = this._metricsCache.averageChildSize;\n  // }\n\n  _getPhysicalItem(idx: number): ItemBounds | undefined {\n    return this._newPhysicalItems.get(idx) ?? this._physicalItems.get(idx);\n  }\n\n  _getSize(idx: number): number | undefined {\n    const item = this._getPhysicalItem(idx);\n    return item && this._metricsCache.getChildSize(idx);\n  }\n\n  _getAverageSize(): number {\n    return this._metricsCache.averageChildSize || this._itemSize[this._sizeDim];\n  }\n\n  _estimatePosition(idx: number): number {\n    const c = this._metricsCache;\n    if (this._first === -1 || this._last === -1) {\n      return (\n        c.averageMarginSize +\n        idx * (c.averageMarginSize + this._getAverageSize())\n      );\n    } else {\n      if (idx < this._first) {\n        const delta = this._first - idx;\n        const refItem = this._getPhysicalItem(this._first);\n        return (\n          refItem!.pos -\n          (c.getMarginSize(this._first - 1) || c.averageMarginSize) -\n          (delta * c.averageChildSize + (delta - 1) * c.averageMarginSize)\n        );\n      } else {\n        const delta = idx - this._last;\n        const refItem = this._getPhysicalItem(this._last);\n        return (\n          refItem!.pos +\n          (c.getChildSize(this._last) || c.averageChildSize) +\n          (c.getMarginSize(this._last) || c.averageMarginSize) +\n          delta * (c.averageChildSize + c.averageMarginSize)\n        );\n      }\n    }\n  }\n\n  /**\n   * Returns the position in the scrolling direction of the item at idx.\n   * Estimates it if the item at idx is not in the DOM.\n   */\n  _getPosition(idx: number): number {\n    const item = this._getPhysicalItem(idx);\n    const {averageMarginSize} = this._metricsCache;\n    return idx === 0\n      ? this._metricsCache.getMarginSize(0) ?? averageMarginSize\n      : item\n        ? item.pos\n        : this._estimatePosition(idx);\n  }\n\n  _calculateAnchor(lower: number, upper: number): number {\n    if (lower <= 0) {\n      return 0;\n    }\n    if (upper > this._scrollSize - this._viewDim1) {\n      return this.items.length - 1;\n    }\n    return Math.max(\n      0,\n      Math.min(\n        this.items.length - 1,\n        Math.floor((lower + upper) / 2 / this._delta)\n      )\n    );\n  }\n\n  _getAnchor(lower: number, upper: number): number {\n    if (this._physicalItems.size === 0) {\n      return this._calculateAnchor(lower, upper);\n    }\n    if (this._first < 0) {\n      return this._calculateAnchor(lower, upper);\n    }\n    if (this._last < 0) {\n      return this._calculateAnchor(lower, upper);\n    }\n\n    const firstItem = this._getPhysicalItem(this._first),\n      lastItem = this._getPhysicalItem(this._last),\n      firstMin = firstItem!.pos,\n      lastMin = lastItem!.pos,\n      lastMax = lastMin + this._metricsCache.getChildSize(this._last)!;\n\n    if (lastMax < lower) {\n      // Window is entirely past physical items, calculate new anchor\n      return this._calculateAnchor(lower, upper);\n    }\n    if (firstMin > upper) {\n      // Window is entirely before physical items, calculate new anchor\n      return this._calculateAnchor(lower, upper);\n    }\n    // Window contains a physical item\n    // Find one, starting with the one that was previously first visible\n    let candidateIdx = this._firstVisible - 1;\n    let cMax = -Infinity;\n    while (cMax < lower) {\n      const candidate = this._getPhysicalItem(++candidateIdx);\n      cMax = candidate!.pos + this._metricsCache.getChildSize(candidateIdx)!;\n    }\n    return candidateIdx;\n  }\n\n  /**\n   * Updates _first and _last based on items that should be in the current\n   * viewed range.\n   */\n  _getActiveItems() {\n    if (this._viewDim1 === 0 || this.items.length === 0) {\n      this._clearItems();\n    } else {\n      this._getItems();\n    }\n  }\n\n  /**\n   * Sets the range to empty.\n   */\n  _clearItems() {\n    this._first = -1;\n    this._last = -1;\n    this._physicalMin = 0;\n    this._physicalMax = 0;\n    const items = this._newPhysicalItems;\n    this._newPhysicalItems = this._physicalItems;\n    this._newPhysicalItems.clear();\n    this._physicalItems = items;\n    this._stable = true;\n  }\n\n  /*\n   * Updates _first and _last based on items that should be in the given range.\n   */\n  _getItems() {\n    const items = this._newPhysicalItems;\n    this._stable = true;\n    let lower, upper;\n\n    // The anchorIdx is the anchor around which we reflow. It is designed to\n    // allow jumping to any point of the scroll size. We choose it once and\n    // stick with it until stable. first and last are deduced around it.\n\n    // If we have a pinned item, we anchor on it\n    if (this.pin !== null) {\n      const {index} = this.pin;\n      this._anchorIdx = index;\n      this._anchorPos = this._getPosition(index);\n    }\n\n    // Determine the lower and upper bounds of the region to be\n    // rendered, relative to the viewport\n    lower = this._scrollPosition - this._overhang; //leadingOverhang;\n    upper = this._scrollPosition + this._viewDim1 + this._overhang; // trailingOverhang;\n\n    if (upper < 0 || lower > this._scrollSize) {\n      this._clearItems();\n      return;\n    }\n\n    // If we are scrolling to a specific index or if we are doing another\n    // pass to stabilize a previously started reflow, we will already\n    // have an anchor. If not, establish an anchor now.\n    if (this._anchorIdx === null || this._anchorPos === null) {\n      this._anchorIdx = this._getAnchor(lower, upper);\n      this._anchorPos = this._getPosition(this._anchorIdx);\n    }\n\n    let anchorSize = this._getSize(this._anchorIdx);\n    if (anchorSize === undefined) {\n      this._stable = false;\n      anchorSize = this._getAverageSize();\n    }\n\n    const anchorLeadingMargin =\n      this._metricsCache.getMarginSize(this._anchorIdx) ??\n      this._metricsCache.averageMarginSize;\n    const anchorTrailingMargin =\n      this._metricsCache.getMarginSize(this._anchorIdx + 1) ??\n      this._metricsCache.averageMarginSize;\n\n    if (this._anchorIdx === 0) {\n      this._anchorPos = anchorLeadingMargin;\n    }\n\n    if (this._anchorIdx === this.items.length - 1) {\n      this._anchorPos = this._scrollSize - anchorTrailingMargin - anchorSize;\n    }\n\n    // Anchor might be outside bounds, so prefer correcting the error and keep\n    // that anchorIdx.\n    let anchorErr = 0;\n\n    if (this._anchorPos + anchorSize + anchorTrailingMargin < lower) {\n      anchorErr = lower - (this._anchorPos + anchorSize + anchorTrailingMargin);\n    }\n\n    if (this._anchorPos - anchorLeadingMargin > upper) {\n      anchorErr = upper - (this._anchorPos - anchorLeadingMargin);\n    }\n\n    if (anchorErr) {\n      this._scrollPosition -= anchorErr;\n      lower -= anchorErr;\n      upper -= anchorErr;\n      this._scrollError += anchorErr;\n    }\n\n    items.set(this._anchorIdx, {pos: this._anchorPos, size: anchorSize});\n\n    this._first = this._last = this._anchorIdx;\n    this._physicalMin = this._anchorPos - anchorLeadingMargin;\n    this._physicalMax = this._anchorPos + anchorSize + anchorTrailingMargin;\n\n    while (this._physicalMin > lower && this._first > 0) {\n      let size = this._getSize(--this._first);\n      if (size === undefined) {\n        this._stable = false;\n        size = this._getAverageSize();\n      }\n      let margin = this._metricsCache.getMarginSize(this._first);\n      if (margin === undefined) {\n        this._stable = false;\n        margin = this._metricsCache.averageMarginSize;\n      }\n      this._physicalMin -= size;\n      const pos = this._physicalMin;\n      items.set(this._first, {pos, size});\n      this._physicalMin -= margin;\n      if (this._stable === false && this._estimate === false) {\n        break;\n      }\n    }\n\n    while (this._physicalMax < upper && this._last < this.items.length - 1) {\n      let size = this._getSize(++this._last);\n      if (size === undefined) {\n        this._stable = false;\n        size = this._getAverageSize();\n      }\n      let margin = this._metricsCache.getMarginSize(this._last);\n      if (margin === undefined) {\n        this._stable = false;\n        margin = this._metricsCache.averageMarginSize;\n      }\n      const pos = this._physicalMax;\n      items.set(this._last, {pos, size});\n      this._physicalMax += size + margin;\n      if (!this._stable && !this._estimate) {\n        break;\n      }\n    }\n\n    // This handles the cases where we were relying on estimated sizes.\n    const extentErr = this._calculateError();\n    if (extentErr) {\n      this._physicalMin -= extentErr;\n      this._physicalMax -= extentErr;\n      this._anchorPos -= extentErr;\n      this._scrollPosition -= extentErr;\n      items.forEach((item) => (item.pos -= extentErr));\n      this._scrollError += extentErr;\n    }\n\n    if (this._stable) {\n      this._newPhysicalItems = this._physicalItems;\n      this._newPhysicalItems.clear();\n      this._physicalItems = items;\n    }\n  }\n\n  _calculateError(): number {\n    if (this._first === 0) {\n      return this._physicalMin;\n    } else if (this._physicalMin <= 0) {\n      return this._physicalMin - this._first * this._delta;\n    } else if (this._last === this.items.length - 1) {\n      return this._physicalMax - this._scrollSize;\n    } else if (this._physicalMax >= this._scrollSize) {\n      return (\n        this._physicalMax -\n        this._scrollSize +\n        (this.items.length - 1 - this._last) * this._delta\n      );\n    }\n    return 0;\n  }\n\n  override _reflow() {\n    const {_first, _last} = this;\n    super._reflow();\n    if (\n      (this._first === -1 && this._last == -1) ||\n      (this._first === _first && this._last === _last)\n    ) {\n      this._resetReflowState();\n    }\n  }\n\n  _resetReflowState() {\n    this._anchorIdx = null;\n    this._anchorPos = null;\n    this._stable = true;\n  }\n\n  _updateScrollSize() {\n    const {averageMarginSize} = this._metricsCache;\n    this._scrollSize = Math.max(\n      1,\n      this.items.length * (averageMarginSize + this._getAverageSize()) +\n        averageMarginSize\n    );\n  }\n\n  /**\n   * Returns the average size (precise or estimated) of an item in the scrolling direction,\n   * including any surrounding space.\n   */\n  protected get _delta(): number {\n    const {averageMarginSize} = this._metricsCache;\n    return this._getAverageSize() + averageMarginSize;\n  }\n\n  /**\n   * Returns the top and left positioning of the item at idx.\n   */\n  _getItemPosition(idx: number): Positions {\n    return {\n      [this._positionDim]: this._getPosition(idx),\n      [this._secondaryPositionDim]: 0,\n      [offset(this.direction)]: -(\n        this._metricsCache.getLeadingMarginValue(idx, this.direction) ??\n        this._metricsCache.averageMarginSize\n      ),\n    } as Positions;\n  }\n\n  /**\n   * Returns the height and width of the item at idx.\n   */\n  _getItemSize(idx: number): Size {\n    return {\n      [this._sizeDim]: this._getSize(idx) || this._getAverageSize(),\n      [this._secondarySizeDim]: this._itemSize[this._secondarySizeDim],\n    } as Size;\n  }\n\n  _viewDim2Changed() {\n    this._metricsCache.clear();\n    this._scheduleReflow();\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {\n  Layout,\n  ChildPositions,\n  Positions,\n  ScrollDirection,\n  Size,\n  dimension,\n  position,\n  PinOptions,\n  ScrollToCoordinates,\n  BaseLayoutConfig,\n  StateChangedMessage,\n  LayoutHostSink,\n} from './Layout.js';\n\ntype UpdateVisibleIndicesOptions = {\n  emit?: boolean;\n};\n\nexport function dim1(direction: ScrollDirection): dimension {\n  return direction === 'horizontal' ? 'width' : 'height';\n}\n\nexport function dim2(direction: ScrollDirection): dimension {\n  return direction === 'horizontal' ? 'height' : 'width';\n}\n\nexport function pos1(direction: ScrollDirection): position {\n  return direction === 'horizontal' ? 'left' : 'top';\n}\n\nexport function pos2(direction: ScrollDirection): position {\n  return direction === 'horizontal' ? 'top' : 'left';\n}\n\nexport abstract class BaseLayout<C extends BaseLayoutConfig> implements Layout {\n  /**\n   * The last set viewport scroll position.\n   */\n  private _latestCoords: Positions = {left: 0, top: 0};\n\n  /**\n   * Scrolling direction.\n   */\n  private _direction: ScrollDirection | null = null;\n\n  /**\n   * Dimensions of the viewport.\n   */\n  private _viewportSize: Size = {width: 0, height: 0};\n\n  public totalScrollSize: Size = {width: 0, height: 0};\n\n  public offsetWithinScroller: Positions = {left: 0, top: 0};\n\n  /**\n   * Flag for debouncing asynchronous reflow requests.\n   */\n  private _pendingReflow = false;\n\n  private _pendingLayoutUpdate = false;\n\n  protected _pin: PinOptions | null = null;\n\n  /**\n   * The index of the first item intersecting the viewport.\n   */\n  protected _firstVisible = 0;\n\n  /**\n   * The index of the last item intersecting the viewport.\n   */\n  protected _lastVisible = 0;\n\n  /**\n   * Pixel offset in the scroll direction of the first child.\n   */\n  protected _physicalMin = 0;\n\n  /**\n   * Pixel offset in the scroll direction of the last child.\n   */\n  protected _physicalMax = 0;\n\n  /**\n   * Index of the first child.\n   */\n  protected _first = -1;\n\n  /**\n   * Index of the last child.\n   */\n  protected _last = -1;\n\n  /**\n   * Length in the scrolling direction.\n   */\n  protected _sizeDim: dimension = 'height';\n\n  /**\n   * Length in the non-scrolling direction.\n   */\n  protected _secondarySizeDim: dimension = 'width';\n\n  /**\n   * Position in the scrolling direction.\n   */\n  protected _positionDim: position = 'top';\n\n  /**\n   * Position in the non-scrolling direction.\n   */\n  protected _secondaryPositionDim: position = 'left';\n\n  /**\n   * Current scroll offset in pixels.\n   */\n  protected _scrollPosition = 0;\n\n  /**\n   * Difference between current scroll offset and scroll offset calculated due\n   * to a reflow.\n   */\n  protected _scrollError = 0;\n\n  /**\n   * Total number of items that could possibly be displayed. Used to help\n   * calculate the scroll size.\n   */\n  protected _items: unknown[] = [];\n\n  /**\n   * The total (estimated) length of all items in the scrolling direction.\n   */\n  protected _scrollSize = 1;\n\n  /**\n   * Number of pixels beyond the viewport to still include\n   * in the active range of items.\n   */\n  // TODO (graynorton): Probably want to make this something we calculate based\n  // on viewport size, item size, other factors, possibly still with a dial of some kind\n  protected _overhang = 1000;\n\n  /**\n   * Call this to deliver messages (e.g. stateChanged, unpinned) to host\n   */\n  private _hostSink: LayoutHostSink;\n\n  protected _getDefaultConfig(): C {\n    return {\n      direction: 'vertical',\n    } as C;\n  }\n\n  constructor(hostSink: LayoutHostSink, config?: C) {\n    this._hostSink = hostSink;\n    // Delay setting config so that subclasses do setup work first\n    Promise.resolve().then(\n      () => (this.config = config || this._getDefaultConfig())\n    );\n  }\n\n  set config(config: C) {\n    Object.assign(this, Object.assign({}, this._getDefaultConfig(), config));\n  }\n\n  get config(): C {\n    return {\n      direction: this.direction,\n    } as C;\n  }\n\n  /**\n   * Maximum index of children + 1, to help estimate total height of the scroll\n   * space.\n   */\n  get items(): unknown[] {\n    return this._items;\n  }\n\n  set items(items: unknown[]) {\n    this._setItems(items);\n  }\n\n  protected _setItems(items: unknown[]) {\n    if (items !== this._items) {\n      this._items = items;\n      this._scheduleReflow();\n    }\n  }\n\n  /**\n   * Primary scrolling direction.\n   */\n  get direction(): ScrollDirection {\n    return this._direction!;\n  }\n  set direction(dir) {\n    // Force it to be either horizontal or vertical.\n    dir = dir === 'horizontal' ? dir : 'vertical';\n    if (dir !== this._direction) {\n      this._direction = dir;\n      this._sizeDim = dir === 'horizontal' ? 'width' : 'height';\n      this._secondarySizeDim = dir === 'horizontal' ? 'height' : 'width';\n      this._positionDim = dir === 'horizontal' ? 'left' : 'top';\n      this._secondaryPositionDim = dir === 'horizontal' ? 'top' : 'left';\n      this._triggerReflow();\n    }\n  }\n\n  /**\n   * Height and width of the viewport.\n   */\n  get viewportSize(): Size {\n    return this._viewportSize;\n  }\n  set viewportSize(dims) {\n    const {_viewDim1, _viewDim2} = this;\n    Object.assign(this._viewportSize, dims);\n    if (_viewDim2 !== this._viewDim2) {\n      // this._viewDim2Changed();\n      this._scheduleLayoutUpdate();\n    } else if (_viewDim1 !== this._viewDim1) {\n      this._checkThresholds();\n    }\n  }\n\n  /**\n   * Scroll offset of the viewport.\n   */\n  get viewportScroll(): Positions {\n    return this._latestCoords;\n  }\n  set viewportScroll(coords) {\n    Object.assign(this._latestCoords, coords);\n    const oldPos = this._scrollPosition;\n    this._scrollPosition = this._latestCoords[this._positionDim];\n    const change = Math.abs(oldPos - this._scrollPosition);\n    if (change >= 1) {\n      this._checkThresholds();\n    }\n  }\n\n  /**\n   * Perform a reflow if one has been scheduled.\n   */\n  reflowIfNeeded(force = false) {\n    if (force || this._pendingReflow) {\n      this._pendingReflow = false;\n      this._reflow();\n    }\n  }\n\n  set pin(options: PinOptions | null) {\n    this._pin = options;\n    this._triggerReflow();\n  }\n\n  get pin() {\n    if (this._pin !== null) {\n      const {index, block} = this._pin;\n      return {\n        index: Math.max(0, Math.min(index, this.items.length - 1)),\n        block,\n      };\n    }\n    return null;\n  }\n\n  _clampScrollPosition(val: number) {\n    return Math.max(\n      -this.offsetWithinScroller[this._positionDim],\n      Math.min(val, this.totalScrollSize[dim1(this.direction)] - this._viewDim1)\n    );\n  }\n\n  unpin() {\n    if (this._pin !== null) {\n      this._sendUnpinnedMessage();\n      this._pin = null;\n    }\n  }\n\n  /**\n   * Get the top and left positioning of the item at idx.\n   */\n  protected abstract _getItemPosition(idx: number): Positions;\n\n  /**\n   * Update _first and _last based on items that should be in the current\n   * range.\n   */\n  protected abstract _getActiveItems(): void;\n\n  protected abstract _getItemSize(_idx: number): Size;\n\n  /**\n   * Calculates (precisely or by estimating, if needed) the total length of all items in\n   * the scrolling direction, including spacing, caching the value in the `_scrollSize` field.\n   *\n   * Should return a minimum value of 1 to ensure at least one item is rendered.\n   * TODO (graynorton): Possibly no longer required, but leaving here until it can be verified.\n   */\n  protected abstract _updateScrollSize(): void;\n\n  protected _updateLayout(): void {\n    // Override\n  }\n\n  // protected _viewDim2Changed(): void {\n  //   this._scheduleLayoutUpdate();\n  // }\n\n  /**\n   * The height or width of the viewport, whichever corresponds to the scrolling direction.\n   */\n  protected get _viewDim1(): number {\n    return this._viewportSize[this._sizeDim];\n  }\n\n  /**\n   * The height or width of the viewport, whichever does NOT correspond to the scrolling direction.\n   */\n  protected get _viewDim2(): number {\n    return this._viewportSize[this._secondarySizeDim];\n  }\n\n  protected _scheduleReflow() {\n    this._pendingReflow = true;\n  }\n\n  protected _scheduleLayoutUpdate() {\n    this._pendingLayoutUpdate = true;\n    this._scheduleReflow();\n  }\n\n  // For triggering a reflow based on incoming changes to\n  // the layout config.\n  protected _triggerReflow() {\n    this._scheduleLayoutUpdate();\n    // TODO graynorton@: reflowIfNeeded() isn't really supposed\n    // to be called internally. Address in larger cleanup\n    // of virtualizer / layout interaction pattern.\n    // this.reflowIfNeeded(true);\n    Promise.resolve().then(() => this.reflowIfNeeded());\n  }\n\n  protected _reflow() {\n    if (this._pendingLayoutUpdate) {\n      this._updateLayout();\n      this._pendingLayoutUpdate = false;\n    }\n    this._updateScrollSize();\n    this._setPositionFromPin();\n    this._getActiveItems();\n    this._updateVisibleIndices();\n    this._sendStateChangedMessage();\n  }\n\n  /**\n   * If we are supposed to be pinned to a particular\n   * item or set of coordinates, we set `_scrollPosition`\n   * accordingly and adjust `_scrollError` as needed\n   * so that the virtualizer can keep the scroll\n   * position in the DOM in sync\n   */\n  protected _setPositionFromPin() {\n    if (this.pin !== null) {\n      const lastScrollPosition = this._scrollPosition;\n      const {index, block} = this.pin;\n      this._scrollPosition =\n        this._calculateScrollIntoViewPosition({\n          index,\n          block: block || 'start',\n        }) - this.offsetWithinScroller[this._positionDim];\n      this._scrollError = lastScrollPosition - this._scrollPosition;\n    }\n  }\n  /**\n   * Calculate the coordinates to scroll to, given\n   * a request to scroll to the element at a specific\n   * index.\n   *\n   * Supports the same positioning options (`start`,\n   * `center`, `end`, `nearest`) as the standard\n   * `Element.scrollIntoView()` method, but currently\n   * only considers the provided value in the `block`\n   * dimension, since we don't yet have any layouts\n   * that support virtualization in two dimensions.\n   */\n  protected _calculateScrollIntoViewPosition(options: PinOptions) {\n    const {block} = options;\n    const index = Math.min(this.items.length, Math.max(0, options.index));\n    const itemStartPosition = this._getItemPosition(index)[this._positionDim];\n    let scrollPosition = itemStartPosition;\n    if (block !== 'start') {\n      const itemSize = this._getItemSize(index)[this._sizeDim];\n      if (block === 'center') {\n        scrollPosition =\n          itemStartPosition - 0.5 * this._viewDim1 + 0.5 * itemSize;\n      } else {\n        const itemEndPosition = itemStartPosition - this._viewDim1 + itemSize;\n        if (block === 'end') {\n          scrollPosition = itemEndPosition;\n        } else {\n          // block === 'nearest'\n          const currentScrollPosition = this._scrollPosition;\n          scrollPosition =\n            Math.abs(currentScrollPosition - itemStartPosition) <\n            Math.abs(currentScrollPosition - itemEndPosition)\n              ? itemStartPosition\n              : itemEndPosition;\n        }\n      }\n    }\n    scrollPosition += this.offsetWithinScroller[this._positionDim];\n    return this._clampScrollPosition(scrollPosition);\n  }\n\n  public getScrollIntoViewCoordinates(\n    options: PinOptions\n  ): ScrollToCoordinates {\n    return {\n      [this._positionDim as position]:\n        this._calculateScrollIntoViewPosition(options),\n    } as ScrollToOptions;\n  }\n\n  private _sendUnpinnedMessage() {\n    this._hostSink({\n      type: 'unpinned',\n    });\n  }\n\n  private _sendVisibilityChangedMessage() {\n    this._hostSink({\n      type: 'visibilityChanged',\n      firstVisible: this._firstVisible,\n      lastVisible: this._lastVisible,\n    });\n  }\n\n  protected _sendStateChangedMessage() {\n    const childPositions: ChildPositions = new Map();\n    if (this._first !== -1 && this._last !== -1) {\n      for (let idx = this._first; idx <= this._last; idx++) {\n        childPositions.set(idx, this._getItemPosition(idx));\n      }\n    }\n    const message: StateChangedMessage = {\n      type: 'stateChanged',\n      scrollSize: {\n        [this._sizeDim]: this._scrollSize,\n        [this._secondarySizeDim]: null,\n      } as Size,\n      range: {\n        first: this._first,\n        last: this._last,\n        firstVisible: this._firstVisible,\n        lastVisible: this._lastVisible,\n      },\n      childPositions,\n    };\n    if (this._scrollError) {\n      message.scrollError = {\n        [this._positionDim]: this._scrollError,\n        [this._secondaryPositionDim]: 0,\n      } as Positions;\n      this._scrollError = 0;\n    }\n    this._hostSink(message);\n  }\n\n  /**\n   * Number of items to display.\n   */\n  private get _num(): number {\n    if (this._first === -1 || this._last === -1) {\n      return 0;\n    }\n    return this._last - this._first + 1;\n  }\n\n  private _checkThresholds() {\n    if ((this._viewDim1 === 0 && this._num > 0) || this._pin !== null) {\n      this._scheduleReflow();\n    } else {\n      const min = Math.max(0, this._scrollPosition - this._overhang);\n      const max = Math.min(\n        this._scrollSize,\n        this._scrollPosition + this._viewDim1 + this._overhang\n      );\n      if (this._physicalMin > min || this._physicalMax < max) {\n        this._scheduleReflow();\n      } else {\n        this._updateVisibleIndices({emit: true});\n      }\n    }\n  }\n\n  /**\n   * Find the indices of the first and last items to intersect the viewport.\n   * Emit a visibleindiceschange event when either index changes.\n   */\n  protected _updateVisibleIndices(options?: UpdateVisibleIndicesOptions) {\n    if (this._first === -1 || this._last === -1) return;\n\n    let firstVisible = this._first;\n    while (\n      firstVisible < this._last &&\n      Math.round(\n        this._getItemPosition(firstVisible)[this._positionDim] +\n          this._getItemSize(firstVisible)[this._sizeDim]\n      ) <= Math.round(this._scrollPosition)\n    ) {\n      firstVisible++;\n    }\n\n    let lastVisible = this._last;\n    while (\n      lastVisible > this._first &&\n      Math.round(this._getItemPosition(lastVisible)[this._positionDim]) >=\n        Math.round(this._scrollPosition + this._viewDim1)\n    ) {\n      lastVisible--;\n    }\n\n    if (\n      firstVisible !== this._firstVisible ||\n      lastVisible !== this._lastVisible\n    ) {\n      this._firstVisible = firstVisible;\n      this._lastVisible = lastVisible;\n      if (options && options.emit) {\n        this._sendVisibilityChangedMessage();\n      }\n    }\n  }\n}\n"],"names":["SizeCache","constructor","config","_map","Map","_roundAverageSize","totalSize","roundAverageSize","this","set","index","value","prev","get","averageSize","size","average","Math","round","getSize","clear","flow","Object","assign","type","FlowLayout","leadingMargin","direction","trailingMargin","offset","collapseMargins","a","b","m","sort","min","max","MetricsCache","_childSizeCache","_marginSizeCache","_metricsCache","update","metrics","marginsToUpdate","Set","keys","forEach","key","k","Number","dim1","add","averageChildSize","totalChildSize","averageMarginSize","totalMarginSize","getLeadingMarginValue","getChildSize","getMarginSize","BaseLayout","_itemSize","width","height","_physicalItems","_newPhysicalItems","_anchorIdx","_anchorPos","_stable","_measureChildren","_estimate","measureChildren","updateItemSizes","sizes","_scheduleReflow","_getPhysicalItem","idx","_getSize","_getAverageSize","_sizeDim","_estimatePosition","c","_first","_last","delta","pos","_getPosition","item","_calculateAnchor","lower","upper","_scrollSize","_viewDim1","items","length","floor","_delta","_getAnchor","firstItem","lastItem","firstMin","candidateIdx","_firstVisible","cMax","Infinity","_getActiveItems","_clearItems","_getItems","_physicalMin","_physicalMax","pin","_scrollPosition","_overhang","anchorSize","undefined","anchorLeadingMargin","anchorTrailingMargin","anchorErr","_scrollError","margin","extentErr","_calculateError","_reflow","super","_resetReflowState","_updateScrollSize","_getItemPosition","_positionDim","_secondaryPositionDim","_getItemSize","_secondarySizeDim","_viewDim2Changed","dim2","_getDefaultConfig","hostSink","_latestCoords","left","top","_direction","_viewportSize","totalScrollSize","offsetWithinScroller","_pendingReflow","_pendingLayoutUpdate","_pin","_lastVisible","_items","_hostSink","Promise","resolve","then","_setItems","dir","_triggerReflow","viewportSize","dims","_viewDim2","_scheduleLayoutUpdate","_checkThresholds","viewportScroll","coords","oldPos","abs","reflowIfNeeded","force","options","block","_clampScrollPosition","val","unpin","_sendUnpinnedMessage","_updateLayout","_setPositionFromPin","_updateVisibleIndices","_sendStateChangedMessage","lastScrollPosition","_calculateScrollIntoViewPosition","itemStartPosition","scrollPosition","itemSize","itemEndPosition","currentScrollPosition","getScrollIntoViewCoordinates","_sendVisibilityChangedMessage","firstVisible","lastVisible","childPositions","message","scrollSize","range","first","last","scrollError","_num","emit"],"mappings":"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"}