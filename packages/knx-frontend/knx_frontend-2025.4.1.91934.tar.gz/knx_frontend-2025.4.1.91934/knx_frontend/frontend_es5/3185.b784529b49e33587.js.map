{"version":3,"file":"3185.b784529b49e33587.js","sources":["webpack://knx-frontend/./homeassistant-frontend/src/components/ha-button-toggle-group.ts","webpack://knx-frontend/./homeassistant-frontend/src/components/ha-selector/ha-selector-button-toggle.ts"],"sourcesContent":["import \"@material/mwc-button/mwc-button\";\nimport type { Button } from \"@material/mwc-button/mwc-button\";\nimport type { TemplateResult } from \"lit\";\nimport { css, html, LitElement } from \"lit\";\nimport { customElement, property, queryAll } from \"lit/decorators\";\nimport { styleMap } from \"lit/directives/style-map\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport type { ToggleButton } from \"../types\";\nimport \"./ha-icon-button\";\n\n@customElement(\"ha-button-toggle-group\")\nexport class HaButtonToggleGroup extends LitElement {\n  @property({ attribute: false }) public buttons!: ToggleButton[];\n\n  @property() public active?: string;\n\n  @property({ attribute: \"full-width\", type: Boolean })\n  public fullWidth = false;\n\n  @property({ type: Boolean }) public dense = false;\n\n  @queryAll(\"mwc-button\") private _buttons?: Button[];\n\n  protected render(): TemplateResult {\n    return html`\n      <div>\n        ${this.buttons.map((button) =>\n          button.iconPath\n            ? html`<ha-icon-button\n                .label=${button.label}\n                .path=${button.iconPath}\n                .value=${button.value}\n                ?active=${this.active === button.value}\n                @click=${this._handleClick}\n              ></ha-icon-button>`\n            : html`<mwc-button\n                style=${styleMap({\n                  width: this.fullWidth\n                    ? `${100 / this.buttons.length}%`\n                    : \"initial\",\n                })}\n                outlined\n                .dense=${this.dense}\n                .value=${button.value}\n                ?active=${this.active === button.value}\n                @click=${this._handleClick}\n                >${button.label}</mwc-button\n              >`\n        )}\n      </div>\n    `;\n  }\n\n  protected updated() {\n    // Work around Safari default margin that is not reset in mwc-button as of aug 2021\n    this._buttons?.forEach(async (button) => {\n      await button.updateComplete;\n      (\n        button.shadowRoot!.querySelector(\"button\") as HTMLButtonElement\n      ).style.margin = \"0\";\n    });\n  }\n\n  private _handleClick(ev): void {\n    this.active = ev.currentTarget.value;\n    fireEvent(this, \"value-changed\", { value: this.active });\n  }\n\n  static styles = css`\n    div {\n      display: flex;\n      --mdc-icon-button-size: var(--button-toggle-size, 36px);\n      --mdc-icon-size: var(--button-toggle-icon-size, 20px);\n      direction: ltr;\n    }\n    mwc-button {\n      flex: 1;\n      --mdc-shape-small: 0;\n      --mdc-button-outline-width: 1px 0 1px 1px;\n      --mdc-button-outline-color: var(--primary-color);\n    }\n    ha-icon-button {\n      border: 1px solid var(--primary-color);\n      border-right-width: 0px;\n    }\n    ha-icon-button,\n    mwc-button {\n      position: relative;\n      cursor: pointer;\n    }\n    ha-icon-button::before,\n    mwc-button::before {\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      position: absolute;\n      background-color: var(--primary-color);\n      opacity: 0;\n      pointer-events: none;\n      content: \"\";\n      transition:\n        opacity 15ms linear,\n        background-color 15ms linear;\n    }\n    ha-icon-button[active]::before,\n    mwc-button[active]::before {\n      opacity: 1;\n    }\n    ha-icon-button[active] {\n      --icon-primary-color: var(--text-primary-color);\n    }\n    mwc-button[active] {\n      --mdc-theme-primary: var(--text-primary-color);\n    }\n    ha-icon-button:first-child,\n    mwc-button:first-child {\n      --mdc-shape-small: 4px 0 0 4px;\n      border-radius: 4px 0 0 4px;\n      --mdc-button-outline-width: 1px;\n    }\n    mwc-button:first-child::before {\n      border-radius: 4px 0 0 4px;\n    }\n    ha-icon-button:last-child,\n    mwc-button:last-child {\n      border-radius: 0 4px 4px 0;\n      border-right-width: 1px;\n      --mdc-shape-small: 0 4px 4px 0;\n      --mdc-button-outline-width: 1px;\n    }\n    mwc-button:last-child::before {\n      border-radius: 0 4px 4px 0;\n    }\n    ha-icon-button:only-child,\n    mwc-button:only-child {\n      --mdc-shape-small: 4px;\n      border-right-width: 1px;\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-button-toggle-group\": HaButtonToggleGroup;\n  }\n}\n","import \"@material/mwc-list/mwc-list-item\";\nimport { LitElement, css, html } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport { caseInsensitiveStringCompare } from \"../../common/string/compare\";\nimport type { ButtonToggleSelector, SelectOption } from \"../../data/selector\";\nimport type { HomeAssistant, ToggleButton } from \"../../types\";\nimport \"../ha-button-toggle-group\";\n\n@customElement(\"ha-selector-button_toggle\")\nexport class HaButtonToggleSelector extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public selector!: ButtonToggleSelector;\n\n  @property() public value?: string;\n\n  @property() public label?: string;\n\n  @property() public helper?: string;\n\n  @property({ attribute: false })\n  public localizeValue?: (key: string) => string;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public required = true;\n\n  protected render() {\n    const options =\n      this.selector.button_toggle?.options?.map((option) =>\n        typeof option === \"object\"\n          ? (option as SelectOption)\n          : ({ value: option, label: option } as SelectOption)\n      ) || [];\n\n    const translationKey = this.selector.button_toggle?.translation_key;\n\n    if (this.localizeValue && translationKey) {\n      options.forEach((option) => {\n        const localizedLabel = this.localizeValue!(\n          `${translationKey}.options.${option.value}`\n        );\n        if (localizedLabel) {\n          option.label = localizedLabel;\n        }\n      });\n    }\n\n    if (this.selector.button_toggle?.sort) {\n      options.sort((a, b) =>\n        caseInsensitiveStringCompare(\n          a.label,\n          b.label,\n          this.hass.locale.language\n        )\n      );\n    }\n\n    const toggleButtons: ToggleButton[] = options.map((item: SelectOption) => ({\n      label: item.label,\n      value: item.value,\n    }));\n\n    return html`\n      ${this.label}\n      <ha-button-toggle-group\n        .buttons=${toggleButtons}\n        .active=${this.value}\n        @value-changed=${this._valueChanged}\n      ></ha-button-toggle-group>\n    `;\n  }\n\n  private _valueChanged(ev) {\n    ev.stopPropagation();\n\n    const value = ev.detail?.value || ev.target.value;\n    if (this.disabled || value === undefined || value === (this.value ?? \"\")) {\n      return;\n    }\n    fireEvent(this, \"value-changed\", {\n      value: value,\n    });\n  }\n\n  static styles = css`\n    :host {\n      position: relative;\n      display: flex;\n      justify-content: space-between;\n      flex-wrap: wrap;\n      gap: 8px;\n      align-items: center;\n    }\n    @media all and (max-width: 600px) {\n      ha-button-toggle-group {\n        flex: 1;\n      }\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-selector-button_toggle\": HaButtonToggleSelector;\n  }\n}\n"],"names":["_decorate","customElement","_initialize","_LitElement","F","constructor","args","d","kind","decorators","property","attribute","key","value","type","Boolean","queryAll","html","_t","_","this","buttons","map","button","iconPath","_t2","label","active","_handleClick","_t3","styleMap","width","fullWidth","length","dense","_this$_buttons","_buttons","forEach","async","updateComplete","shadowRoot","querySelector","style","margin","ev","currentTarget","fireEvent","static","css","_t4","LitElement","HaButtonToggleSelector","_this$selector$button","_this$selector$button2","_this$selector$button3","options","selector","button_toggle","option","translationKey","translation_key","localizeValue","localizedLabel","sort","a","b","caseInsensitiveStringCompare","hass","locale","language","toggleButtons","item","_valueChanged","_ev$detail","_this$value","stopPropagation","detail","target","disabled","undefined"],"mappings":"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"}