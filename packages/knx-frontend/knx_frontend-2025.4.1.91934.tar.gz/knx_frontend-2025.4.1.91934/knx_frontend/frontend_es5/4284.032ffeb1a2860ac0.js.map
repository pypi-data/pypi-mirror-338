{"version":3,"file":"4284.032ffeb1a2860ac0.js","sources":["webpack://knx-frontend/./homeassistant-frontend/src/common/datetime/first_weekday.ts","webpack://knx-frontend/./homeassistant-frontend/src/common/datetime/format_date.ts","webpack://knx-frontend/./homeassistant-frontend/src/common/datetime/format_date_time.ts","webpack://knx-frontend/./homeassistant-frontend/src/common/datetime/format_time.ts","webpack://knx-frontend/./homeassistant-frontend/src/common/datetime/relative_time.ts","webpack://knx-frontend/./homeassistant-frontend/src/common/datetime/resolve-time-zone.ts","webpack://knx-frontend/./homeassistant-frontend/src/common/datetime/use_am_pm.ts","webpack://knx-frontend/./homeassistant-frontend/src/common/string/capitalize-first-letter.ts","webpack://knx-frontend/./homeassistant-frontend/src/common/util/select-unit.ts","webpack://knx-frontend/./homeassistant-frontend/src/data/sensor.ts","webpack://knx-frontend/./homeassistant-frontend/src/panels/lovelace/components/hui-timestamp-display.ts"],"sourcesContent":["import { getWeekStartByLocale } from \"weekstart\";\nimport type { FrontendLocaleData } from \"../../data/translation\";\nimport { FirstWeekday } from \"../../data/translation\";\n\nexport const weekdays = [\n  \"sunday\",\n  \"monday\",\n  \"tuesday\",\n  \"wednesday\",\n  \"thursday\",\n  \"friday\",\n  \"saturday\",\n] as const;\n\ntype WeekdayIndex = 0 | 1 | 2 | 3 | 4 | 5 | 6;\n\nexport const firstWeekdayIndex = (locale: FrontendLocaleData): WeekdayIndex => {\n  if (locale.first_weekday === FirstWeekday.language) {\n    // @ts-ignore\n    if (\"weekInfo\" in Intl.Locale.prototype) {\n      // @ts-ignore\n      return new Intl.Locale(locale.language).weekInfo.firstDay % 7;\n    }\n    return (getWeekStartByLocale(locale.language) % 7) as WeekdayIndex;\n  }\n  return weekdays.includes(locale.first_weekday)\n    ? (weekdays.indexOf(locale.first_weekday) as WeekdayIndex)\n    : 1;\n};\n\nexport const firstWeekday = (locale: FrontendLocaleData) => {\n  const index = firstWeekdayIndex(locale);\n  return weekdays[index];\n};\n","import type { HassConfig } from \"home-assistant-js-websocket\";\nimport memoizeOne from \"memoize-one\";\nimport type { FrontendLocaleData } from \"../../data/translation\";\nimport { DateFormat } from \"../../data/translation\";\nimport { resolveTimeZone } from \"./resolve-time-zone\";\n\n// Tuesday, August 10\nexport const formatDateWeekdayDay = (\n  dateObj: Date,\n  locale: FrontendLocaleData,\n  config: HassConfig\n) => formatDateWeekdayDayMem(locale, config.time_zone).format(dateObj);\n\nconst formatDateWeekdayDayMem = memoizeOne(\n  (locale: FrontendLocaleData, serverTimeZone: string) =>\n    new Intl.DateTimeFormat(locale.language, {\n      weekday: \"long\",\n      month: \"long\",\n      day: \"numeric\",\n      timeZone: resolveTimeZone(locale.time_zone, serverTimeZone),\n    })\n);\n\n// August 10, 2021\nexport const formatDate = (\n  dateObj: Date,\n  locale: FrontendLocaleData,\n  config: HassConfig\n) => formatDateMem(locale, config.time_zone).format(dateObj);\n\nconst formatDateMem = memoizeOne(\n  (locale: FrontendLocaleData, serverTimeZone: string) =>\n    new Intl.DateTimeFormat(locale.language, {\n      year: \"numeric\",\n      month: \"long\",\n      day: \"numeric\",\n      timeZone: resolveTimeZone(locale.time_zone, serverTimeZone),\n    })\n);\n\n// Aug 10, 2021\nexport const formatDateShort = (\n  dateObj: Date,\n  locale: FrontendLocaleData,\n  config: HassConfig\n) => formatDateShortMem(locale, config.time_zone).format(dateObj);\n\nconst formatDateShortMem = memoizeOne(\n  (locale: FrontendLocaleData, serverTimeZone: string) =>\n    new Intl.DateTimeFormat(locale.language, {\n      year: \"numeric\",\n      month: \"short\",\n      day: \"numeric\",\n      timeZone: resolveTimeZone(locale.time_zone, serverTimeZone),\n    })\n);\n\n// 10/08/2021\nexport const formatDateNumeric = (\n  dateObj: Date,\n  locale: FrontendLocaleData,\n  config: HassConfig\n) => {\n  const formatter = formatDateNumericMem(locale, config.time_zone);\n\n  if (\n    locale.date_format === DateFormat.language ||\n    locale.date_format === DateFormat.system\n  ) {\n    return formatter.format(dateObj);\n  }\n\n  const parts = formatter.formatToParts(dateObj);\n\n  const literal = parts.find((value) => value.type === \"literal\")?.value;\n  const day = parts.find((value) => value.type === \"day\")?.value;\n  const month = parts.find((value) => value.type === \"month\")?.value;\n  const year = parts.find((value) => value.type === \"year\")?.value;\n\n  const lastPart = parts.at(parts.length - 1);\n  let lastLiteral = lastPart?.type === \"literal\" ? lastPart?.value : \"\";\n\n  if (locale.language === \"bg\" && locale.date_format === DateFormat.YMD) {\n    lastLiteral = \"\";\n  }\n\n  const formats = {\n    [DateFormat.DMY]: `${day}${literal}${month}${literal}${year}${lastLiteral}`,\n    [DateFormat.MDY]: `${month}${literal}${day}${literal}${year}${lastLiteral}`,\n    [DateFormat.YMD]: `${year}${literal}${month}${literal}${day}${lastLiteral}`,\n  };\n\n  return formats[locale.date_format];\n};\n\nconst formatDateNumericMem = memoizeOne(\n  (locale: FrontendLocaleData, serverTimeZone: string) => {\n    const localeString =\n      locale.date_format === DateFormat.system ? undefined : locale.language;\n\n    if (\n      locale.date_format === DateFormat.language ||\n      locale.date_format === DateFormat.system\n    ) {\n      return new Intl.DateTimeFormat(localeString, {\n        year: \"numeric\",\n        month: \"numeric\",\n        day: \"numeric\",\n        timeZone: resolveTimeZone(locale.time_zone, serverTimeZone),\n      });\n    }\n\n    return new Intl.DateTimeFormat(localeString, {\n      year: \"numeric\",\n      month: \"numeric\",\n      day: \"numeric\",\n      timeZone: resolveTimeZone(locale.time_zone, serverTimeZone),\n    });\n  }\n);\n\n// Aug 10\nexport const formatDateVeryShort = (\n  dateObj: Date,\n  locale: FrontendLocaleData,\n  config: HassConfig\n) => formatDateVeryShortMem(locale, config.time_zone).format(dateObj);\n\nconst formatDateVeryShortMem = memoizeOne(\n  (locale: FrontendLocaleData, serverTimeZone: string) =>\n    new Intl.DateTimeFormat(locale.language, {\n      day: \"numeric\",\n      month: \"short\",\n      timeZone: resolveTimeZone(locale.time_zone, serverTimeZone),\n    })\n);\n\n// August 2021\nexport const formatDateMonthYear = (\n  dateObj: Date,\n  locale: FrontendLocaleData,\n  config: HassConfig\n) => formatDateMonthYearMem(locale, config.time_zone).format(dateObj);\n\nconst formatDateMonthYearMem = memoizeOne(\n  (locale: FrontendLocaleData, serverTimeZone: string) =>\n    new Intl.DateTimeFormat(locale.language, {\n      month: \"long\",\n      year: \"numeric\",\n      timeZone: resolveTimeZone(locale.time_zone, serverTimeZone),\n    })\n);\n\n// August\nexport const formatDateMonth = (\n  dateObj: Date,\n  locale: FrontendLocaleData,\n  config: HassConfig\n) => formatDateMonthMem(locale, config.time_zone).format(dateObj);\n\nconst formatDateMonthMem = memoizeOne(\n  (locale: FrontendLocaleData, serverTimeZone: string) =>\n    new Intl.DateTimeFormat(locale.language, {\n      month: \"long\",\n      timeZone: resolveTimeZone(locale.time_zone, serverTimeZone),\n    })\n);\n\n// 2021\nexport const formatDateYear = (\n  dateObj: Date,\n  locale: FrontendLocaleData,\n  config: HassConfig\n) => formatDateYearMem(locale, config.time_zone).format(dateObj);\n\nconst formatDateYearMem = memoizeOne(\n  (locale: FrontendLocaleData, serverTimeZone: string) =>\n    new Intl.DateTimeFormat(locale.language, {\n      year: \"numeric\",\n      timeZone: resolveTimeZone(locale.time_zone, serverTimeZone),\n    })\n);\n\n// Monday\nexport const formatDateWeekday = (\n  dateObj: Date,\n  locale: FrontendLocaleData,\n  config: HassConfig\n) => formatDateWeekdayMem(locale, config.time_zone).format(dateObj);\n\nconst formatDateWeekdayMem = memoizeOne(\n  (locale: FrontendLocaleData, serverTimeZone: string) =>\n    new Intl.DateTimeFormat(locale.language, {\n      weekday: \"long\",\n      timeZone: resolveTimeZone(locale.time_zone, serverTimeZone),\n    })\n);\n\n// Mon\nexport const formatDateWeekdayShort = (\n  dateObj: Date,\n  locale: FrontendLocaleData,\n  config: HassConfig\n) => formatDateWeekdayShortMem(locale, config.time_zone).format(dateObj);\n\nconst formatDateWeekdayShortMem = memoizeOne(\n  (locale: FrontendLocaleData, serverTimeZone: string) =>\n    new Intl.DateTimeFormat(locale.language, {\n      weekday: \"short\",\n      timeZone: resolveTimeZone(locale.time_zone, serverTimeZone),\n    })\n);\n","import type { HassConfig } from \"home-assistant-js-websocket\";\nimport memoizeOne from \"memoize-one\";\nimport type { FrontendLocaleData } from \"../../data/translation\";\nimport { formatDateNumeric } from \"./format_date\";\nimport { formatTime } from \"./format_time\";\nimport { resolveTimeZone } from \"./resolve-time-zone\";\nimport { useAmPm } from \"./use_am_pm\";\n\n// August 9, 2021, 8:23 AM\nexport const formatDateTime = (\n  dateObj: Date,\n  locale: FrontendLocaleData,\n  config: HassConfig\n) => formatDateTimeMem(locale, config.time_zone).format(dateObj);\n\nconst formatDateTimeMem = memoizeOne(\n  (locale: FrontendLocaleData, serverTimeZone: string) =>\n    new Intl.DateTimeFormat(locale.language, {\n      year: \"numeric\",\n      month: \"long\",\n      day: \"numeric\",\n      hour: useAmPm(locale) ? \"numeric\" : \"2-digit\",\n      minute: \"2-digit\",\n      hourCycle: useAmPm(locale) ? \"h12\" : \"h23\",\n      timeZone: resolveTimeZone(locale.time_zone, serverTimeZone),\n    })\n);\n\nexport const formatDateTimeWithBrowserDefaults = (dateObj: Date) =>\n  formatDateTimeWithBrowserDefaultsMem().format(dateObj);\n\nconst formatDateTimeWithBrowserDefaultsMem = memoizeOne(\n  () =>\n    new Intl.DateTimeFormat(undefined, {\n      year: \"numeric\",\n      month: \"long\",\n      day: \"numeric\",\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n    })\n);\n\n// Aug 9, 2021, 8:23 AM\nexport const formatShortDateTimeWithYear = (\n  dateObj: Date,\n  locale: FrontendLocaleData,\n  config: HassConfig\n) => formatShortDateTimeWithYearMem(locale, config.time_zone).format(dateObj);\n\nconst formatShortDateTimeWithYearMem = memoizeOne(\n  (locale: FrontendLocaleData, serverTimeZone: string) =>\n    new Intl.DateTimeFormat(locale.language, {\n      year: \"numeric\",\n      month: \"short\",\n      day: \"numeric\",\n      hour: useAmPm(locale) ? \"numeric\" : \"2-digit\",\n      minute: \"2-digit\",\n      hourCycle: useAmPm(locale) ? \"h12\" : \"h23\",\n      timeZone: resolveTimeZone(locale.time_zone, serverTimeZone),\n    })\n);\n\n// Aug 9, 8:23 AM\nexport const formatShortDateTime = (\n  dateObj: Date,\n  locale: FrontendLocaleData,\n  config: HassConfig\n) => formatShortDateTimeMem(locale, config.time_zone).format(dateObj);\n\nconst formatShortDateTimeMem = memoizeOne(\n  (locale: FrontendLocaleData, serverTimeZone: string) =>\n    new Intl.DateTimeFormat(locale.language, {\n      month: \"short\",\n      day: \"numeric\",\n      hour: useAmPm(locale) ? \"numeric\" : \"2-digit\",\n      minute: \"2-digit\",\n      hourCycle: useAmPm(locale) ? \"h12\" : \"h23\",\n      timeZone: resolveTimeZone(locale.time_zone, serverTimeZone),\n    })\n);\n\nexport const formatShortDateTimeWithConditionalYear = (\n  dateObj: Date,\n  locale: FrontendLocaleData,\n  config: HassConfig\n) => {\n  const now = new Date();\n  if (now.getFullYear() === dateObj.getFullYear()) {\n    return formatShortDateTime(dateObj, locale, config);\n  }\n  return formatShortDateTimeWithYear(dateObj, locale, config);\n};\n\n// August 9, 2021, 8:23:15 AM\nexport const formatDateTimeWithSeconds = (\n  dateObj: Date,\n  locale: FrontendLocaleData,\n  config: HassConfig\n) => formatDateTimeWithSecondsMem(locale, config.time_zone).format(dateObj);\n\nconst formatDateTimeWithSecondsMem = memoizeOne(\n  (locale: FrontendLocaleData, serverTimeZone: string) =>\n    new Intl.DateTimeFormat(locale.language, {\n      year: \"numeric\",\n      month: \"long\",\n      day: \"numeric\",\n      hour: useAmPm(locale) ? \"numeric\" : \"2-digit\",\n      minute: \"2-digit\",\n      second: \"2-digit\",\n      hourCycle: useAmPm(locale) ? \"h12\" : \"h23\",\n      timeZone: resolveTimeZone(locale.time_zone, serverTimeZone),\n    })\n);\n\n// 9/8/2021, 8:23 AM\nexport const formatDateTimeNumeric = (\n  dateObj: Date,\n  locale: FrontendLocaleData,\n  config: HassConfig\n) =>\n  `${formatDateNumeric(dateObj, locale, config)}, ${formatTime(\n    dateObj,\n    locale,\n    config\n  )}`;\n","import type { HassConfig } from \"home-assistant-js-websocket\";\nimport memoizeOne from \"memoize-one\";\nimport type { FrontendLocaleData } from \"../../data/translation\";\nimport { resolveTimeZone } from \"./resolve-time-zone\";\nimport { useAmPm } from \"./use_am_pm\";\n\n// 9:15 PM || 21:15\nexport const formatTime = (\n  dateObj: Date,\n  locale: FrontendLocaleData,\n  config: HassConfig\n) => formatTimeMem(locale, config.time_zone).format(dateObj);\n\nconst formatTimeMem = memoizeOne(\n  (locale: FrontendLocaleData, serverTimeZone: string) =>\n    new Intl.DateTimeFormat(locale.language, {\n      hour: \"numeric\",\n      minute: \"2-digit\",\n      hourCycle: useAmPm(locale) ? \"h12\" : \"h23\",\n      timeZone: resolveTimeZone(locale.time_zone, serverTimeZone),\n    })\n);\n\n// 9:15:24 PM || 21:15:24\nexport const formatTimeWithSeconds = (\n  dateObj: Date,\n  locale: FrontendLocaleData,\n  config: HassConfig\n) => formatTimeWithSecondsMem(locale, config.time_zone).format(dateObj);\n\nconst formatTimeWithSecondsMem = memoizeOne(\n  (locale: FrontendLocaleData, serverTimeZone: string) =>\n    new Intl.DateTimeFormat(locale.language, {\n      hour: useAmPm(locale) ? \"numeric\" : \"2-digit\",\n      minute: \"2-digit\",\n      second: \"2-digit\",\n      hourCycle: useAmPm(locale) ? \"h12\" : \"h23\",\n      timeZone: resolveTimeZone(locale.time_zone, serverTimeZone),\n    })\n);\n\n// Tuesday 7:00 PM || Tuesday 19:00\nexport const formatTimeWeekday = (\n  dateObj: Date,\n  locale: FrontendLocaleData,\n  config: HassConfig\n) => formatTimeWeekdayMem(locale, config.time_zone).format(dateObj);\n\nconst formatTimeWeekdayMem = memoizeOne(\n  (locale: FrontendLocaleData, serverTimeZone: string) =>\n    new Intl.DateTimeFormat(locale.language, {\n      weekday: \"long\",\n      hour: useAmPm(locale) ? \"numeric\" : \"2-digit\",\n      minute: \"2-digit\",\n      hourCycle: useAmPm(locale) ? \"h12\" : \"h23\",\n      timeZone: resolveTimeZone(locale.time_zone, serverTimeZone),\n    })\n);\n\n// 21:15\nexport const formatTime24h = (\n  dateObj: Date,\n  locale: FrontendLocaleData,\n  config: HassConfig\n) => formatTime24hMem(locale, config.time_zone).format(dateObj);\n\nconst formatTime24hMem = memoizeOne(\n  (locale: FrontendLocaleData, serverTimeZone: string) =>\n    // en-GB to fix Chrome 24:59 to 0:59 https://stackoverflow.com/a/60898146\n    new Intl.DateTimeFormat(\"en-GB\", {\n      hour: \"numeric\",\n      minute: \"2-digit\",\n      hour12: false,\n      timeZone: resolveTimeZone(locale.time_zone, serverTimeZone),\n    })\n);\n","import memoizeOne from \"memoize-one\";\nimport type { FrontendLocaleData } from \"../../data/translation\";\nimport { selectUnit } from \"../util/select-unit\";\n\nconst formatRelTimeMem = memoizeOne(\n  (locale: FrontendLocaleData) =>\n    new Intl.RelativeTimeFormat(locale.language, { numeric: \"auto\" })\n);\n\nexport const relativeTime = (\n  from: Date,\n  locale: FrontendLocaleData,\n  to?: Date,\n  includeTense = true\n): string => {\n  const diff = selectUnit(from, to, locale);\n  if (includeTense) {\n    return formatRelTimeMem(locale).format(diff.value, diff.unit);\n  }\n  return Intl.NumberFormat(locale.language, {\n    style: \"unit\",\n    unit: diff.unit,\n    unitDisplay: \"long\",\n  }).format(Math.abs(diff.value));\n};\n","import { TimeZone } from \"../../data/translation\";\n\nconst RESOLVED_TIME_ZONE = Intl.DateTimeFormat?.().resolvedOptions?.().timeZone;\n\n// Browser time zone can be determined from Intl, with fallback to UTC for polyfill or no support.\nexport const LOCAL_TIME_ZONE = RESOLVED_TIME_ZONE ?? \"UTC\";\n\n// Pick time zone based on user profile option.  Core zone is used when local cannot be determined.\nexport const resolveTimeZone = (option: TimeZone, serverTimeZone: string) =>\n  option === TimeZone.local && RESOLVED_TIME_ZONE\n    ? LOCAL_TIME_ZONE\n    : serverTimeZone;\n","import memoizeOne from \"memoize-one\";\nimport type { FrontendLocaleData } from \"../../data/translation\";\nimport { TimeFormat } from \"../../data/translation\";\n\nexport const useAmPm = memoizeOne((locale: FrontendLocaleData): boolean => {\n  if (\n    locale.time_format === TimeFormat.language ||\n    locale.time_format === TimeFormat.system\n  ) {\n    const testLanguage =\n      locale.time_format === TimeFormat.language ? locale.language : undefined;\n    const test = new Date(\"January 1, 2023 22:00:00\").toLocaleString(\n      testLanguage\n    );\n    return test.includes(\"10\");\n  }\n\n  return locale.time_format === TimeFormat.am_pm;\n});\n","export const capitalizeFirstLetter = (str: string) =>\n  str.charAt(0).toUpperCase() + str.slice(1);\n","import { differenceInDays, differenceInWeeks, startOfWeek } from \"date-fns\";\nimport type { FrontendLocaleData } from \"../../data/translation\";\nimport { firstWeekdayIndex } from \"../datetime/first_weekday\";\n\nexport type Unit =\n  | \"second\"\n  | \"minute\"\n  | \"hour\"\n  | \"day\"\n  | \"week\"\n  | \"month\"\n  | \"quarter\"\n  | \"year\";\n\nconst MS_PER_SECOND = 1e3;\nconst SECS_PER_MIN = 60;\nconst SECS_PER_HOUR = SECS_PER_MIN * 60;\n\n// Adapted from https://github.com/formatjs/formatjs/blob/186cef62f980ec66252ee232f438a42d0b51b9f9/packages/intl-utils/src/diff.ts\nexport function selectUnit(\n  from: Date | number,\n  // eslint-disable-next-line default-param-last\n  to: Date | number = Date.now(),\n  locale: FrontendLocaleData,\n  thresholds: Partial<Thresholds> = {}\n): { value: number; unit: Unit } {\n  const resolvedThresholds: Thresholds = {\n    ...DEFAULT_THRESHOLDS,\n    ...(thresholds || {}),\n  };\n\n  const secs = (+from - +to) / MS_PER_SECOND;\n  if (Math.abs(secs) < resolvedThresholds.second) {\n    return {\n      value: Math.round(secs),\n      unit: \"second\",\n    };\n  }\n\n  const mins = secs / SECS_PER_MIN;\n  if (Math.abs(mins) < resolvedThresholds.minute) {\n    return {\n      value: Math.round(mins),\n      unit: \"minute\",\n    };\n  }\n\n  const hours = secs / SECS_PER_HOUR;\n  if (Math.abs(hours) < resolvedThresholds.hour) {\n    return {\n      value: Math.round(hours),\n      unit: \"hour\",\n    };\n  }\n\n  const fromDate = new Date(from);\n  const toDate = new Date(to);\n\n  // Set time component to zero, which allows us to compare only the days\n  fromDate.setHours(0, 0, 0, 0);\n  toDate.setHours(0, 0, 0, 0);\n\n  const days = differenceInDays(fromDate, toDate);\n  if (days === 0) {\n    return {\n      value: Math.round(hours),\n      unit: \"hour\",\n    };\n  }\n  if (Math.abs(days) < resolvedThresholds.day) {\n    return {\n      value: days,\n      unit: \"day\",\n    };\n  }\n\n  const firstWeekday = firstWeekdayIndex(locale);\n  const fromWeek = startOfWeek(fromDate, { weekStartsOn: firstWeekday });\n  const toWeek = startOfWeek(toDate, { weekStartsOn: firstWeekday });\n\n  const weeks = differenceInWeeks(fromWeek, toWeek);\n  if (weeks === 0) {\n    return {\n      value: days,\n      unit: \"day\",\n    };\n  }\n  if (Math.abs(weeks) < resolvedThresholds.week) {\n    return {\n      value: weeks,\n      unit: \"week\",\n    };\n  }\n\n  const years = fromDate.getFullYear() - toDate.getFullYear();\n  const months = years * 12 + fromDate.getMonth() - toDate.getMonth();\n  if (months === 0) {\n    return {\n      value: weeks,\n      unit: \"week\",\n    };\n  }\n  if (Math.abs(months) < resolvedThresholds.month || years === 0) {\n    return {\n      value: months,\n      unit: \"month\",\n    };\n  }\n\n  return {\n    value: Math.round(years),\n    unit: \"year\",\n  };\n}\n\ntype Thresholds = Record<\n  \"second\" | \"minute\" | \"hour\" | \"day\" | \"week\" | \"month\",\n  number\n>;\n\nexport const DEFAULT_THRESHOLDS: Thresholds = {\n  second: 45, // seconds to minute\n  minute: 45, // minutes to hour\n  hour: 22, // hour to day\n  day: 5, // day to week\n  week: 4, // week to months\n  month: 11, // month to years\n};\n","import type { HomeAssistant } from \"../types\";\n\nexport const SENSOR_DEVICE_CLASS_BATTERY = \"battery\";\nexport const SENSOR_DEVICE_CLASS_TIMESTAMP = \"timestamp\";\nexport const SENSOR_DEVICE_CLASS_TEMPERATURE = \"temperature\";\nexport const SENSOR_DEVICE_CLASS_HUMIDITY = \"humidity\";\n\nexport interface SensorDeviceClassUnits {\n  units: string[];\n}\n\nexport const getSensorDeviceClassConvertibleUnits = (\n  hass: HomeAssistant,\n  deviceClass: string\n): Promise<SensorDeviceClassUnits> =>\n  hass.callWS({\n    type: \"sensor/device_class_convertible_units\",\n    device_class: deviceClass,\n  });\n\nexport interface SensorNumericDeviceClasses {\n  numeric_device_classes: string[];\n}\n\nlet sensorNumericDeviceClassesCache:\n  | Promise<SensorNumericDeviceClasses>\n  | undefined;\n\nexport const getSensorNumericDeviceClasses = async (\n  hass: HomeAssistant\n): Promise<SensorNumericDeviceClasses> => {\n  if (sensorNumericDeviceClassesCache) {\n    return sensorNumericDeviceClassesCache;\n  }\n  sensorNumericDeviceClassesCache = hass.callWS({\n    type: \"sensor/numeric_device_classes\",\n  });\n  return sensorNumericDeviceClassesCache!;\n};\n","import type { HassConfig } from \"home-assistant-js-websocket\";\nimport type { PropertyValues } from \"lit\";\nimport { html, LitElement, nothing } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { formatDate } from \"../../../common/datetime/format_date\";\nimport { formatDateTime } from \"../../../common/datetime/format_date_time\";\nimport { formatTime } from \"../../../common/datetime/format_time\";\nimport { relativeTime } from \"../../../common/datetime/relative_time\";\nimport { capitalizeFirstLetter } from \"../../../common/string/capitalize-first-letter\";\nimport type { FrontendLocaleData } from \"../../../data/translation\";\nimport type { HomeAssistant } from \"../../../types\";\nimport type { TimestampRenderingFormat } from \"./types\";\n\nconst FORMATS: Record<\n  string,\n  (ts: Date, lang: FrontendLocaleData, config: HassConfig) => string\n> = {\n  date: formatDate,\n  datetime: formatDateTime,\n  time: formatTime,\n};\nconst INTERVAL_FORMAT = [\"relative\", \"total\"];\n\n@customElement(\"hui-timestamp-display\")\nclass HuiTimestampDisplay extends LitElement {\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @property({ attribute: false }) public ts?: Date;\n\n  @property() public format?: TimestampRenderingFormat;\n\n  @property({ type: Boolean }) public capitalize = false;\n\n  @state() private _relative?: string;\n\n  private _connected?: boolean;\n\n  private _interval?: number;\n\n  public connectedCallback(): void {\n    super.connectedCallback();\n    this._connected = true;\n    this._startInterval();\n  }\n\n  public disconnectedCallback(): void {\n    super.disconnectedCallback();\n    this._connected = false;\n    this._clearInterval();\n  }\n\n  protected render() {\n    if (!this.ts || !this.hass) {\n      return nothing;\n    }\n\n    if (isNaN(this.ts.getTime())) {\n      return html`${this.hass.localize(\n        \"ui.panel.lovelace.components.timestamp-display.invalid\"\n      )}`;\n    }\n\n    const format = this._format;\n\n    if (INTERVAL_FORMAT.includes(format)) {\n      return html` ${this._relative} `;\n    }\n    if (format in FORMATS) {\n      return html`\n        ${FORMATS[format](this.ts, this.hass.locale, this.hass.config)}\n      `;\n    }\n    return html`${this.hass.localize(\n      \"ui.panel.lovelace.components.timestamp-display.invalid_format\"\n    )}`;\n  }\n\n  protected updated(changedProperties: PropertyValues): void {\n    super.updated(changedProperties);\n    if (!changedProperties.has(\"format\") || !this._connected) {\n      return;\n    }\n\n    if (INTERVAL_FORMAT.includes(\"relative\")) {\n      this._startInterval();\n    } else {\n      this._clearInterval();\n    }\n  }\n\n  private get _format(): string {\n    return this.format || \"relative\";\n  }\n\n  private _startInterval(): void {\n    this._clearInterval();\n    if (this._connected && INTERVAL_FORMAT.includes(this._format)) {\n      this._updateRelative();\n      this._interval = window.setInterval(() => this._updateRelative(), 1000);\n    }\n  }\n\n  private _clearInterval(): void {\n    if (this._interval) {\n      clearInterval(this._interval);\n      this._interval = undefined;\n    }\n  }\n\n  private _updateRelative(): void {\n    if (this.ts && this.hass?.localize) {\n      this._relative =\n        this._format === \"relative\"\n          ? relativeTime(this.ts, this.hass!.locale)\n          : relativeTime(new Date(), this.hass!.locale, this.ts, false);\n\n      this._relative = this.capitalize\n        ? capitalizeFirstLetter(this._relative)\n        : this._relative;\n    }\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-timestamp-display\": HuiTimestampDisplay;\n  }\n}\n"],"names":["weekdays","firstWeekdayIndex","locale","first_weekday","FirstWeekday","Intl","Locale","prototype","language","weekInfo","firstDay","getWeekStartByLocale","includes","indexOf","memoizeOne","serverTimeZone","DateTimeFormat","weekday","month","day","timeZone","resolveTimeZone","time_zone","formatDate","dateObj","config","formatDateMem","format","year","formatDateNumeric","_parts$find","_parts$find2","_parts$find3","_parts$find4","formatter","formatDateNumericMem","date_format","DateFormat","parts","formatToParts","literal","find","value","type","lastPart","at","length","lastLiteral","localeString","undefined","formatDateTime","formatDateTimeMem","hour","useAmPm","minute","hourCycle","second","formatTime","formatTimeMem","formatTimeWithSeconds","formatTimeWithSecondsMem","formatTimeWeekday","formatTimeWeekdayMem","formatTime24h","formatTime24hMem","hour12","formatRelTimeMem","RelativeTimeFormat","numeric","relativeTime","from","to","includeTense","diff","selectUnit","unit","NumberFormat","style","unitDisplay","Math","abs","RESOLVED_TIME_ZONE","_Intl$DateTimeFormat","_Intl$DateTimeFormat$","_Intl$DateTimeFormat$2","call","resolvedOptions","LOCAL_TIME_ZONE","option","TimeZone","time_format","TimeFormat","testLanguage","Date","toLocaleString","capitalizeFirstLetter","str","charAt","toUpperCase","slice","MS_PER_SECOND","SECS_PER_MIN","SECS_PER_HOUR","now","thresholds","resolvedThresholds","Object","assign","DEFAULT_THRESHOLDS","secs","round","mins","hours","fromDate","toDate","setHours","days","differenceInDays","firstWeekday","fromWeek","startOfWeek","weekStartsOn","toWeek","weeks","differenceInWeeks","week","years","getFullYear","months","getMonth","SENSOR_DEVICE_CLASS_TIMESTAMP","SENSOR_DEVICE_CLASS_TEMPERATURE","SENSOR_DEVICE_CLASS_HUMIDITY","FORMATS","date","datetime","time","INTERVAL_FORMAT","_decorate","customElement","_initialize","_LitElement","HuiTimestampDisplay","constructor","args","F","d","kind","decorators","property","attribute","key","Boolean","state","_superPropGet","this","_connected","_startInterval","_clearInterval","ts","hass","nothing","isNaN","getTime","html","_t","_","localize","_format","_t2","_relative","_t3","_t4","changedProperties","has","_updateRelative","_interval","window","setInterval","clearInterval","_this$hass","capitalize","LitElement"],"mappings":"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"}