{"version":3,"file":"9752.9d0e29cb8fbf72c3.js","sources":["webpack://knx-frontend/./homeassistant-frontend/src/components/ha-form/ha-form-string.ts"],"sourcesContent":["import { mdiEye, mdiEyeOff } from \"@mdi/js\";\nimport type { PropertyValues, TemplateResult } from \"lit\";\nimport { LitElement, css, html, nothing } from \"lit\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport \"../ha-icon-button\";\nimport \"../ha-textfield\";\nimport type { HaTextField } from \"../ha-textfield\";\nimport type {\n  HaFormElement,\n  HaFormStringData,\n  HaFormStringSchema,\n} from \"./types\";\nimport type {\n  LocalizeFunc,\n  LocalizeKeys,\n} from \"../../common/translations/localize\";\n\nconst MASKED_FIELDS = [\"password\", \"secret\", \"token\"];\n\n@customElement(\"ha-form-string\")\nexport class HaFormString extends LitElement implements HaFormElement {\n  @property({ attribute: false }) public localize?: LocalizeFunc;\n\n  @property({ attribute: false }) public localizeBaseKey =\n    \"ui.components.selectors.text\";\n\n  @property({ attribute: false }) public schema!: HaFormStringSchema;\n\n  @property() public data!: HaFormStringData;\n\n  @property() public label!: string;\n\n  @property() public helper?: string;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @state() protected unmaskedPassword = false;\n\n  @query(\"ha-textfield\") private _input?: HaTextField;\n\n  public focus(): void {\n    if (this._input) {\n      this._input.focus();\n    }\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <ha-textfield\n        .type=${!this.isPassword\n          ? this.stringType\n          : this.unmaskedPassword\n            ? \"text\"\n            : \"password\"}\n        .label=${this.label}\n        .value=${this.data || \"\"}\n        .helper=${this.helper}\n        helperPersistent\n        .disabled=${this.disabled}\n        .required=${this.schema.required}\n        .autoValidate=${this.schema.required}\n        .name=${this.schema.name}\n        .autocomplete=${this.schema.autocomplete}\n        .suffix=${this.isPassword\n          ? // reserve some space for the icon.\n            html`<div style=\"width: 24px\"></div>`\n          : this.schema.description?.suffix}\n        .validationMessage=${this.schema.required\n          ? this.localize?.(\"ui.common.error_required\")\n          : undefined}\n        @input=${this._valueChanged}\n        @change=${this._valueChanged}\n      ></ha-textfield>\n      ${this.renderIcon()}\n    `;\n  }\n\n  protected renderIcon() {\n    if (!this.isPassword) return nothing;\n    return html`\n      <ha-icon-button\n        .label=${this.localize?.(\n          `${this.localizeBaseKey}.${\n            this.unmaskedPassword ? \"hide_password\" : \"show_password\"\n          }` as LocalizeKeys\n        )}\n        @click=${this.toggleUnmaskedPassword}\n        .path=${this.unmaskedPassword ? mdiEyeOff : mdiEye}\n      ></ha-icon-button>\n    `;\n  }\n\n  protected updated(changedProps: PropertyValues): void {\n    if (changedProps.has(\"schema\")) {\n      this.toggleAttribute(\"own-margin\", !!this.schema.required);\n    }\n  }\n\n  protected toggleUnmaskedPassword(): void {\n    this.unmaskedPassword = !this.unmaskedPassword;\n  }\n\n  protected _valueChanged(ev: Event): void {\n    let value: string | undefined = (ev.target as HaTextField).value;\n    if (this.data === value) {\n      return;\n    }\n    if (value === \"\" && !this.schema.required) {\n      value = undefined;\n    }\n    fireEvent(this, \"value-changed\", {\n      value,\n    });\n  }\n\n  protected get stringType(): string {\n    if (this.schema.format) {\n      if ([\"email\", \"url\"].includes(this.schema.format)) {\n        return this.schema.format;\n      }\n      if (this.schema.format === \"fqdnurl\") {\n        return \"url\";\n      }\n    }\n    return \"text\";\n  }\n\n  protected get isPassword(): boolean {\n    return MASKED_FIELDS.some((field) => this.schema.name.includes(field));\n  }\n\n  static styles = css`\n    :host {\n      display: block;\n      position: relative;\n    }\n    :host([own-margin]) {\n      margin-bottom: 5px;\n    }\n    ha-textfield {\n      display: block;\n    }\n    ha-icon-button {\n      position: absolute;\n      top: 8px;\n      right: 8px;\n      inset-inline-start: initial;\n      inset-inline-end: 8px;\n      --mdc-icon-button-size: 40px;\n      --mdc-icon-size: 20px;\n      color: var(--secondary-text-color);\n      direction: var(--direction);\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-form-string\": HaFormString;\n  }\n}\n"],"names":["MASKED_FIELDS","HaFormString","_decorate","customElement","_initialize","_LitElement","F","constructor","args","d","kind","decorators","property","attribute","key","value","type","Boolean","state","query","this","_input","focus","_this$schema$descript","_this$localize","html","_t","_","isPassword","unmaskedPassword","stringType","label","data","helper","disabled","schema","required","name","autocomplete","_t2","description","suffix","localize","call","undefined","_valueChanged","renderIcon","_this$localize2","_t3","localizeBaseKey","toggleUnmaskedPassword","nothing","changedProps","has","toggleAttribute","ev","target","fireEvent","format","includes","some","field","static","css","_t4","LitElement"],"mappings":"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"}