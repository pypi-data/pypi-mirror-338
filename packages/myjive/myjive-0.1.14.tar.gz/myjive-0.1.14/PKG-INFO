Metadata-Version: 2.4
Name: myjive
Version: 0.1.14
Summary: Personal implementation of jive C++ library in Python
Author-email: Anne Poot <a.poot-1@tudelft.nl>
License: Copyright (c) 2024 Anne Poot
        
        Permission is hereby granted, free of charge, to any person obtaining
        a copy of this software and associated documentation files (the
        "Software"), to deal in the Software without restriction, including
        without limitation the rights to use, copy, modify, merge, publish,
        distribute, sublicense, and/or sell copies of the Software, and to
        permit persons to whom the Software is furnished to do so, subject to
        the following conditions:
        
        The above copyright notice and this permission notice shall be
        included in all copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
        EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
        MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
        NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
        LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
        OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
        WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
        
Project-URL: homepage, https://gitlab.tudelft.nl/apoot1/myjive
Project-URL: download, https://gitlab.tudelft.nl/apoot1/myjive/-/archive/v0.1.14/myjive-v0.1.14.tar.gz
Keywords: jive,mathematics,finite-element-method,engineering
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: Topic :: Scientific/Engineering :: Mathematics
Classifier: Programming Language :: Python :: 3.10
Requires-Python: ==3.10.*
Description-Content-Type: text/markdown
License-File: LICENSE.txt
Requires-Dist: matplotlib
Requires-Dist: numba
Requires-Dist: numpy<2.0.0
Requires-Dist: pandas
Requires-Dist: scikit-sparse>=0.4.12
Requires-Dist: scipy>=1.12
Provides-Extra: dev
Requires-Dist: pytest; extra == "dev"
Dynamic: license-file

# MyJive
A personal adaptation of [PyJive](https://gitlab.tudelft.nl/fmeer/pyjive) that is set up in a more "Pythonic" way.

## Getting started
Run the following anaconda commands to take care of all dependencies:

```
conda env create -f ENVIRONMENT.yml
conda activate myjive
conda develop /path/to/myjive
```

## Differences with PyJive
PyJive is a Python adaptation of the C++ Jive library that stays very close to C++ setup.
In MyJive, more liberty is taken, since Python offers a lot more flexibility that C++ does not have.

Key differences are:

- `MultiModel()` has been removed. In (Py)Jive, each module can only have a single model associated with it. The `MultiModel` class was created to connect multiple models to a single module. In MyJive, each module has a list of models associated with it, rather than a single model, so the `MultiModel` class is redundant.
- `take_action(action)` has been removed. In (Py)Jive, modules use the `take_action` function to determine which model functions are called. The `take_action` function is called on all child models, and based on the value of the `action` parameter, each child model decides whether it should do something or not. To make it less opaque what models come into play at which actions, MyJive has been set up so that modules collect all relevant models that are able to perform a certain action, and then call the action only on these models. All methods with an all-caps name are considered actions.
- `params` has been fully removed. All input and output and output has now been made explicit for all actions that are executed by the modules in the models. Optional arguments are handled with `**kwargs` arguments.
- Individual `declare_model` and `declare_module` functions have been replaced with the `declare` class method in the `Module` and `Model` classes.
- Jive and non-Jive functionality has been separated into different folders (`/jive/` and `/core/`, respectively).
