# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import viu_api_pb2 as viu__api__pb2

GRPC_GENERATED_VERSION = '1.71.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in viu_api_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class ApiServiceStub(object):
    """ApiService provides a set of RPC methods for generating text embeddings
    using different underlying models.  It acts as a unified interface for
    accessing various embedding services.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.EmbedNVEmbedV2 = channel.unary_unary(
                '/viuapi.ApiService/EmbedNVEmbedV2',
                request_serializer=viu__api__pb2.EmbedNVEmbedV2Request.SerializeToString,
                response_deserializer=viu__api__pb2.EmbedNVEmbedV2Response.FromString,
                _registered_method=True)
        self.EmbedBGEGemma2 = channel.unary_unary(
                '/viuapi.ApiService/EmbedBGEGemma2',
                request_serializer=viu__api__pb2.EmbedBGEGemma2Request.SerializeToString,
                response_deserializer=viu__api__pb2.EmbedBGEGemma2Response.FromString,
                _registered_method=True)
        self.EmbedJinaEmbeddingsV3 = channel.unary_unary(
                '/viuapi.ApiService/EmbedJinaEmbeddingsV3',
                request_serializer=viu__api__pb2.JinaEmbedRequest.SerializeToString,
                response_deserializer=viu__api__pb2.JinaEmbedReply.FromString,
                _registered_method=True)


class ApiServiceServicer(object):
    """ApiService provides a set of RPC methods for generating text embeddings
    using different underlying models.  It acts as a unified interface for
    accessing various embedding services.
    """

    def EmbedNVEmbedV2(self, request, context):
        """Embeds a single text string using the NVEmbedV2 model.

        Args:
        request: An EmbedNVEmbedV2Request containing the text to embed.

        Returns:
        An EmbedNVEmbedV2Response containing the generated embedding.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EmbedBGEGemma2(self, request, context):
        """Embeds a single text string using the BGEGemma2 model.

        Args:
        request: An EmbedBGEGemma2Request containing the text.

        Returns:
        An EmbedBGEGemma2Response with the embedding.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EmbedJinaEmbeddingsV3(self, request, context):
        """Embeds multiple text strings using the JinaEmbeddingsV3 model.
        This method supports batch processing of text inputs.

        Args:
        request: A JinaEmbedRequest containing the texts and task type.

        Returns:
        A JinaEmbedReply containing the embeddings for each input text.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ApiServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'EmbedNVEmbedV2': grpc.unary_unary_rpc_method_handler(
                    servicer.EmbedNVEmbedV2,
                    request_deserializer=viu__api__pb2.EmbedNVEmbedV2Request.FromString,
                    response_serializer=viu__api__pb2.EmbedNVEmbedV2Response.SerializeToString,
            ),
            'EmbedBGEGemma2': grpc.unary_unary_rpc_method_handler(
                    servicer.EmbedBGEGemma2,
                    request_deserializer=viu__api__pb2.EmbedBGEGemma2Request.FromString,
                    response_serializer=viu__api__pb2.EmbedBGEGemma2Response.SerializeToString,
            ),
            'EmbedJinaEmbeddingsV3': grpc.unary_unary_rpc_method_handler(
                    servicer.EmbedJinaEmbeddingsV3,
                    request_deserializer=viu__api__pb2.JinaEmbedRequest.FromString,
                    response_serializer=viu__api__pb2.JinaEmbedReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'viuapi.ApiService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('viuapi.ApiService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ApiService(object):
    """ApiService provides a set of RPC methods for generating text embeddings
    using different underlying models.  It acts as a unified interface for
    accessing various embedding services.
    """

    @staticmethod
    def EmbedNVEmbedV2(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/viuapi.ApiService/EmbedNVEmbedV2',
            viu__api__pb2.EmbedNVEmbedV2Request.SerializeToString,
            viu__api__pb2.EmbedNVEmbedV2Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def EmbedBGEGemma2(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/viuapi.ApiService/EmbedBGEGemma2',
            viu__api__pb2.EmbedBGEGemma2Request.SerializeToString,
            viu__api__pb2.EmbedBGEGemma2Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def EmbedJinaEmbeddingsV3(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/viuapi.ApiService/EmbedJinaEmbeddingsV3',
            viu__api__pb2.JinaEmbedRequest.SerializeToString,
            viu__api__pb2.JinaEmbedReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
