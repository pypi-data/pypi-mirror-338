"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from atoma_sdk.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
from pydantic import model_serializer
from typing import Any, List, Optional
from typing_extensions import NotRequired, TypedDict


class ChatCompletionChunkDeltaTypedDict(TypedDict):
    content: NotRequired[Nullable[str]]
    r"""The content of the message, if present in this chunk."""
    function_call: NotRequired[Any]
    r"""The function call information, if present in this chunk."""
    role: NotRequired[Nullable[str]]
    r"""The role of the message author, if present in this chunk."""
    tool_calls: NotRequired[Nullable[List[Any]]]
    r"""The tool calls information, if present in this chunk."""


class ChatCompletionChunkDelta(BaseModel):
    content: OptionalNullable[str] = UNSET
    r"""The content of the message, if present in this chunk."""

    function_call: Optional[Any] = None
    r"""The function call information, if present in this chunk."""

    role: OptionalNullable[str] = UNSET
    r"""The role of the message author, if present in this chunk."""

    tool_calls: OptionalNullable[List[Any]] = UNSET
    r"""The tool calls information, if present in this chunk."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["content", "function_call", "role", "tool_calls"]
        nullable_fields = ["content", "role", "tool_calls"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
