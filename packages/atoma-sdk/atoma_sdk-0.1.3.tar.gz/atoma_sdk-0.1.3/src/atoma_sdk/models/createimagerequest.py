"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from atoma_sdk.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
from pydantic import model_serializer
from typing_extensions import NotRequired, TypedDict


class CreateImageRequestTypedDict(TypedDict):
    r"""Request body for image generation"""

    model: str
    r"""The model to use for image generation."""
    prompt: str
    r"""A text description of the desired image(s). The maximum length is 1000 characters."""
    n: NotRequired[Nullable[int]]
    r"""The number of images to generate. Defaults to 1."""
    quality: NotRequired[Nullable[str]]
    r"""The quality of the image that will be generated.
    `hd` creates images with finer details and greater consistency across the image.
    """
    response_format: NotRequired[Nullable[str]]
    r"""The format in which the generated images are returned."""
    size: NotRequired[Nullable[str]]
    r"""The size of the generated images."""
    style: NotRequired[Nullable[str]]
    r"""The style of the generated images."""
    user: NotRequired[Nullable[str]]
    r"""A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse."""


class CreateImageRequest(BaseModel):
    r"""Request body for image generation"""

    model: str
    r"""The model to use for image generation."""

    prompt: str
    r"""A text description of the desired image(s). The maximum length is 1000 characters."""

    n: OptionalNullable[int] = UNSET
    r"""The number of images to generate. Defaults to 1."""

    quality: OptionalNullable[str] = UNSET
    r"""The quality of the image that will be generated.
    `hd` creates images with finer details and greater consistency across the image.
    """

    response_format: OptionalNullable[str] = UNSET
    r"""The format in which the generated images are returned."""

    size: OptionalNullable[str] = UNSET
    r"""The size of the generated images."""

    style: OptionalNullable[str] = UNSET
    r"""The style of the generated images."""

    user: OptionalNullable[str] = UNSET
    r"""A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["n", "quality", "response_format", "size", "style", "user"]
        nullable_fields = ["n", "quality", "response_format", "size", "style", "user"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
