"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .chatcompletionchoice import ChatCompletionChoice, ChatCompletionChoiceTypedDict
from .completionusage import CompletionUsage, CompletionUsageTypedDict
from atoma_sdk.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
from pydantic import model_serializer
from typing import List
from typing_extensions import NotRequired, TypedDict


class ChatCompletionResponseTypedDict(TypedDict):
    choices: List[ChatCompletionChoiceTypedDict]
    r"""A list of chat completion choices."""
    created: int
    r"""The Unix timestamp (in seconds) of when the chat completion was created."""
    id: str
    r"""A unique identifier for the chat completion."""
    model: str
    r"""The model used for the chat completion."""
    system_fingerprint: NotRequired[Nullable[str]]
    r"""The system fingerprint for the completion, if applicable."""
    usage: NotRequired[Nullable[CompletionUsageTypedDict]]
    r"""The usage information for the chat completion."""
    service_tier: NotRequired[Nullable[str]]
    r"""The service tier for the chat completion."""
    object: NotRequired[Nullable[str]]
    r"""The object type for the chat completion."""


class ChatCompletionResponse(BaseModel):
    choices: List[ChatCompletionChoice]
    r"""A list of chat completion choices."""

    created: int
    r"""The Unix timestamp (in seconds) of when the chat completion was created."""

    id: str
    r"""A unique identifier for the chat completion."""

    model: str
    r"""The model used for the chat completion."""

    system_fingerprint: OptionalNullable[str] = UNSET
    r"""The system fingerprint for the completion, if applicable."""

    usage: OptionalNullable[CompletionUsage] = UNSET
    r"""The usage information for the chat completion."""

    service_tier: OptionalNullable[str] = UNSET
    r"""The service tier for the chat completion."""

    object: OptionalNullable[str] = UNSET
    r"""The object type for the chat completion."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["system_fingerprint", "usage"]
        nullable_fields = ["system_fingerprint", "usage"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
