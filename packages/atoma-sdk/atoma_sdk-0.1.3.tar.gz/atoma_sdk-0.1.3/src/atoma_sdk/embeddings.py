"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from .basesdk import BaseSDK
from atoma_sdk import models, utils
from atoma_sdk._hooks import HookContext
from atoma_sdk.types import OptionalNullable, UNSET
from atoma_sdk.utils import get_security_from_env
from typing import Mapping, Optional, Union


class Embeddings(BaseSDK):
    r"""OpenAI's API embeddings v1 endpoint"""

    def create(
        self,
        *,
        input_: Union[models.EmbeddingInput, models.EmbeddingInputTypedDict],
        model: str,
        dimensions: OptionalNullable[int] = UNSET,
        encoding_format: OptionalNullable[str] = UNSET,
        user: OptionalNullable[str] = UNSET,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.CreateEmbeddingResponse:
        r"""Create embeddings

        This endpoint follows the OpenAI API format for generating vector embeddings from input text.
        The handler receives pre-processed metadata from middleware and forwards the request to
        the selected node.

        # Returns
        * `Ok(Response)` - The embeddings response from the processing node
        * `Err(AtomaProxyError)` - An error status code if any step fails

        ## Errors
        * `INTERNAL_SERVER_ERROR` - Processing or node communication failures

        :param input:
        :param model: ID of the model to use.
        :param dimensions: The number of dimensions the resulting output embeddings should have.
        :param encoding_format: The format to return the embeddings in. Can be \"float\" or \"base64\". Defaults to \"float\"
        :param user: A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.CreateEmbeddingRequest(
            dimensions=dimensions,
            encoding_format=encoding_format,
            input=input_,
            model=model,
            user=user,
        )

        req = self._build_request(
            method="POST",
            path="/v1/embeddings",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request, False, False, "json", models.CreateEmbeddingRequest
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                operation_id="embeddings_create",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["400", "401", "4XX", "500", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(http_res.text, models.CreateEmbeddingResponse)
        if utils.match_response(http_res, ["400", "401", "4XX", "500", "5XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = utils.stream_to_text(http_res)
        raise models.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    async def create_async(
        self,
        *,
        input_: Union[models.EmbeddingInput, models.EmbeddingInputTypedDict],
        model: str,
        dimensions: OptionalNullable[int] = UNSET,
        encoding_format: OptionalNullable[str] = UNSET,
        user: OptionalNullable[str] = UNSET,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.CreateEmbeddingResponse:
        r"""Create embeddings

        This endpoint follows the OpenAI API format for generating vector embeddings from input text.
        The handler receives pre-processed metadata from middleware and forwards the request to
        the selected node.

        # Returns
        * `Ok(Response)` - The embeddings response from the processing node
        * `Err(AtomaProxyError)` - An error status code if any step fails

        ## Errors
        * `INTERNAL_SERVER_ERROR` - Processing or node communication failures

        :param input:
        :param model: ID of the model to use.
        :param dimensions: The number of dimensions the resulting output embeddings should have.
        :param encoding_format: The format to return the embeddings in. Can be \"float\" or \"base64\". Defaults to \"float\"
        :param user: A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        request = models.CreateEmbeddingRequest(
            dimensions=dimensions,
            encoding_format=encoding_format,
            input=input_,
            model=model,
            user=user,
        )

        req = self._build_request_async(
            method="POST",
            path="/v1/embeddings",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request, False, False, "json", models.CreateEmbeddingRequest
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                operation_id="embeddings_create",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["400", "401", "4XX", "500", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(http_res.text, models.CreateEmbeddingResponse)
        if utils.match_response(http_res, ["400", "401", "4XX", "500", "5XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = await utils.stream_to_text_async(http_res)
        raise models.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )
