"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from atoma_sdk.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
from pydantic import model_serializer
from typing import Any, Optional
from typing_extensions import NotRequired, TypedDict


class UsageTypedDict(TypedDict):
    r"""Represents usage statistics for a confidential compute request"""

    prompt_tokens: int
    r"""Number of compute units used"""
    total_tokens: int
    r"""Number of compute units used"""
    completion_tokens: NotRequired[Nullable[int]]
    r"""Number of compute units used
    NOTE: This is not used for the embeddings endpoint
    """
    completion_tokens_details: NotRequired[Any]
    r"""Details about the completion tokens"""


class Usage(BaseModel):
    r"""Represents usage statistics for a confidential compute request"""

    prompt_tokens: int
    r"""Number of compute units used"""

    total_tokens: int
    r"""Number of compute units used"""

    completion_tokens: OptionalNullable[int] = UNSET
    r"""Number of compute units used
    NOTE: This is not used for the embeddings endpoint
    """

    completion_tokens_details: Optional[Any] = None
    r"""Details about the completion tokens"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["completion_tokens", "completion_tokens_details"]
        nullable_fields = ["completion_tokens"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
