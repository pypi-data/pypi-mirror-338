"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .embeddinginput import EmbeddingInput, EmbeddingInputTypedDict
from atoma_sdk.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
from pydantic import model_serializer
from typing_extensions import NotRequired, TypedDict


class CreateEmbeddingRequestTypedDict(TypedDict):
    r"""Request object for creating embeddings"""

    input: EmbeddingInputTypedDict
    model: str
    r"""ID of the model to use."""
    dimensions: NotRequired[Nullable[int]]
    r"""The number of dimensions the resulting output embeddings should have."""
    encoding_format: NotRequired[Nullable[str]]
    r"""The format to return the embeddings in. Can be \"float\" or \"base64\".
    Defaults to \"float\" 
    """
    user: NotRequired[Nullable[str]]
    r"""A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse."""


class CreateEmbeddingRequest(BaseModel):
    r"""Request object for creating embeddings"""

    input: EmbeddingInput

    model: str
    r"""ID of the model to use."""

    dimensions: OptionalNullable[int] = UNSET
    r"""The number of dimensions the resulting output embeddings should have."""

    encoding_format: OptionalNullable[str] = UNSET
    r"""The format to return the embeddings in. Can be \"float\" or \"base64\".
    Defaults to \"float\" 
    """

    user: OptionalNullable[str] = UNSET
    r"""A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["dimensions", "encoding_format", "user"]
        nullable_fields = ["dimensions", "encoding_format", "user"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
