import os
from configparser import ConfigParser

# get user inputs
USER_SETTINGS_FILE = "user_settings.ini"
parser = ConfigParser()
parser.read(USER_SETTINGS_FILE)

# main switchers
PRODUCTION = True
VERSION = "0.0.2"
LOG_TO_FILE = False

# script info
LANGUAGE = "CZE"  # ENG or CZE
DEV_SCRIPT_ID = "COMPANY_PY_1"
CLIENT_SCRIPT_ID = parser.get("GENERAL", "SCRIPT_ID")
CLIENT_SCRIPT_NAME = parser.get("GENERAL", "SCRIPT_NAME")
MAIN_FILE = "main.py"

# file paths
README_FILE = "README.md"
LICENSE_FILE = "LICENSE"
ICON_FILE = "icon.ico"

# dev info
DEV_COMPANY = parser.get("DEV_INFO", "COMPANY")
DEV_NAME = parser.get("DEV_INFO", "NAME")
DEV_EMAIL = parser.get("DEV_INFO", "EMAIL")
DEV_PHONE = parser.get("DEV_INFO", "PHONE")

# client info
CLIENT_COMPANY_NAME = parser.get("CLIENT_INFO", "COMPANY_NAME")
CLIENT_CONTACT_PERSON = parser.get("CLIENT_INFO", "CONTACT_PERSON")
CLIENT_CONTACT_EMAIL = parser.get("CLIENT_INFO", "CONTACT_EMAIL")
CLIENT_CONTACT_PHONE = parser.get("CLIENT_INFO", "CONTACT_PHONE")

# logging
LOG_TO_CONSOLE = True
LOG_LEVEL = "INFO"
LOGGER_FOLDER_PATH = os.path.join(os.getcwd(), "logs")
LOGGER_FILE_TIMESTAMP_FORMAT = "%Y_%m_%d_%H%M"
LOGGER_DELETE_OLD_LOGS = True
LOGGER_DELETE_OLD_LOGS_DAYS = 180

# error
ERROR_EMAILS_ALLOWED_GENERAL = True
ERROR_WAIT_FOR_USER = (
    parser.getboolean("ERROR_BEHAVIOUR", "WAIT_FOR_USER") if PRODUCTION else False
)

ERROR_SEND_EMAIL_TO_DEVELOPER = (
    parser.getboolean("ERROR_BEHAVIOUR", "SEND_EMAIL_TO_DEVELOPER")
    if PRODUCTION and ERROR_EMAILS_ALLOWED_GENERAL
    else False
)
LOGGER_FINAL_VARIABLES_COLLECTION_FILES = [
    "app_constants.py",
    "app_settings.py",
    USER_SETTINGS_FILE,
]
LOGGER_ERROR_EMAIL_DEV_HIDE_PWD = True

LOGGER_ERROR_EMAIL_DEV_FROM = "no-reply.adrozda.dev@email.cz"
LOGGER_ERROR_EMAIL_DEV_FROM_PWD = "n%LC6R^09HKo"
LOGGER_ERROR_EMAIL_DEV_SERVER = "smtp.seznam.cz"
LOGGER_ERROR_EMAIL_DEV_PORT = 465
LOGGER_ERROR_EMAIL_TO_DEV_EMAIL = "adrozda.dev@gmail.com"

ERROR_SEND_EMAIL_TO_CLIENT = (
    parser.getboolean("ERROR_BEHAVIOUR", "SEND_EMAIL_TO_CLIENT")
    if PRODUCTION and ERROR_EMAILS_ALLOWED_GENERAL
    else False
)
LOGGER_ERROR_EMAIL_ADD_LOG_TO_CLIENT = True

LOGGER_ERROR_EMAIL_CLIENT_FROM = "no-reply.adrozda.dev@email.cz"
LOGGER_ERROR_EMAIL_CLIENT_FROM_PWD = "n%LC6R^09HKo"
LOGGER_ERROR_EMAIL_CLIENT_SERVER = "smtp.seznam.cz"
LOGGER_ERROR_EMAIL_CLIENT_PORT = 465

LOGGER_ERROR_EMAIL_CLIENT_TO = parser.get("ERROR_BEHAVIOUR", "EMAILS_TO")
LOGGER_ERROR_EMAIL_CLIENT_TO_CC = parser.get("ERROR_BEHAVIOUR", "EMAILS_TO_CC")
LOGGER_ERROR_EMAIL_CLIENT_TO_BCC = parser.get("ERROR_BEHAVIOUR", "EMAILS_TO_BCC")

if ERROR_SEND_EMAIL_TO_DEVELOPER and LOGGER_ERROR_EMAIL_CLIENT_TO_CC:
    LOGGER_ERROR_EMAIL_CLIENT_TO_CC = (
        LOGGER_ERROR_EMAIL_CLIENT_TO_CC + ", " + LOGGER_ERROR_EMAIL_TO_DEV_EMAIL
    )
elif ERROR_SEND_EMAIL_TO_DEVELOPER and not LOGGER_ERROR_EMAIL_CLIENT_TO_CC:
    LOGGER_ERROR_EMAIL_CLIENT_TO_CC = LOGGER_ERROR_EMAIL_TO_DEV_EMAIL

# success
SUCCESS_EMAILS_ALLOWED_GENERAL = True
SUCCESS_WAIT_FOR_USER = (
    parser.getboolean("SUCCESS_BEHAVIOUR", "WAIT_FOR_USER") if PRODUCTION else True
)
SUCCESS_SEND_EMAIL_TO_DEVELOPER = (
    parser.getboolean("SUCCESS_BEHAVIOUR", "SEND_EMAIL_TO_DEVELOPER")
    if PRODUCTION and SUCCESS_EMAILS_ALLOWED_GENERAL
    else False
)
SUCCESS_SEND_EMAIL_TO_CLIENT = (
    parser.getboolean("SUCCESS_BEHAVIOUR", "SEND_EMAIL_TO_CLIENT")
    if PRODUCTION and SUCCESS_EMAILS_ALLOWED_GENERAL
    else False
)

SUCCESS_EMAIL_FROM = "no-reply.adrozda.dev@email.cz"
SUCCESS_EMAIL_FROM_PWD = "n%LC6R^09HKo"
SUCCESS_EMAIL_SERVER = "smtp.seznam.cz"
SUCCESS_EMAIL_PORT = 465
SUCCESS_EMAIL_TO_DEV_EMAIL = "adrozda.dev@gmail.com"
SUCCESS_EMAIL_CLIENT_TO = parser.get("SUCCESS_BEHAVIOUR", "EMAILS_TO")
SUCCESS_EMAIL_CLIENT_TO_CC = parser.get("SUCCESS_BEHAVIOUR", "EMAILS_TO_CC")
SUCCESS_EMAIL_CLIENT_TO_BCC = parser.get("SUCCESS_BEHAVIOUR", "EMAILS_TO_BCC")

# pyinstaller
PYINSTALLER_VERSION = VERSION
ICON = "icon.ico"
APP_WITH_GUI = False
FILES_TO_ADD = [USER_SETTINGS_FILE, README_FILE, LICENSE_FILE]
FOLDERS_TO_ADD = []
VERSION_FOLDER = "_builds"


# OTHER SCIRPT VARIABLES
