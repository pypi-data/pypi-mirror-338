import archigeo.basic.geomutils as geo
from _typeshed import Incomplete

path: Incomplete

class RHPlaneSpace(geo.Space3d):
    rhplane: Incomplete
    def __init__(self, basept=[0, 0, 0], x_dir=[1, 0, 0], y_dir_maybe=[0, 1, 0], scale: int = 1) -> None: ...
    @classmethod
    def from_space3d(cls, space3d): ...
    @classmethod
    def from_dict(cls, dict): ...
    def update(self) -> None: ...
    def xform(self): ...
    def inverse_xform(self): ...
    def xform_to(self, rhplanespace2): ...
    def draw_selfplanarsrf(self, w: int = 800, h: int = 600): ...
    def draw_pt(self, pt): ...
    def draw_lineseg(self, lineseg): ...
    def draw_poly(self, pts): ...
    def draw_circle(self, cir) -> None: ...
    def draw_arc(self, arc, draw_cen: bool = False): ...
    def draw_arcseries(self, arcseries, join): ...

def draw_pt(pt, basept=[0, 0]): ...
def draw_line(pt1, pt2, basept=[0, 0]) -> None: ...
def draw_poly(pts, basept=[0, 0], close: bool = True): ...
def draw_vts(vts, basept=[0, 0]) -> None: ...
def draw_edge(edge, basept=[0, 0], angle: int = 0): ...
def draw_edges(edges, basept=[0, 0], angle: int = 0): ...
def draw_edges_join(edges, basept=[0, 0], angle: int = 0) -> None: ...
def draw_vesys(vesys) -> None: ...
def bake_box(basept, dimensions, angle: int = 0): ...

class RHPerspective(geo.Perspective):
    rhplane: Incomplete
    def __init__(self, viewpt, plane_expr) -> None: ...
    def crv_perspective(self, crvid) -> None: ...

def setbasept(): ...
def get_pts(): ...
def get_pts_2d(): ...
def ptid2pt(ptid): ...
def arran_basept(basept0, i: int = 0, j: int = 0, w: int = 250, h: int = 250, wd: int = 25, hd: int = 25): ...
def get_plane() -> None: ...
def print_pts() -> None: ...
def draw_cell(basept, w: int = 250, h: int = 250, s: str = '_grid'): ...
def draw_border(basept, pts, s: str = '_border'): ...
def draw_scheme_bim(vss, basept) -> None: ...
def bake_strip(strip, h_unit, basept) -> None: ...
def bake_bv(basept, bv) -> None: ...
def draw_convexs(convexs) -> None: ...
def draw_x(pt, angle, d: int = 3) -> None: ...
def draw_field(basept, field, bake_rate: int = 1, onlyin: bool = True) -> None: ...
