# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['HelloComponentArgs', 'HelloComponent']

@pulumi.input_type
class HelloComponentArgs:
    def __init__(__self__, *,
                 count: builtins.int,
                 loud: Optional[builtins.bool] = None):
        """
        The set of arguments for constructing a HelloComponent resource.
        """
        pulumi.set(__self__, "count", count)
        if loud is not None:
            pulumi.set(__self__, "loud", loud)

    @property
    @pulumi.getter
    def count(self) -> builtins.int:
        return pulumi.get(self, "count")

    @count.setter
    def count(self, value: builtins.int):
        pulumi.set(self, "count", value)

    @property
    @pulumi.getter
    def loud(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "loud")

    @loud.setter
    def loud(self, value: Optional[builtins.bool]):
        pulumi.set(self, "loud", value)


class HelloComponent(pulumi.ComponentResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 count: Optional[builtins.int] = None,
                 loud: Optional[builtins.bool] = None,
                 __props__=None):
        """
        Create a HelloComponent resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: HelloComponentArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a HelloComponent resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param HelloComponentArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(HelloComponentArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 count: Optional[builtins.int] = None,
                 loud: Optional[builtins.bool] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is not None:
            raise ValueError('ComponentResource classes do not support opts.id')
        else:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = HelloComponentArgs.__new__(HelloComponentArgs)

            if count is None and not opts.urn:
                raise TypeError("Missing required property 'count'")
            __props__.__dict__["count"] = count
            __props__.__dict__["loud"] = loud
            __props__.__dict__["greetings"] = None
            __props__.__dict__["names"] = None
        super(HelloComponent, __self__).__init__(
            'hackweek:index:HelloComponent',
            resource_name,
            __props__,
            opts,
            remote=True)

    @property
    @pulumi.getter(name="Greetings")
    def greetings(self) -> pulumi.Output[Sequence[builtins.str]]:
        return pulumi.get(self, "greetings")

    @property
    @pulumi.getter(name="Names")
    def names(self) -> pulumi.Output[Sequence[builtins.str]]:
        return pulumi.get(self, "names")

    @property
    @pulumi.getter
    def count(self) -> pulumi.Output[builtins.int]:
        return pulumi.get(self, "count")

    @property
    @pulumi.getter
    def loud(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "loud")

