---
- case: positional_only
  main: |
    def func(a: int, /, b: str = "default") -> None: ...
    func(1)

- case: positional
  main: |
    def func(a: int) -> None: ...
    func(1)
  out: |
    main:2: error: Too many positional arguments for "func"  [misc]

- case: positional_optional
  main: |
    def func(a: int = 1) -> None: ...
    func(1)
    func()
  out: |
    main:2: error: Too many positional arguments for "func"  [misc]

- case: keyword_only
  main: |
    def func(*, a: int) -> None: ...
    func(a=1)

- case: keyword_only_optional
  main: |
    def func(*, a: int = 1) -> None: ...
    func(a=1)
    func()

- case: var_positional
  main: |
    def func(*args: str) -> None: ...
    func("extra")

- case: var_keyword
  main: |
    def func(**kwargs: str) -> None: ...
    func(a="extra")

- case: positional_followed_by_var_positional
  main: |
    def func(a: int, *args: str) -> None: ...
    func(1)

- case: positional_optional_followed_by_var_positional
  main: |
    def func(a: int = 1, *args: str) -> None: ...
    func(1)
    func()

- case: positional_followed_by_var_keyword
  main: |
    def func(a: int, **kwargs: str) -> None: ...
    func(1)
  out: |
    main:2: error: Too many positional arguments for "func"  [misc]

- case: var_positional_followed_by_keyword
  main: |
    def func(*args: str, a: int) -> None: ...
    func("a", a=1)

- case: method
  main: |-
    class C:
        def __init__(self) -> None: ...

        def method(self, a: int) -> None: ...

    c = C()
    c.method(1)
  out: |-
    main:7: error: Too many positional arguments for "method" of "C"  [misc]

- case: callable_class_as_decorator
  main: |-
    from typing import Any

    class C:
        def __call__(self, func: Any) -> None: ...

    @C()
    def func() -> None: ...

- case: callable_class_extra_params
  main: |-
    from typing import Any

    class C:
        def __call__(self, func: Any, a: int) -> None: ...

    c = C()
    c(lambda: None, 1)
    c(func=lambda: None, a=1)
    c(lambda: None, a=1)
  out: |-
    main:7: error: Too many positional arguments for "__call__" of "C"  [misc]

- case: descriptor
  main: |-
    class D:
      def __get__(self, o: object, ot: type | None = None) -> None:
          return

      def __set__(self, o: object, v: int) -> None:
          return

    class C:
        a = D()

    c = C()
    c.a
    c.a = 1

- case: ignore_name
  files:
    - path: pyproject.toml
      content: |
        [tool.mypy]
        plugins = ["mypy_strict_kwargs"]

        [tool.mypy_strict_kwargs]
        ignore_names = ["main.func", "builtins.str"]
  main: |-
    def func(a: int) -> None: ...
    func(1)

    def not_ignored(a: int) -> None: ...
    not_ignored(1)

    str(1)
  out: |-
    main:5: error: Too many positional arguments for "not_ignored"  [misc]

# This does not actually test the debug option, but it gives
# us coverage at least.
- case: debug
  files:
    - path: pyproject.toml
      content: |
        [tool.mypy]
        plugins = ["mypy_strict_kwargs"]

        [tool.mypy_strict_kwargs]
        ignore_names = ["main.func", "builtins.str"]
        debug = true
  main: |-
    def func(a: int) -> None: ...
    func(1)

    def not_ignored(a: int) -> None: ...
    not_ignored(1)

    str(1)
  out: |-
    main:5: error: Too many positional arguments for "not_ignored"  [misc]
