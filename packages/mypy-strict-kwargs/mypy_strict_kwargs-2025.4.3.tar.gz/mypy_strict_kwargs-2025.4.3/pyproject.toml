[build-system]
build-backend = "setuptools.build_meta"
requires = [
    "setuptools",
    "setuptools-scm>=8.1.0",
    "wheel",
]

[project]
name = "mypy-strict-kwargs"
description = "Enforce using keyword arguments where possible."
readme = { file = "README.rst", content-type = "text/x-rst" }
keywords = [
    "mypy",
]
license = { file = "LICENSE" }
authors = [
    { name = "Adam Dangoor", email = "adamdangoor@gmail.com" },
]
requires-python = ">=3.10"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Web Environment",
    "License :: OSI Approved :: MIT License",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: POSIX",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]
dynamic = [
    "version",
]
dependencies = [
    "mypy>=1.13.0",
    # We can switch to tomllib from the standard library in Python 3.11+.
    # Working with conditional imports in Python 3.11+ is too difficult.
    "tomli>=1.2.2",
]
optional-dependencies.dev = [
    "actionlint-py==1.7.7.23",
    "check-manifest==0.50",
    "deptry==0.23.0",
    "doc8==1.1.2",
    "doccmd==2025.2.18",
    "docformatter==1.7.5",
    "interrogate==1.7.0",
    "mypy[faster-cache]==1.15.0",
    "pre-commit==4.2.0",
    "pyenchant==3.3.0rc1",
    "pylint==3.3.6",
    "pylint-per-file-ignores==1.4.0",
    "pyproject-fmt==2.5.1",
    "pyright==1.1.398",
    "pyroma==4.2",
    "pytest==8.3.5",
    "pytest-cov==6.1.0",
    "pytest-mypy-plugins==3.2.0",
    "pyyaml==6.0.2",
    "ruff==0.11.3",
    # We add shellcheck-py not only for shell scripts and shell code blocks,
    # but also because having it installed means that ``actionlint-py`` will
    # use it to lint shell commands in GitHub workflow files.
    "shellcheck-py==0.10.0.1",
    "shfmt-py==3.11.0.2",
    "sphinx-lint==1.0.0",
    "tomli==2.2.1",
    "vulture==2.14",
    "yamlfix==1.17.0",
]
optional-dependencies.release = [ "check-wheel-contents==0.6.1" ]
urls.Documentation = "https://mypy-strict-kwargs.readthedocs.io/en/latest/"
urls.Source = "https://github.com/adamtheturtle/mypy-strict-kwargs"

entry-points."mypy.plugins".mypy_strict_kwargs = "mypy_strict_kwargs.plugin:plugin"

[tool.setuptools]
zip-safe = false

[tool.setuptools.packages.find]
where = [
    "src",
]

[tool.setuptools.package-data]
mypy_strict_kwargs = [
    "py.typed",
]

[tool.distutils.bdist_wheel]
universal = true

[tool.setuptools_scm]

# This keeps the start of the version the same as the last release.
# This is useful for our documentation to include e.g. binary links
# to the latest released binary.
#
# Code to match this is in ``conf.py``.
version_scheme = "post-release"

[tool.ruff]
line-length = 79

lint.select = [
    "ALL",
]
lint.ignore = [
    # Ruff warns that this conflicts with the formatter.
    "COM812",
    # Allow our chosen docstring line-style - no one-line summary.
    "D200",
    "D205",
    "D212",
    # Ruff warns that this conflicts with the formatter.
    "ISC001",
    # Ignore "too-many-*" errors as they seem to get in the way more than
    # helping.
    "PLR0913",
]

# Do not automatically remove commented out code.
# We comment out code during development, and with VSCode auto-save, this code
# is sometimes annoyingly removed.
lint.unfixable = [
    "ERA001",
]
lint.pydocstyle.convention = "google"

[tool.pylint]

[tool.pylint.'MASTER']

# Pickle collected data for later comparisons.
persistent = true

# Use multiple processes to speed up Pylint.
jobs = 0

# List of plugins (as comma separated values of python modules names) to load,
# usually to register additional checkers.
# See https://chezsoi.org/lucas/blog/pylint-strict-base-configuration.html.
# and we also add `pylint_per_file_ignores` to allow per-file ignores.
# We do not use the plugins:
# - pylint.extensions.code_style
# - pylint.extensions.magic_value
# - pylint.extensions.while_used
# as they seemed to get in the way.
load-plugins = [
    "pylint_per_file_ignores",
    'pylint.extensions.bad_builtin',
    'pylint.extensions.comparison_placement',
    'pylint.extensions.consider_refactoring_into_while_condition',
    'pylint.extensions.docparams',
    'pylint.extensions.dunder',
    'pylint.extensions.eq_without_hash',
    'pylint.extensions.for_any_all',
    'pylint.extensions.mccabe',
    'pylint.extensions.no_self_use',
    'pylint.extensions.overlapping_exceptions',
    'pylint.extensions.private_import',
    'pylint.extensions.redefined_loop_name',
    'pylint.extensions.redefined_variable_type',
    'pylint.extensions.set_membership',
    'pylint.extensions.typing',
]

# Allow loading of arbitrary C extensions. Extensions are imported into the
# active Python interpreter and may run arbitrary code.
unsafe-load-any-extension = false
extension-pkg-allow-list = [
    "mypy",
]

[tool.pylint.'MESSAGES CONTROL']

# Enable the message, report, category or checker with the given id(s). You can
# either give multiple identifier separated by comma (,) or put this option
# multiple time (only on the command line, not in the configuration file where
# it should appear only once). See also the "--disable" option for examples.
enable = [
    'bad-inline-option',
    'deprecated-pragma',
    'file-ignored',
    'spelling',
    'use-symbolic-message-instead',
    'useless-suppression',
]

# Disable the message, report, category or checker with the given id(s). You
# can either give multiple identifiers separated by comma (,) or put this
# option multiple times (only on the command line, not in the configuration
# file where it should appear only once).You can also use "--disable=all" to
# disable everything first and then reenable specific checks. For example, if
# you want to run only the similarities checker, you can use "--disable=all
# --enable=similarities". If you want to run only the classes checker, but have
# no Warning level messages displayed, use"--disable=all --enable=classes
# --disable=W"

disable = [
    'too-few-public-methods',
    'too-many-locals',
    'too-many-arguments',
    'too-many-instance-attributes',
    'too-many-return-statements',
    'too-many-lines',
    'locally-disabled',
    # Let ruff handle long lines
    'line-too-long',
    # Let ruff handle unused imports
    'unused-import',
    # Let ruff deal with sorting
    'ungrouped-imports',
    # We don't need everything to be documented because of mypy
    'missing-type-doc',
    'missing-return-type-doc',
    # Too difficult to please
    'duplicate-code',
    # Let ruff handle imports
    'wrong-import-order',
    # mypy does not want untyped parameters.
    'useless-type-doc',
]

# We ignore invalid names because:
# - We want to use generated module names, which may not be valid, but are never seen.
per-file-ignores = [
    "doccmd_README_rst.*.py:invalid-name",
]

[tool.pylint.'FORMAT']

# Allow the body of an if to be on the same line as the test if there is no
# else.
single-line-if-stmt = false

[tool.pylint.'SPELLING']

# Spelling dictionary name. Available dictionaries: none. To make it working
# install python-enchant package.
spelling-dict = 'en_US'

# A path to a file that contains private dictionary; one word per line.
spelling-private-dict-file = 'spelling_private_dict.txt'

# Tells whether to store unknown words to indicated private dictionary in
# --spelling-private-dict-file option instead of raising a message.
spelling-store-unknown-words = 'no'

[tool.docformatter]
make-summary-multi-line = true

[tool.check-manifest]

ignore = [
    ".checkmake-config.ini",
    ".vscode/*",
    ".yamlfmt",
    "*.enc",
    ".pre-commit-config.yaml",
    "readthedocs.yaml",
    "CHANGELOG.rst",
    "CODE_OF_CONDUCT.rst",
    "CONTRIBUTING.rst",
    "LICENSE",
    "Makefile",
    "ci",
    "ci/**",
    "codecov.yaml",
    "docs",
    "docs/**",
    ".git_archival.txt",
    "spelling_private_dict.txt",
    "tests",
    "tests-pylintrc",
    "tests/**",
    "lint.mk",
]

[tool.deptry]
pep621_dev_dependency_groups = [
    "dev",
    "release",
]

[tool.pyproject-fmt]
indent = 4
keep_full_version = true
max_supported_python = "3.13"

[tool.pytest.ini_options]

xfail_strict = true
log_cli = true
# * Use this pyproject.toml file for mypy configuration of tests.
#   * --mypy-pyproject-toml-file=pyproject.toml
#
# Do not test unrelated stubs:
# https://github.com/typeddjango/pytest-mypy-plugins/issues/134
#  * --mypy-only-local-stub
#
# Use the same process so that we can get coverage.
#  * --mypy-same-process
#  * The help documentation says that this "will create problems with import cache"
addopts = "--mypy-pyproject-toml-file=pyproject.toml --mypy-only-local-stub --mypy-same-process"

[tool.coverage.run]

branch = true

[tool.coverage.report]
exclude_also = [
    "if TYPE_CHECKING:",
]

[tool.mypy]

strict = true
files = [ "." ]
exclude = [ "build" ]
plugins = [
    "mypy_strict_kwargs",
    # See
    # https://mypy.readthedocs.io/en/latest/extending_mypy.html#useful-tools.
    "mypy.plugins.proper_plugin",
]
follow_untyped_imports = true

[tool.pyright]

reportUnnecessaryTypeIgnoreComment = true
enableTypeIgnoreComments = false
typeCheckingMode = "strict"
# See
# https://github.com/microsoft/pyright/issues/9617#issuecomment-2558167677.
# This defines as a constant a variable in the ``mypy`` source code which is
# used to configure a type hint.
defineConstant = { MYPYC = false }

[tool.interrogate]
fail-under = 100
omit-covered-files = true
verbose = 2

[tool.doc8]

max_line_length = 2000
ignore_path = [
    "./.eggs",
    "./docs/build",
    "./docs/build/spelling/output.txt",
    "./node_modules",
    "./src/*.egg-info/",
    "./src/*/_setuptools_scm_version.txt",
]

[tool.vulture]
# Duplicate some of .gitignore
exclude = [ ".venv" ]
ignore_names = [
    # mypy hooks:
    # https://mypy.readthedocs.io/en/latest/extending_mypy.html#current-list-of-plugin-hooks.
    "get_function_signature_hook",
    "get_method_signature_hook",
]

[tool.yamlfix]
section_whitelines = 1
whitelines = 1
