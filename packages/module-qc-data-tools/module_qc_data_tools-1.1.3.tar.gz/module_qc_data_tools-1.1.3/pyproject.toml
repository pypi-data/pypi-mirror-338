[build-system]
requires = ["hatchling>=0.7", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "module-qc-data-tools"
dynamic = ["version"]
authors = [
    { name = "Jay Chan", email = "jay.chan@cern.ch" },
]
maintainers = [
    { name = "Giordon Stark", email = "gstark@cern.ch" },
]
description = "Module qc data tools"
readme = "README.md"
license = { file="LICENSE" }
requires-python = ">=3.7"
dependencies = [
    "numpy",
    "tabulate",
    "jsonschema",
    "rich",
    "pymongo", # https://github.com/py-bson/bson/issues/124
]
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: MIT License",
    "Topic :: Scientific/Engineering",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Developers",
    "Operating System :: OS Independent",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering",
    "Development Status :: 1 - Planning",
]

[project.urls]
"Homepage" = "https://gitlab.cern.ch/atlas-itk/pixel/module/module-qc-data-tools"
"Bug Tracker" = "https://gitlab.cern.ch/atlas-itk/pixel/module/module-qc-data-tools/-/issues"
"Source" = "https://gitlab.cern.ch/atlas-itk/pixel/module/module-qc-data-tools"


[tool.hatch.version]
source = "vcs"

[tool.hatch.version.raw-options]
local_scheme = "no-local-version"

[tool.hatch.build.hooks.vcs]
version-file = "src/module_qc_data_tools/_version.py"

[tool.hatch.build.targets.sdist]

[tool.hatch.envs.default]
dependencies = [
    "tbump>=6.7.0",
    "pylint",
    "build",
    "twine",
]

[tool.hatch.envs.default.scripts]
tag = "tbump {args}"
lint = "pylint src"
build = "python -m build"
validate = "twine check dist/*"
# https://github.com/linkchecker/linkchecker/issues/678
build-check = [
  "build",
  "validate",
]
upload = "twine upload dist/*"

[tool.hatch.envs.dev]
template = "dev"
# pylint and pytest needs to be installed into package environment
detached = false
dependencies = [
    "pytest >=6",
]

[tool.hatch.envs.dev.scripts]
test = "pytest -ra {args}"

[[tool.hatch.envs.dev.matrix]]
python = ["3.7", "3.8", "3.9", "3.10", "3.11", "pypy3.8"]

[tool.ruff.lint]
extend-select = [
  "B",           # flake8-bugbear
  "I",           # isort
  "ARG",         # flake8-unused-arguments
  "C4",          # flake8-comprehensions
  "EM",          # flake8-errmsg
  "ICN",         # flake8-import-conventions
  "PGH",         # pygrep-hooks
  "PIE",         # flake8-pie
  "PL",          # pylint
  "PT",          # flake8-pytest-style
  "PTH",         # flake8-use-pathlib
  "RET",         # flake8-return
  "RUF",         # Ruff-specific
  "SIM",         # flake8-simplify
  "TID251",      # flake8-tidy-imports.banned-api
  "T20",         # flake8-print
  "UP",          # pyupgrade
  "YTT",         # flake8-2020
]
ignore = [
  "PLR",    # Design related pylint codes
  "PT004",  # Incorrect check, usefixtures is the correct way to do this
  "RUF012", # Would require a lot of ClassVar's
]

[tool.ruff.lint.flake8-tidy-imports.banned-api]
"typing.Callable".msg = "Use collections.abc.Callable instead."
"typing.Iterator".msg = "Use collections.abc.Iterator instead."
"typing.Mapping".msg = "Use collections.abc.Mapping instead."
"typing.Sequence".msg = "Use collections.abc.Sequence instead."
"typing.Set".msg = "Use collections.abc.Set instead."
"importlib.abc".msg = "Use sp_repo_review._compat.importlib.resources.abc instead."
"importlib.resources.abc".msg = "Use sp_repo_review._compat.importlib.resources.abc instead."

[tool.pylint]
master.py-version = "3.7"
master.ignore-paths= ["src/module_qc_data_tools/_version.py"]
reports.output-format = "colorized"
similarities.ignore-imports = "yes"
messages_control.disable = [
  "design",
  "fixme",
  "line-too-long",
  "missing-module-docstring",
  "wrong-import-position",
  # below are disabled for now, need to actually fix
  "missing-class-docstring",
  "missing-function-docstring",
  "invalid-name",
  "broad-except",
]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = ["-ra", "--showlocals", "--strict-markers", "--strict-config"]
xfail_strict = true
filterwarnings = [
  "error",
]
testpaths = ["tests"]
log_cli_level = "INFO"

[tool.repo-review]
ignore = [
  "GH", # only if using GitHub
  "PC140", "MY100", # no typehints used
  "RTD100",
]
