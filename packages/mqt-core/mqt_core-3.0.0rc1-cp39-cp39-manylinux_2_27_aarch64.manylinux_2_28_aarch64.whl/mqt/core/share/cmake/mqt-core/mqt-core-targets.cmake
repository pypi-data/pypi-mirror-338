# Generated by CMake

if("${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}" LESS 2.8)
   message(FATAL_ERROR "CMake >= 3.0.0 required")
endif()
if(CMAKE_VERSION VERSION_LESS "3.0.0")
   message(FATAL_ERROR "CMake >= 3.0.0 required")
endif()
cmake_policy(PUSH)
cmake_policy(VERSION 3.0.0...3.29)
#----------------------------------------------------------------
# Generated CMake target import file.
#----------------------------------------------------------------

# Commands may need to know the format version.
set(CMAKE_IMPORT_FILE_VERSION 1)

# Protect against multiple inclusion, which would fail when already imported targets are added once more.
set(_cmake_targets_defined "")
set(_cmake_targets_not_defined "")
set(_cmake_expected_targets "")
foreach(_cmake_expected_target IN ITEMS MQT::ProjectWarnings MQT::ProjectOptions MQT::CoreIR MQT::CoreQASM MQT::CoreAlgorithms MQT::CoreCircuitOptimizer MQT::CoreDS MQT::CoreDD MQT::CoreZX MQT::multiprecision MQT::CoreNA)
  list(APPEND _cmake_expected_targets "${_cmake_expected_target}")
  if(TARGET "${_cmake_expected_target}")
    list(APPEND _cmake_targets_defined "${_cmake_expected_target}")
  else()
    list(APPEND _cmake_targets_not_defined "${_cmake_expected_target}")
  endif()
endforeach()
unset(_cmake_expected_target)
if(_cmake_targets_defined STREQUAL _cmake_expected_targets)
  unset(_cmake_targets_defined)
  unset(_cmake_targets_not_defined)
  unset(_cmake_expected_targets)
  unset(CMAKE_IMPORT_FILE_VERSION)
  cmake_policy(POP)
  return()
endif()
if(NOT _cmake_targets_defined STREQUAL "")
  string(REPLACE ";" ", " _cmake_targets_defined_text "${_cmake_targets_defined}")
  string(REPLACE ";" ", " _cmake_targets_not_defined_text "${_cmake_targets_not_defined}")
  message(FATAL_ERROR "Some (but not all) targets in this export set were already defined.\nTargets Defined: ${_cmake_targets_defined_text}\nTargets not yet defined: ${_cmake_targets_not_defined_text}\n")
endif()
unset(_cmake_targets_defined)
unset(_cmake_targets_not_defined)
unset(_cmake_expected_targets)


# Compute the installation prefix relative to this file.
get_filename_component(_IMPORT_PREFIX "${CMAKE_CURRENT_LIST_FILE}" PATH)
get_filename_component(_IMPORT_PREFIX "${_IMPORT_PREFIX}" PATH)
get_filename_component(_IMPORT_PREFIX "${_IMPORT_PREFIX}" PATH)
get_filename_component(_IMPORT_PREFIX "${_IMPORT_PREFIX}" PATH)
if(_IMPORT_PREFIX STREQUAL "/")
  set(_IMPORT_PREFIX "")
endif()

# Create imported target MQT::ProjectWarnings
add_library(MQT::ProjectWarnings INTERFACE IMPORTED)

set_target_properties(MQT::ProjectWarnings PROPERTIES
  INTERFACE_COMPILE_OPTIONS "-Wall;-Wextra;-Wshadow;-Wnon-virtual-dtor;-Wold-style-cast;-Wcast-align;-Wunused;-Woverloaded-virtual;-Wpedantic;-Wconversion;-Wsign-conversion;-Wnull-dereference;-Wdouble-promotion;-Wformat=2;-Wno-unknown-pragmas;-Wno-pragmas;\$<\$<CXX_COMPILER_ID:AppleClang,Clang>:-Wno-unknown-warning-option>;-Wmisleading-indentation;-Wduplicated-cond;-Wduplicated-branches;-Wlogical-op;-Wuseless-cast;-Wmissing-noreturn"
)

# Create imported target MQT::ProjectOptions
add_library(MQT::ProjectOptions INTERFACE IMPORTED)

set_target_properties(MQT::ProjectOptions PROPERTIES
  INTERFACE_COMPILE_OPTIONS "-g;\$<\$<CONFIG:RELEASE>:-fno-math-errno;-ffinite-math-only;-fno-trapping-math;-fno-stack-protector>;\$<\$<CONFIG:DEBUG>:-fno-omit-frame-pointer;-fno-optimize-sibling-calls;-fno-inline-functions>"
  INTERFACE_POSITION_INDEPENDENT_CODE "ON"
)

# Create imported target MQT::CoreIR
add_library(MQT::CoreIR SHARED IMPORTED)

set_target_properties(MQT::CoreIR PROPERTIES
  INTERFACE_COMPILE_FEATURES "cxx_std_17"
)

if(NOT CMAKE_VERSION VERSION_LESS "3.23.0")
  target_sources(MQT::CoreIR
    INTERFACE
      FILE_SET "HEADERS"
      TYPE "HEADERS"
      BASE_DIRS "${_IMPORT_PREFIX}/include/mqt-core"
      FILES "${_IMPORT_PREFIX}/include/mqt-core/ir/Definitions.hpp" "${_IMPORT_PREFIX}/include/mqt-core/ir/Permutation.hpp" "${_IMPORT_PREFIX}/include/mqt-core/ir/QuantumComputation.hpp" "${_IMPORT_PREFIX}/include/mqt-core/ir/Register.hpp" "${_IMPORT_PREFIX}/include/mqt-core/ir/mqt_core_ir_export.h" "${_IMPORT_PREFIX}/include/mqt-core/ir/operations/AodOperation.hpp" "${_IMPORT_PREFIX}/include/mqt-core/ir/operations/ClassicControlledOperation.hpp" "${_IMPORT_PREFIX}/include/mqt-core/ir/operations/CompoundOperation.hpp" "${_IMPORT_PREFIX}/include/mqt-core/ir/operations/Control.hpp" "${_IMPORT_PREFIX}/include/mqt-core/ir/operations/Expression.hpp" "${_IMPORT_PREFIX}/include/mqt-core/ir/operations/NonUnitaryOperation.hpp" "${_IMPORT_PREFIX}/include/mqt-core/ir/operations/OpType.hpp" "${_IMPORT_PREFIX}/include/mqt-core/ir/operations/OpType.inc" "${_IMPORT_PREFIX}/include/mqt-core/ir/operations/Operation.hpp" "${_IMPORT_PREFIX}/include/mqt-core/ir/operations/StandardOperation.hpp" "${_IMPORT_PREFIX}/include/mqt-core/ir/operations/SymbolicOperation.hpp"
  )
else()
  set_property(TARGET MQT::CoreIR
    APPEND PROPERTY INTERFACE_INCLUDE_DIRECTORIES
      "${_IMPORT_PREFIX}/include/mqt-core"
  )
endif()

# Create imported target MQT::CoreQASM
add_library(MQT::CoreQASM SHARED IMPORTED)

set_target_properties(MQT::CoreQASM PROPERTIES
  INTERFACE_LINK_LIBRARIES "MQT::CoreIR"
)

if(NOT CMAKE_VERSION VERSION_LESS "3.23.0")
  target_sources(MQT::CoreQASM
    INTERFACE
      FILE_SET "HEADERS"
      TYPE "HEADERS"
      BASE_DIRS "${_IMPORT_PREFIX}/include/mqt-core"
      FILES "${_IMPORT_PREFIX}/include/mqt-core/qasm3/Exception.hpp" "${_IMPORT_PREFIX}/include/mqt-core/qasm3/Gate.hpp" "${_IMPORT_PREFIX}/include/mqt-core/qasm3/Importer.hpp" "${_IMPORT_PREFIX}/include/mqt-core/qasm3/InstVisitor.hpp" "${_IMPORT_PREFIX}/include/mqt-core/qasm3/NestedEnvironment.hpp" "${_IMPORT_PREFIX}/include/mqt-core/qasm3/Parser.hpp" "${_IMPORT_PREFIX}/include/mqt-core/qasm3/Scanner.hpp" "${_IMPORT_PREFIX}/include/mqt-core/qasm3/Statement.hpp" "${_IMPORT_PREFIX}/include/mqt-core/qasm3/Statement_fwd.hpp" "${_IMPORT_PREFIX}/include/mqt-core/qasm3/StdGates.hpp" "${_IMPORT_PREFIX}/include/mqt-core/qasm3/Token.hpp" "${_IMPORT_PREFIX}/include/mqt-core/qasm3/Types.hpp" "${_IMPORT_PREFIX}/include/mqt-core/qasm3/Types_fwd.hpp" "${_IMPORT_PREFIX}/include/mqt-core/qasm3/mqt_core_qasm_export.h" "${_IMPORT_PREFIX}/include/mqt-core/qasm3/passes/CompilerPass.hpp" "${_IMPORT_PREFIX}/include/mqt-core/qasm3/passes/ConstEvalPass.hpp" "${_IMPORT_PREFIX}/include/mqt-core/qasm3/passes/TypeCheckPass.hpp"
  )
else()
  set_property(TARGET MQT::CoreQASM
    APPEND PROPERTY INTERFACE_INCLUDE_DIRECTORIES
      "${_IMPORT_PREFIX}/include/mqt-core"
  )
endif()

# Create imported target MQT::CoreAlgorithms
add_library(MQT::CoreAlgorithms SHARED IMPORTED)

set_target_properties(MQT::CoreAlgorithms PROPERTIES
  INTERFACE_LINK_LIBRARIES "MQT::CoreIR"
)

if(NOT CMAKE_VERSION VERSION_LESS "3.23.0")
  target_sources(MQT::CoreAlgorithms
    INTERFACE
      FILE_SET "HEADERS"
      TYPE "HEADERS"
      BASE_DIRS "${_IMPORT_PREFIX}/include/mqt-core"
      FILES "${_IMPORT_PREFIX}/include/mqt-core/algorithms/BernsteinVazirani.hpp" "${_IMPORT_PREFIX}/include/mqt-core/algorithms/GHZState.hpp" "${_IMPORT_PREFIX}/include/mqt-core/algorithms/Grover.hpp" "${_IMPORT_PREFIX}/include/mqt-core/algorithms/QFT.hpp" "${_IMPORT_PREFIX}/include/mqt-core/algorithms/QPE.hpp" "${_IMPORT_PREFIX}/include/mqt-core/algorithms/RandomCliffordCircuit.hpp" "${_IMPORT_PREFIX}/include/mqt-core/algorithms/StatePreparation.hpp" "${_IMPORT_PREFIX}/include/mqt-core/algorithms/WState.hpp" "${_IMPORT_PREFIX}/include/mqt-core/algorithms/mqt_core_algorithms_export.h"
  )
else()
  set_property(TARGET MQT::CoreAlgorithms
    APPEND PROPERTY INTERFACE_INCLUDE_DIRECTORIES
      "${_IMPORT_PREFIX}/include/mqt-core"
  )
endif()

# Create imported target MQT::CoreCircuitOptimizer
add_library(MQT::CoreCircuitOptimizer SHARED IMPORTED)

set_target_properties(MQT::CoreCircuitOptimizer PROPERTIES
  INTERFACE_LINK_LIBRARIES "MQT::CoreIR"
)

if(NOT CMAKE_VERSION VERSION_LESS "3.23.0")
  target_sources(MQT::CoreCircuitOptimizer
    INTERFACE
      FILE_SET "HEADERS"
      TYPE "HEADERS"
      BASE_DIRS "${_IMPORT_PREFIX}/include/mqt-core"
      FILES "${_IMPORT_PREFIX}/include/mqt-core/circuit_optimizer/CircuitOptimizer.hpp" "${_IMPORT_PREFIX}/include/mqt-core/circuit_optimizer/mqt_core_circuit_optimizer_export.h"
  )
else()
  set_property(TARGET MQT::CoreCircuitOptimizer
    APPEND PROPERTY INTERFACE_INCLUDE_DIRECTORIES
      "${_IMPORT_PREFIX}/include/mqt-core"
  )
endif()

# Create imported target MQT::CoreDS
add_library(MQT::CoreDS SHARED IMPORTED)

set_target_properties(MQT::CoreDS PROPERTIES
  INTERFACE_LINK_LIBRARIES "MQT::CoreIR"
)

if(NOT CMAKE_VERSION VERSION_LESS "3.23.0")
  target_sources(MQT::CoreDS
    INTERFACE
      FILE_SET "HEADERS"
      TYPE "HEADERS"
      BASE_DIRS "${_IMPORT_PREFIX}/include/mqt-core"
      FILES "${_IMPORT_PREFIX}/include/mqt-core/datastructures/DirectedAcyclicGraph.hpp" "${_IMPORT_PREFIX}/include/mqt-core/datastructures/DirectedGraph.hpp" "${_IMPORT_PREFIX}/include/mqt-core/datastructures/DisjointSet.hpp" "${_IMPORT_PREFIX}/include/mqt-core/datastructures/Layer.hpp" "${_IMPORT_PREFIX}/include/mqt-core/datastructures/SymmetricMatrix.hpp" "${_IMPORT_PREFIX}/include/mqt-core/datastructures/UndirectedGraph.hpp" "${_IMPORT_PREFIX}/include/mqt-core/datastructures/mqt_core_ds_export.h"
  )
else()
  set_property(TARGET MQT::CoreDS
    APPEND PROPERTY INTERFACE_INCLUDE_DIRECTORIES
      "${_IMPORT_PREFIX}/include/mqt-core"
  )
endif()

# Create imported target MQT::CoreDD
add_library(MQT::CoreDD SHARED IMPORTED)

set_target_properties(MQT::CoreDD PROPERTIES
  INTERFACE_LINK_LIBRARIES "MQT::CoreIR;nlohmann_json::nlohmann_json"
)

if(NOT CMAKE_VERSION VERSION_LESS "3.23.0")
  target_sources(MQT::CoreDD
    INTERFACE
      FILE_SET "HEADERS"
      TYPE "HEADERS"
      BASE_DIRS "${_IMPORT_PREFIX}/include/mqt-core"
      FILES "${_IMPORT_PREFIX}/include/mqt-core/dd/CachedEdge.hpp" "${_IMPORT_PREFIX}/include/mqt-core/dd/Complex.hpp" "${_IMPORT_PREFIX}/include/mqt-core/dd/ComplexNumbers.hpp" "${_IMPORT_PREFIX}/include/mqt-core/dd/ComplexValue.hpp" "${_IMPORT_PREFIX}/include/mqt-core/dd/ComputeTable.hpp" "${_IMPORT_PREFIX}/include/mqt-core/dd/DDDefinitions.hpp" "${_IMPORT_PREFIX}/include/mqt-core/dd/DDpackageConfig.hpp" "${_IMPORT_PREFIX}/include/mqt-core/dd/DensityNoiseTable.hpp" "${_IMPORT_PREFIX}/include/mqt-core/dd/Edge.hpp" "${_IMPORT_PREFIX}/include/mqt-core/dd/Export.hpp" "${_IMPORT_PREFIX}/include/mqt-core/dd/FunctionalityConstruction.hpp" "${_IMPORT_PREFIX}/include/mqt-core/dd/GateMatrixDefinitions.hpp" "${_IMPORT_PREFIX}/include/mqt-core/dd/LinkedListBase.hpp" "${_IMPORT_PREFIX}/include/mqt-core/dd/MemoryManager.hpp" "${_IMPORT_PREFIX}/include/mqt-core/dd/Node.hpp" "${_IMPORT_PREFIX}/include/mqt-core/dd/NoiseFunctionality.hpp" "${_IMPORT_PREFIX}/include/mqt-core/dd/Operations.hpp" "${_IMPORT_PREFIX}/include/mqt-core/dd/Package.hpp" "${_IMPORT_PREFIX}/include/mqt-core/dd/Package_fwd.hpp" "${_IMPORT_PREFIX}/include/mqt-core/dd/RealNumber.hpp" "${_IMPORT_PREFIX}/include/mqt-core/dd/RealNumberUniqueTable.hpp" "${_IMPORT_PREFIX}/include/mqt-core/dd/Simulation.hpp" "${_IMPORT_PREFIX}/include/mqt-core/dd/StochasticNoiseOperationTable.hpp" "${_IMPORT_PREFIX}/include/mqt-core/dd/UnaryComputeTable.hpp" "${_IMPORT_PREFIX}/include/mqt-core/dd/UniqueTable.hpp" "${_IMPORT_PREFIX}/include/mqt-core/dd/mqt_core_dd_export.h" "${_IMPORT_PREFIX}/include/mqt-core/dd/statistics/MemoryManagerStatistics.hpp" "${_IMPORT_PREFIX}/include/mqt-core/dd/statistics/PackageStatistics.hpp" "${_IMPORT_PREFIX}/include/mqt-core/dd/statistics/Statistics.hpp" "${_IMPORT_PREFIX}/include/mqt-core/dd/statistics/TableStatistics.hpp" "${_IMPORT_PREFIX}/include/mqt-core/dd/statistics/UniqueTableStatistics.hpp"
  )
else()
  set_property(TARGET MQT::CoreDD
    APPEND PROPERTY INTERFACE_INCLUDE_DIRECTORIES
      "${_IMPORT_PREFIX}/include/mqt-core"
  )
endif()

# Create imported target MQT::CoreZX
add_library(MQT::CoreZX SHARED IMPORTED)

set_target_properties(MQT::CoreZX PROPERTIES
  INTERFACE_LINK_LIBRARIES "MQT::CoreIR;MQT::multiprecision"
)

if(NOT CMAKE_VERSION VERSION_LESS "3.23.0")
  target_sources(MQT::CoreZX
    INTERFACE
      FILE_SET "HEADERS"
      TYPE "HEADERS"
      BASE_DIRS "${_IMPORT_PREFIX}/include/mqt-core"
      FILES "${_IMPORT_PREFIX}/include/mqt-core/zx/FunctionalityConstruction.hpp" "${_IMPORT_PREFIX}/include/mqt-core/zx/Rational.hpp" "${_IMPORT_PREFIX}/include/mqt-core/zx/Rules.hpp" "${_IMPORT_PREFIX}/include/mqt-core/zx/Simplify.hpp" "${_IMPORT_PREFIX}/include/mqt-core/zx/Utils.hpp" "${_IMPORT_PREFIX}/include/mqt-core/zx/ZXDefinitions.hpp" "${_IMPORT_PREFIX}/include/mqt-core/zx/ZXDiagram.hpp" "${_IMPORT_PREFIX}/include/mqt-core/zx/mqt_core_zx_export.h"
  )
else()
  set_property(TARGET MQT::CoreZX
    APPEND PROPERTY INTERFACE_INCLUDE_DIRECTORIES
      "${_IMPORT_PREFIX}/include/mqt-core"
  )
endif()

# Create imported target MQT::multiprecision
add_library(MQT::multiprecision INTERFACE IMPORTED)

# Create imported target MQT::CoreNA
add_library(MQT::CoreNA SHARED IMPORTED)

set_target_properties(MQT::CoreNA PROPERTIES
  INTERFACE_LINK_LIBRARIES "MQT::CoreIR"
)

if(NOT CMAKE_VERSION VERSION_LESS "3.23.0")
  target_sources(MQT::CoreNA
    INTERFACE
      FILE_SET "HEADERS"
      TYPE "HEADERS"
      BASE_DIRS "${_IMPORT_PREFIX}/include/mqt-core"
      FILES "${_IMPORT_PREFIX}/include/mqt-core/na/NAComputation.hpp" "${_IMPORT_PREFIX}/include/mqt-core/na/mqt_core_na_export.h" "${_IMPORT_PREFIX}/include/mqt-core/na/entities/Atom.hpp" "${_IMPORT_PREFIX}/include/mqt-core/na/entities/Location.hpp" "${_IMPORT_PREFIX}/include/mqt-core/na/entities/Zone.hpp" "${_IMPORT_PREFIX}/include/mqt-core/na/operations/GlobalCZOp.hpp" "${_IMPORT_PREFIX}/include/mqt-core/na/operations/GlobalOp.hpp" "${_IMPORT_PREFIX}/include/mqt-core/na/operations/GlobalRYOp.hpp" "${_IMPORT_PREFIX}/include/mqt-core/na/operations/LoadOp.hpp" "${_IMPORT_PREFIX}/include/mqt-core/na/operations/LocalOp.hpp" "${_IMPORT_PREFIX}/include/mqt-core/na/operations/LocalRZOp.hpp" "${_IMPORT_PREFIX}/include/mqt-core/na/operations/LocalUOp.hpp" "${_IMPORT_PREFIX}/include/mqt-core/na/operations/MoveOp.hpp" "${_IMPORT_PREFIX}/include/mqt-core/na/operations/Op.hpp" "${_IMPORT_PREFIX}/include/mqt-core/na/operations/ShuttlingOp.hpp" "${_IMPORT_PREFIX}/include/mqt-core/na/operations/StoreOp.hpp"
  )
else()
  set_property(TARGET MQT::CoreNA
    APPEND PROPERTY INTERFACE_INCLUDE_DIRECTORIES
      "${_IMPORT_PREFIX}/include/mqt-core"
  )
endif()

# Load information for each installed configuration.
file(GLOB _cmake_config_files "${CMAKE_CURRENT_LIST_DIR}/mqt-core-targets-*.cmake")
foreach(_cmake_config_file IN LISTS _cmake_config_files)
  include("${_cmake_config_file}")
endforeach()
unset(_cmake_config_file)
unset(_cmake_config_files)

# Cleanup temporary variables.
set(_IMPORT_PREFIX)

# Loop over all imported files and verify that they actually exist
foreach(_cmake_target IN LISTS _cmake_import_check_targets)
  if(CMAKE_VERSION VERSION_LESS "3.28"
      OR NOT DEFINED _cmake_import_check_xcframework_for_${_cmake_target}
      OR NOT IS_DIRECTORY "${_cmake_import_check_xcframework_for_${_cmake_target}}")
    foreach(_cmake_file IN LISTS "_cmake_import_check_files_for_${_cmake_target}")
      if(NOT EXISTS "${_cmake_file}")
        message(FATAL_ERROR "The imported target \"${_cmake_target}\" references the file
   \"${_cmake_file}\"
but this file does not exist.  Possible reasons include:
* The file was deleted, renamed, or moved to another location.
* An install or uninstall procedure did not complete successfully.
* The installation package was faulty and contained
   \"${CMAKE_CURRENT_LIST_FILE}\"
but not all the files it references.
")
      endif()
    endforeach()
  endif()
  unset(_cmake_file)
  unset("_cmake_import_check_files_for_${_cmake_target}")
endforeach()
unset(_cmake_target)
unset(_cmake_import_check_targets)

# Make sure the targets which have been exported in some other
# export set exist.
unset(${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE_targets)
foreach(_target "nlohmann_json::nlohmann_json" )
  if(NOT TARGET "${_target}" )
    set(${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE_targets "${${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE_targets} ${_target}")
  endif()
endforeach()

if(DEFINED ${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE_targets)
  if(CMAKE_FIND_PACKAGE_NAME)
    set( ${CMAKE_FIND_PACKAGE_NAME}_FOUND FALSE)
    set( ${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE "The following imported targets are referenced, but are missing: ${${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE_targets}")
  else()
    message(FATAL_ERROR "The following imported targets are referenced, but are missing: ${${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE_targets}")
  endif()
endif()
unset(${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE_targets)

# Commands beyond this point should not need to know the version.
set(CMAKE_IMPORT_FILE_VERSION)
cmake_policy(POP)
