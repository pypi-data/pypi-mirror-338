<?xml version="1.0"?>
<dc-workflow xmlns:i18n="http://xml.zope.org/namespaces/i18n"
             workflow_id="senaite_patient_folder_workflow"
             title="Workflow for patient root folders"
             description="A one-state (active) workflow for patient root folder"
             state_variable="review_state"
             initial_state="active"
             manager_bypass="False"
             i18n:domain="senaite.patient">

  <!-- MANAGED PERMISSIONS -->
  <permission>Add portal content</permission>
  <permission>Access contents information</permission>
  <permission>Delete objects</permission>
  <permission>List folder contents</permission>
  <permission>Modify portal content</permission>
  <permission>View</permission>
  <!-- Custom Add permission to create Patients in this folder
       Also see `initialize` function in `__init__.py`
  -->
  <permission>senaite.patient: Add Patient</permission>
  <!-- /MANAGED PERMISSIONS -->


  <!-- State: active (initial) -->
  <state state_id="active" title="Active" i18n:attributes="title">

    <!-- TRANSITIONS -->
    <exit-transition transition_id="" />
    <!-- /TRANSITIONS -->

    <!-- PERMISSION MAPPINGS -->
    <!-- This permission governs if the patients folder should appear in searches -->
    <permission-map name="Access contents information" acquired="False">
      <permission-role>LabClerk</permission-role>
      <permission-role>LabManager</permission-role>
      <permission-role>Manager</permission-role>
    </permission-map>
    <!-- Roles needed to add other contents inside the patients folder.
         Not needed at the moment, but we use the default roles -->
    <permission-map name="Add portal content" acquired="False">
      <permission-role>LabClerk</permission-role>
      <permission-role>LabManager</permission-role>
      <permission-role>Manager</permission-role>
    </permission-map>
    <!-- Roles that are needed to create a new Patient -->
    <permission-map name="senaite.patient: Add Patient" acquired="False">
      <permission-role>LabClerk</permission-role>
      <permission-role>LabManager</permission-role>
      <permission-role>Manager</permission-role>
    </permission-map>
    <!-- Never allow to delete contents -->
    <permission-map name="Delete objects" acquired="False">
    </permission-map>
    <!-- Roles needed to list all patients -->
    <permission-map name="List folder contents" acquired="False">
      <permission-role>LabClerk</permission-role>
      <permission-role>LabManager</permission-role>
      <permission-role>Manager</permission-role>
    </permission-map>
    <!-- Only the Manager can modify the folder -->
    <permission-map name="Modify portal content" acquired="False">
      <permission-role>Manager</permission-role>
    </permission-map>
    <!-- Roles that are needed to see the patients folder / that it appears in
         the side navigation bar -->
    <permission-map name="View" acquired="False">
      <permission-role>LabClerk</permission-role>
      <permission-role>LabManager</permission-role>
      <permission-role>Manager</permission-role>
    </permission-map>
    <!-- /PERMISSION MAPPINGS -->
  </state>

  <variable variable_id="action" for_catalog="False" for_status="True" update_always="True">
    <description>Previous transition</description>
    <default>
      <expression>transition/getId|nothing</expression>
    </default>
    <guard>
    </guard>
  </variable>

  <variable variable_id="actor" for_catalog="False" for_status="True" update_always="True">
    <description>The ID of the user who performed the last transition</description>
    <default>
      <expression>user/getId</expression>
    </default>
    <guard>
    </guard>
  </variable>

  <variable variable_id="comments" for_catalog="False" for_status="True" update_always="True">
    <description>Comment about the last transition</description>
    <default>
      <expression>python:state_change.kwargs.get('comment', '')</expression>
    </default>
    <guard>
    </guard>
  </variable>

  <variable variable_id="review_history" for_catalog="False" for_status="False" update_always="False">
    <description>Provides access to workflow history</description>
    <default>
      <expression>state_change/getHistory</expression>
    </default>
    <guard>
    </guard>
  </variable>

  <variable variable_id="time" for_catalog="False" for_status="True" update_always="True">
    <description>When the previous transition was performed</description>
    <default>
      <expression>state_change/getDateTime</expression>
    </default>
    <guard>
    </guard>
  </variable>

</dc-workflow>
