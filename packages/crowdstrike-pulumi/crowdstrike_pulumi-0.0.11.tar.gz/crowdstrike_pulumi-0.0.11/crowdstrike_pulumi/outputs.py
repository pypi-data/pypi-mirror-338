# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'CloudAwsAccountAssetInventory',
    'CloudAwsAccountDspm',
    'CloudAwsAccountIdp',
    'CloudAwsAccountRealtimeVisibility',
    'CloudAwsAccountSensorManagement',
    'DefaultSensorUpdatePolicySchedule',
    'DefaultSensorUpdatePolicyScheduleTimeBlock',
    'FilevantagePolicyScheduledExclusion',
    'FilevantagePolicyScheduledExclusionRepeated',
    'FilevantageRuleGroupRule',
    'PreventionPolicyLinuxCloudAntiMalware',
    'PreventionPolicyLinuxSensorAntiMalware',
    'PreventionPolicyMacCloudAdwareAndPup',
    'PreventionPolicyMacCloudAntiMalware',
    'PreventionPolicyMacSensorAdwareAndPup',
    'PreventionPolicyMacSensorAntiMalware',
    'PreventionPolicyWindowsAdwareAndPup',
    'PreventionPolicyWindowsCloudAntiMalware',
    'PreventionPolicyWindowsCloudAntiMalwareMicrosoftOfficeFiles',
    'PreventionPolicyWindowsCloudAntiMalwareUserInitiated',
    'PreventionPolicyWindowsExtendedUserModeData',
    'PreventionPolicyWindowsSensorAntiMalware',
    'PreventionPolicyWindowsSensorAntiMalwareUserInitiated',
    'SensorUpdatePolicySchedule',
    'SensorUpdatePolicyScheduleTimeBlock',
    'GetCloudAwsAccountAccountResult',
    'GetSensorUpdatePolicyBuildsLinuxResult',
    'GetSensorUpdatePolicyBuildsLinuxAllResult',
    'GetSensorUpdatePolicyBuildsLinuxArm64Result',
    'GetSensorUpdatePolicyBuildsLinuxArm64AllResult',
    'GetSensorUpdatePolicyBuildsLinuxArm64LatestResult',
    'GetSensorUpdatePolicyBuildsLinuxArm64N1Result',
    'GetSensorUpdatePolicyBuildsLinuxArm64N2Result',
    'GetSensorUpdatePolicyBuildsLinuxLatestResult',
    'GetSensorUpdatePolicyBuildsLinuxN1Result',
    'GetSensorUpdatePolicyBuildsLinuxN2Result',
    'GetSensorUpdatePolicyBuildsMacResult',
    'GetSensorUpdatePolicyBuildsMacAllResult',
    'GetSensorUpdatePolicyBuildsMacLatestResult',
    'GetSensorUpdatePolicyBuildsMacN1Result',
    'GetSensorUpdatePolicyBuildsMacN2Result',
    'GetSensorUpdatePolicyBuildsWindowsResult',
    'GetSensorUpdatePolicyBuildsWindowsAllResult',
    'GetSensorUpdatePolicyBuildsWindowsLatestResult',
    'GetSensorUpdatePolicyBuildsWindowsN1Result',
    'GetSensorUpdatePolicyBuildsWindowsN2Result',
]

@pulumi.output_type
class CloudAwsAccountAssetInventory(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "roleName":
            suggest = "role_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CloudAwsAccountAssetInventory. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CloudAwsAccountAssetInventory.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CloudAwsAccountAssetInventory.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enabled: bool,
                 role_name: Optional[str] = None):
        """
        :param bool enabled: Enable asset inventory
        :param str role_name: Custom AWS IAM role name
        """
        pulumi.set(__self__, "enabled", enabled)
        if role_name is not None:
            pulumi.set(__self__, "role_name", role_name)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Enable asset inventory
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="roleName")
    def role_name(self) -> Optional[str]:
        """
        Custom AWS IAM role name
        """
        return pulumi.get(self, "role_name")


@pulumi.output_type
class CloudAwsAccountDspm(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "roleName":
            suggest = "role_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CloudAwsAccountDspm. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CloudAwsAccountDspm.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CloudAwsAccountDspm.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enabled: bool,
                 role_name: Optional[str] = None):
        """
        :param bool enabled: Enable Data Security Posture Management
        :param str role_name: Custom AWS IAM role name for Data Security Posture Management
        """
        pulumi.set(__self__, "enabled", enabled)
        if role_name is not None:
            pulumi.set(__self__, "role_name", role_name)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Enable Data Security Posture Management
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="roleName")
    def role_name(self) -> Optional[str]:
        """
        Custom AWS IAM role name for Data Security Posture Management
        """
        return pulumi.get(self, "role_name")


@pulumi.output_type
class CloudAwsAccountIdp(dict):
    def __init__(__self__, *,
                 enabled: bool,
                 status: Optional[str] = None):
        """
        :param bool enabled: Enable Identity Protection
        :param str status: Current status of the Identity Protection integration
        """
        pulumi.set(__self__, "enabled", enabled)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Enable Identity Protection
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        Current status of the Identity Protection integration
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class CloudAwsAccountRealtimeVisibility(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cloudtrailRegion":
            suggest = "cloudtrail_region"
        elif key == "useExistingCloudtrail":
            suggest = "use_existing_cloudtrail"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CloudAwsAccountRealtimeVisibility. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CloudAwsAccountRealtimeVisibility.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CloudAwsAccountRealtimeVisibility.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cloudtrail_region: str,
                 enabled: bool,
                 use_existing_cloudtrail: Optional[bool] = None):
        """
        :param str cloudtrail_region: The AWS region of the CloudTrail bucket
        :param bool enabled: Enable real-time visibility and detection
        :param bool use_existing_cloudtrail: Set to true if a CloudTrail already exists
        """
        pulumi.set(__self__, "cloudtrail_region", cloudtrail_region)
        pulumi.set(__self__, "enabled", enabled)
        if use_existing_cloudtrail is not None:
            pulumi.set(__self__, "use_existing_cloudtrail", use_existing_cloudtrail)

    @property
    @pulumi.getter(name="cloudtrailRegion")
    def cloudtrail_region(self) -> str:
        """
        The AWS region of the CloudTrail bucket
        """
        return pulumi.get(self, "cloudtrail_region")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Enable real-time visibility and detection
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="useExistingCloudtrail")
    def use_existing_cloudtrail(self) -> Optional[bool]:
        """
        Set to true if a CloudTrail already exists
        """
        return pulumi.get(self, "use_existing_cloudtrail")


@pulumi.output_type
class CloudAwsAccountSensorManagement(dict):
    def __init__(__self__, *,
                 enabled: bool):
        """
        :param bool enabled: Enable 1-click sensor deployment
        """
        pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Enable 1-click sensor deployment
        """
        return pulumi.get(self, "enabled")


@pulumi.output_type
class DefaultSensorUpdatePolicySchedule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "timeBlocks":
            suggest = "time_blocks"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DefaultSensorUpdatePolicySchedule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DefaultSensorUpdatePolicySchedule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DefaultSensorUpdatePolicySchedule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enabled: bool,
                 time_blocks: Optional[Sequence['outputs.DefaultSensorUpdatePolicyScheduleTimeBlock']] = None,
                 timezone: Optional[str] = None):
        """
        :param bool enabled: Enable the scheduler for sensor update policy.
        :param Sequence['DefaultSensorUpdatePolicyScheduleTimeBlockArgs'] time_blocks: The time block to prevent sensor updates. Only set when enabled is true.
        :param str timezone: The time zones that will be used for the time blocks. Only set when enabled is true.
        """
        pulumi.set(__self__, "enabled", enabled)
        if time_blocks is not None:
            pulumi.set(__self__, "time_blocks", time_blocks)
        if timezone is not None:
            pulumi.set(__self__, "timezone", timezone)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Enable the scheduler for sensor update policy.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="timeBlocks")
    def time_blocks(self) -> Optional[Sequence['outputs.DefaultSensorUpdatePolicyScheduleTimeBlock']]:
        """
        The time block to prevent sensor updates. Only set when enabled is true.
        """
        return pulumi.get(self, "time_blocks")

    @property
    @pulumi.getter
    def timezone(self) -> Optional[str]:
        """
        The time zones that will be used for the time blocks. Only set when enabled is true.
        """
        return pulumi.get(self, "timezone")


@pulumi.output_type
class DefaultSensorUpdatePolicyScheduleTimeBlock(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endTime":
            suggest = "end_time"
        elif key == "startTime":
            suggest = "start_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DefaultSensorUpdatePolicyScheduleTimeBlock. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DefaultSensorUpdatePolicyScheduleTimeBlock.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DefaultSensorUpdatePolicyScheduleTimeBlock.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 days: Sequence[str],
                 end_time: str,
                 start_time: str):
        """
        :param Sequence[str] days: The days of the week the time block should be active.
        :param str end_time: The end time for the time block in 24HR format. Must be atleast 1 hour more than start_time.
        :param str start_time: The start time for the time block in 24HR format. Must be atleast 1 hour before end_time.
        """
        pulumi.set(__self__, "days", days)
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "start_time", start_time)

    @property
    @pulumi.getter
    def days(self) -> Sequence[str]:
        """
        The days of the week the time block should be active.
        """
        return pulumi.get(self, "days")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> str:
        """
        The end time for the time block in 24HR format. Must be atleast 1 hour more than start_time.
        """
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        """
        The start time for the time block in 24HR format. Must be atleast 1 hour before end_time.
        """
        return pulumi.get(self, "start_time")


@pulumi.output_type
class FilevantagePolicyScheduledExclusion(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "startDate":
            suggest = "start_date"
        elif key == "startTime":
            suggest = "start_time"
        elif key == "endDate":
            suggest = "end_date"
        elif key == "endTime":
            suggest = "end_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FilevantagePolicyScheduledExclusion. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FilevantagePolicyScheduledExclusion.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FilevantagePolicyScheduledExclusion.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 start_date: str,
                 start_time: str,
                 timezone: str,
                 description: Optional[str] = None,
                 end_date: Optional[str] = None,
                 end_time: Optional[str] = None,
                 id: Optional[str] = None,
                 processes: Optional[str] = None,
                 repeated: Optional['outputs.FilevantagePolicyScheduledExclusionRepeated'] = None,
                 users: Optional[str] = None):
        """
        :param str name: Name of the scheduled exclusion.
        :param str start_date: The start date of the scheduled exclusion. Format: YYYY-MM-DD
        :param str start_time: The start time of the scheduled exclusion in 24 hour format. Format: HH:MM
        :param str timezone: The timezone to use for the time fields. See https://en.wikipedia.org/wiki/List*of*tz*database*time_zones.
        :param str description: Description of the scheduled exclusion.
        :param str end_date: The end date of the scheduled exclusion. Format: YYYY-MM-DD
        :param str end_time: The end time of the scheduled exclusion in 24 hour format. Format: HH:MM
        :param str id: Identifier for the scheduled exclusion.
        :param str processes: A comma separated list of processes to exclude changes from. Example: **/run*me.sh excludes changes made by run*me.sh in any location
        :param 'FilevantagePolicyScheduledExclusionRepeatedArgs' repeated: Repeated scheduled exclusion
        :param str users: A comma separated list of users to exclude changes from. Example: user1,user2,admin* excludes changes made by user1, user2, and any user starting with admin
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "start_date", start_date)
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "timezone", timezone)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if end_date is not None:
            pulumi.set(__self__, "end_date", end_date)
        if end_time is not None:
            pulumi.set(__self__, "end_time", end_time)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if processes is not None:
            pulumi.set(__self__, "processes", processes)
        if repeated is not None:
            pulumi.set(__self__, "repeated", repeated)
        if users is not None:
            pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the scheduled exclusion.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        """
        The start date of the scheduled exclusion. Format: YYYY-MM-DD
        """
        return pulumi.get(self, "start_date")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        """
        The start time of the scheduled exclusion in 24 hour format. Format: HH:MM
        """
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter
    def timezone(self) -> str:
        """
        The timezone to use for the time fields. See https://en.wikipedia.org/wiki/List*of*tz*database*time_zones.
        """
        return pulumi.get(self, "timezone")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Description of the scheduled exclusion.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="endDate")
    def end_date(self) -> Optional[str]:
        """
        The end date of the scheduled exclusion. Format: YYYY-MM-DD
        """
        return pulumi.get(self, "end_date")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[str]:
        """
        The end time of the scheduled exclusion in 24 hour format. Format: HH:MM
        """
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Identifier for the scheduled exclusion.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def processes(self) -> Optional[str]:
        """
        A comma separated list of processes to exclude changes from. Example: **/run*me.sh excludes changes made by run*me.sh in any location
        """
        return pulumi.get(self, "processes")

    @property
    @pulumi.getter
    def repeated(self) -> Optional['outputs.FilevantagePolicyScheduledExclusionRepeated']:
        """
        Repeated scheduled exclusion
        """
        return pulumi.get(self, "repeated")

    @property
    @pulumi.getter
    def users(self) -> Optional[str]:
        """
        A comma separated list of users to exclude changes from. Example: user1,user2,admin* excludes changes made by user1, user2, and any user starting with admin
        """
        return pulumi.get(self, "users")


@pulumi.output_type
class FilevantagePolicyScheduledExclusionRepeated(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allDay":
            suggest = "all_day"
        elif key == "daysOfMonths":
            suggest = "days_of_months"
        elif key == "daysOfWeeks":
            suggest = "days_of_weeks"
        elif key == "endTime":
            suggest = "end_time"
        elif key == "monthlyOccurrence":
            suggest = "monthly_occurrence"
        elif key == "startTime":
            suggest = "start_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FilevantagePolicyScheduledExclusionRepeated. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FilevantagePolicyScheduledExclusionRepeated.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FilevantagePolicyScheduledExclusionRepeated.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 all_day: bool,
                 frequency: str,
                 days_of_months: Optional[Sequence[int]] = None,
                 days_of_weeks: Optional[Sequence[str]] = None,
                 end_time: Optional[str] = None,
                 monthly_occurrence: Optional[str] = None,
                 start_time: Optional[str] = None):
        """
        :param bool all_day: If the exclusion is all day.
        :param str frequency: The frequency of the exclusion. Options: daily, weekly, monthly
        :param Sequence[int] days_of_months: The days of the month to allow the exclusion. Required if frequency is set to monthly and monthly_occurrence is set to days. Options: 1-31
        :param Sequence[str] days_of_weeks: The days of the week to allow the exclusion. Required if frequency is set to weekly or set to monthly and monthly_occurrence is set to a week. Options: Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday
        :param str end_time: The end time to end the scheduled exclusion in 24 hour format. Format: HH:MM required if all_day is false
        :param str monthly_occurrence: The monthly occurrence of the exclusion. Either specify a week (first, second, third, fourth) or set to days to specify days of the month. Options: first, second, third, fourth, days. Required if frequency is set to monthly
        :param str start_time: The start time to allow the scheduled exclusion in 24 hour format. Format: HH:MM required if all_day is false
        """
        pulumi.set(__self__, "all_day", all_day)
        pulumi.set(__self__, "frequency", frequency)
        if days_of_months is not None:
            pulumi.set(__self__, "days_of_months", days_of_months)
        if days_of_weeks is not None:
            pulumi.set(__self__, "days_of_weeks", days_of_weeks)
        if end_time is not None:
            pulumi.set(__self__, "end_time", end_time)
        if monthly_occurrence is not None:
            pulumi.set(__self__, "monthly_occurrence", monthly_occurrence)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)

    @property
    @pulumi.getter(name="allDay")
    def all_day(self) -> bool:
        """
        If the exclusion is all day.
        """
        return pulumi.get(self, "all_day")

    @property
    @pulumi.getter
    def frequency(self) -> str:
        """
        The frequency of the exclusion. Options: daily, weekly, monthly
        """
        return pulumi.get(self, "frequency")

    @property
    @pulumi.getter(name="daysOfMonths")
    def days_of_months(self) -> Optional[Sequence[int]]:
        """
        The days of the month to allow the exclusion. Required if frequency is set to monthly and monthly_occurrence is set to days. Options: 1-31
        """
        return pulumi.get(self, "days_of_months")

    @property
    @pulumi.getter(name="daysOfWeeks")
    def days_of_weeks(self) -> Optional[Sequence[str]]:
        """
        The days of the week to allow the exclusion. Required if frequency is set to weekly or set to monthly and monthly_occurrence is set to a week. Options: Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday
        """
        return pulumi.get(self, "days_of_weeks")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[str]:
        """
        The end time to end the scheduled exclusion in 24 hour format. Format: HH:MM required if all_day is false
        """
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="monthlyOccurrence")
    def monthly_occurrence(self) -> Optional[str]:
        """
        The monthly occurrence of the exclusion. Either specify a week (first, second, third, fourth) or set to days to specify days of the month. Options: first, second, third, fourth, days. Required if frequency is set to monthly
        """
        return pulumi.get(self, "monthly_occurrence")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[str]:
        """
        The start time to allow the scheduled exclusion in 24 hour format. Format: HH:MM required if all_day is false
        """
        return pulumi.get(self, "start_time")


@pulumi.output_type
class FilevantageRuleGroupRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "enableContentCapture":
            suggest = "enable_content_capture"
        elif key == "excludeProcesses":
            suggest = "exclude_processes"
        elif key == "excludeUsers":
            suggest = "exclude_users"
        elif key == "fileNames":
            suggest = "file_names"
        elif key == "includeProcesses":
            suggest = "include_processes"
        elif key == "includeUsers":
            suggest = "include_users"
        elif key == "registryValues":
            suggest = "registry_values"
        elif key == "watchDirectoryAttributeChanges":
            suggest = "watch_directory_attribute_changes"
        elif key == "watchDirectoryCreateChanges":
            suggest = "watch_directory_create_changes"
        elif key == "watchDirectoryDeleteChanges":
            suggest = "watch_directory_delete_changes"
        elif key == "watchDirectoryPermissionChanges":
            suggest = "watch_directory_permission_changes"
        elif key == "watchDirectoryRenameChanges":
            suggest = "watch_directory_rename_changes"
        elif key == "watchFileAttributeChanges":
            suggest = "watch_file_attribute_changes"
        elif key == "watchFileCreateChanges":
            suggest = "watch_file_create_changes"
        elif key == "watchFileDeleteChanges":
            suggest = "watch_file_delete_changes"
        elif key == "watchFilePermissionChanges":
            suggest = "watch_file_permission_changes"
        elif key == "watchFileRenameChanges":
            suggest = "watch_file_rename_changes"
        elif key == "watchFileWriteChanges":
            suggest = "watch_file_write_changes"
        elif key == "watchKeyCreateChanges":
            suggest = "watch_key_create_changes"
        elif key == "watchKeyDeleteChanges":
            suggest = "watch_key_delete_changes"
        elif key == "watchKeyPermissionsChanges":
            suggest = "watch_key_permissions_changes"
        elif key == "watchKeyRenameChanges":
            suggest = "watch_key_rename_changes"
        elif key == "watchKeyValueDeleteChanges":
            suggest = "watch_key_value_delete_changes"
        elif key == "watchKeyValueSetChanges":
            suggest = "watch_key_value_set_changes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FilevantageRuleGroupRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FilevantageRuleGroupRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FilevantageRuleGroupRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 description: str,
                 path: str,
                 severity: str,
                 depth: Optional[str] = None,
                 enable_content_capture: Optional[bool] = None,
                 exclude: Optional[str] = None,
                 exclude_processes: Optional[str] = None,
                 exclude_users: Optional[str] = None,
                 file_names: Optional[Sequence[str]] = None,
                 id: Optional[str] = None,
                 include: Optional[str] = None,
                 include_processes: Optional[str] = None,
                 include_users: Optional[str] = None,
                 precedence: Optional[int] = None,
                 registry_values: Optional[Sequence[str]] = None,
                 watch_directory_attribute_changes: Optional[bool] = None,
                 watch_directory_create_changes: Optional[bool] = None,
                 watch_directory_delete_changes: Optional[bool] = None,
                 watch_directory_permission_changes: Optional[bool] = None,
                 watch_directory_rename_changes: Optional[bool] = None,
                 watch_file_attribute_changes: Optional[bool] = None,
                 watch_file_create_changes: Optional[bool] = None,
                 watch_file_delete_changes: Optional[bool] = None,
                 watch_file_permission_changes: Optional[bool] = None,
                 watch_file_rename_changes: Optional[bool] = None,
                 watch_file_write_changes: Optional[bool] = None,
                 watch_key_create_changes: Optional[bool] = None,
                 watch_key_delete_changes: Optional[bool] = None,
                 watch_key_permissions_changes: Optional[bool] = None,
                 watch_key_rename_changes: Optional[bool] = None,
                 watch_key_value_delete_changes: Optional[bool] = None,
                 watch_key_value_set_changes: Optional[bool] = None):
        """
        :param str description: Description of the filevantage rule.
        :param str path: Representing the file system or registry path to monitor. All paths must end with the path separator, e.g. c:\\windows\\ for windows and /usr/bin/ for linux/mac.
        :param str severity: Severity to categorize change events produced by this rule.
        :param str depth: Depth below the base path to monitor.
        :param bool enable_content_capture: Enable content capture for the rule. Requires watch*file*write*changes or watch*key*value*set_changes to be enabled.
        :param str exclude: Represents the files, directories, registry keys, or registry values that will be excluded from monitoring.
        :param str exclude_processes: Represents the changes performed by specific processes that will be excluded from monitoring.
        :param str exclude_users: Represents the changes performed by specific users that will be excluded from monitoring.
        :param Sequence[str] file_names: List of file names whose content will be monitored. Listed files must match the file include pattern and not match the file exclude pattern.
        :param str id: Identifier for the filevantage rule.
        :param str include: Represents the files, directories, registry keys, or registry values that will be monitored. Defaults to all (*)
        :param str include_processes: Represents the changes performed by specific processes that will be monitored.
        :param str include_users: Represents the changes performed by specific users that will be monitored.
        :param int precedence: Precedence of the rule in the rule group.
        :param Sequence[str] registry_values: List of registry values whose content will be monitored. Listed registry values must match the registry include pattern and not match the registry exclude pattern.
        :param bool watch_directory_attribute_changes: Monitor directory attribute change events.
        :param bool watch_directory_create_changes: Monitor directory creation events.
        :param bool watch_directory_delete_changes: Monitor directory deletion events.
        :param bool watch_directory_permission_changes: Monitor directory permission change events.
        :param bool watch_directory_rename_changes: Monitor directory rename events.
        :param bool watch_file_attribute_changes: Monitor file attribute change events.
        :param bool watch_file_create_changes: Monitor file creation events.
        :param bool watch_file_delete_changes: Monitor file deletion events.
        :param bool watch_file_permission_changes: Monitor file permission change events.
        :param bool watch_file_rename_changes: Monitor file rename events.
        :param bool watch_file_write_changes: Monitor file write events.
        :param bool watch_key_create_changes: Monitor registry key creation events.
        :param bool watch_key_delete_changes: Monitor registry key deletion events.
        :param bool watch_key_permissions_changes: Monitor registry key permission change events.
        :param bool watch_key_rename_changes: Monitor registry key rename events.
        :param bool watch_key_value_delete_changes: Monitor registry value deletion events.
        :param bool watch_key_value_set_changes: Monitor registry value set events.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "severity", severity)
        if depth is not None:
            pulumi.set(__self__, "depth", depth)
        if enable_content_capture is not None:
            pulumi.set(__self__, "enable_content_capture", enable_content_capture)
        if exclude is not None:
            pulumi.set(__self__, "exclude", exclude)
        if exclude_processes is not None:
            pulumi.set(__self__, "exclude_processes", exclude_processes)
        if exclude_users is not None:
            pulumi.set(__self__, "exclude_users", exclude_users)
        if file_names is not None:
            pulumi.set(__self__, "file_names", file_names)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if include is not None:
            pulumi.set(__self__, "include", include)
        if include_processes is not None:
            pulumi.set(__self__, "include_processes", include_processes)
        if include_users is not None:
            pulumi.set(__self__, "include_users", include_users)
        if precedence is not None:
            pulumi.set(__self__, "precedence", precedence)
        if registry_values is not None:
            pulumi.set(__self__, "registry_values", registry_values)
        if watch_directory_attribute_changes is not None:
            pulumi.set(__self__, "watch_directory_attribute_changes", watch_directory_attribute_changes)
        if watch_directory_create_changes is not None:
            pulumi.set(__self__, "watch_directory_create_changes", watch_directory_create_changes)
        if watch_directory_delete_changes is not None:
            pulumi.set(__self__, "watch_directory_delete_changes", watch_directory_delete_changes)
        if watch_directory_permission_changes is not None:
            pulumi.set(__self__, "watch_directory_permission_changes", watch_directory_permission_changes)
        if watch_directory_rename_changes is not None:
            pulumi.set(__self__, "watch_directory_rename_changes", watch_directory_rename_changes)
        if watch_file_attribute_changes is not None:
            pulumi.set(__self__, "watch_file_attribute_changes", watch_file_attribute_changes)
        if watch_file_create_changes is not None:
            pulumi.set(__self__, "watch_file_create_changes", watch_file_create_changes)
        if watch_file_delete_changes is not None:
            pulumi.set(__self__, "watch_file_delete_changes", watch_file_delete_changes)
        if watch_file_permission_changes is not None:
            pulumi.set(__self__, "watch_file_permission_changes", watch_file_permission_changes)
        if watch_file_rename_changes is not None:
            pulumi.set(__self__, "watch_file_rename_changes", watch_file_rename_changes)
        if watch_file_write_changes is not None:
            pulumi.set(__self__, "watch_file_write_changes", watch_file_write_changes)
        if watch_key_create_changes is not None:
            pulumi.set(__self__, "watch_key_create_changes", watch_key_create_changes)
        if watch_key_delete_changes is not None:
            pulumi.set(__self__, "watch_key_delete_changes", watch_key_delete_changes)
        if watch_key_permissions_changes is not None:
            pulumi.set(__self__, "watch_key_permissions_changes", watch_key_permissions_changes)
        if watch_key_rename_changes is not None:
            pulumi.set(__self__, "watch_key_rename_changes", watch_key_rename_changes)
        if watch_key_value_delete_changes is not None:
            pulumi.set(__self__, "watch_key_value_delete_changes", watch_key_value_delete_changes)
        if watch_key_value_set_changes is not None:
            pulumi.set(__self__, "watch_key_value_set_changes", watch_key_value_set_changes)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Description of the filevantage rule.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Representing the file system or registry path to monitor. All paths must end with the path separator, e.g. c:\\windows\\ for windows and /usr/bin/ for linux/mac.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def severity(self) -> str:
        """
        Severity to categorize change events produced by this rule.
        """
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter
    def depth(self) -> Optional[str]:
        """
        Depth below the base path to monitor.
        """
        return pulumi.get(self, "depth")

    @property
    @pulumi.getter(name="enableContentCapture")
    def enable_content_capture(self) -> Optional[bool]:
        """
        Enable content capture for the rule. Requires watch*file*write*changes or watch*key*value*set_changes to be enabled.
        """
        return pulumi.get(self, "enable_content_capture")

    @property
    @pulumi.getter
    def exclude(self) -> Optional[str]:
        """
        Represents the files, directories, registry keys, or registry values that will be excluded from monitoring.
        """
        return pulumi.get(self, "exclude")

    @property
    @pulumi.getter(name="excludeProcesses")
    def exclude_processes(self) -> Optional[str]:
        """
        Represents the changes performed by specific processes that will be excluded from monitoring.
        """
        return pulumi.get(self, "exclude_processes")

    @property
    @pulumi.getter(name="excludeUsers")
    def exclude_users(self) -> Optional[str]:
        """
        Represents the changes performed by specific users that will be excluded from monitoring.
        """
        return pulumi.get(self, "exclude_users")

    @property
    @pulumi.getter(name="fileNames")
    def file_names(self) -> Optional[Sequence[str]]:
        """
        List of file names whose content will be monitored. Listed files must match the file include pattern and not match the file exclude pattern.
        """
        return pulumi.get(self, "file_names")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Identifier for the filevantage rule.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def include(self) -> Optional[str]:
        """
        Represents the files, directories, registry keys, or registry values that will be monitored. Defaults to all (*)
        """
        return pulumi.get(self, "include")

    @property
    @pulumi.getter(name="includeProcesses")
    def include_processes(self) -> Optional[str]:
        """
        Represents the changes performed by specific processes that will be monitored.
        """
        return pulumi.get(self, "include_processes")

    @property
    @pulumi.getter(name="includeUsers")
    def include_users(self) -> Optional[str]:
        """
        Represents the changes performed by specific users that will be monitored.
        """
        return pulumi.get(self, "include_users")

    @property
    @pulumi.getter
    def precedence(self) -> Optional[int]:
        """
        Precedence of the rule in the rule group.
        """
        return pulumi.get(self, "precedence")

    @property
    @pulumi.getter(name="registryValues")
    def registry_values(self) -> Optional[Sequence[str]]:
        """
        List of registry values whose content will be monitored. Listed registry values must match the registry include pattern and not match the registry exclude pattern.
        """
        return pulumi.get(self, "registry_values")

    @property
    @pulumi.getter(name="watchDirectoryAttributeChanges")
    def watch_directory_attribute_changes(self) -> Optional[bool]:
        """
        Monitor directory attribute change events.
        """
        return pulumi.get(self, "watch_directory_attribute_changes")

    @property
    @pulumi.getter(name="watchDirectoryCreateChanges")
    def watch_directory_create_changes(self) -> Optional[bool]:
        """
        Monitor directory creation events.
        """
        return pulumi.get(self, "watch_directory_create_changes")

    @property
    @pulumi.getter(name="watchDirectoryDeleteChanges")
    def watch_directory_delete_changes(self) -> Optional[bool]:
        """
        Monitor directory deletion events.
        """
        return pulumi.get(self, "watch_directory_delete_changes")

    @property
    @pulumi.getter(name="watchDirectoryPermissionChanges")
    def watch_directory_permission_changes(self) -> Optional[bool]:
        """
        Monitor directory permission change events.
        """
        return pulumi.get(self, "watch_directory_permission_changes")

    @property
    @pulumi.getter(name="watchDirectoryRenameChanges")
    def watch_directory_rename_changes(self) -> Optional[bool]:
        """
        Monitor directory rename events.
        """
        return pulumi.get(self, "watch_directory_rename_changes")

    @property
    @pulumi.getter(name="watchFileAttributeChanges")
    def watch_file_attribute_changes(self) -> Optional[bool]:
        """
        Monitor file attribute change events.
        """
        return pulumi.get(self, "watch_file_attribute_changes")

    @property
    @pulumi.getter(name="watchFileCreateChanges")
    def watch_file_create_changes(self) -> Optional[bool]:
        """
        Monitor file creation events.
        """
        return pulumi.get(self, "watch_file_create_changes")

    @property
    @pulumi.getter(name="watchFileDeleteChanges")
    def watch_file_delete_changes(self) -> Optional[bool]:
        """
        Monitor file deletion events.
        """
        return pulumi.get(self, "watch_file_delete_changes")

    @property
    @pulumi.getter(name="watchFilePermissionChanges")
    def watch_file_permission_changes(self) -> Optional[bool]:
        """
        Monitor file permission change events.
        """
        return pulumi.get(self, "watch_file_permission_changes")

    @property
    @pulumi.getter(name="watchFileRenameChanges")
    def watch_file_rename_changes(self) -> Optional[bool]:
        """
        Monitor file rename events.
        """
        return pulumi.get(self, "watch_file_rename_changes")

    @property
    @pulumi.getter(name="watchFileWriteChanges")
    def watch_file_write_changes(self) -> Optional[bool]:
        """
        Monitor file write events.
        """
        return pulumi.get(self, "watch_file_write_changes")

    @property
    @pulumi.getter(name="watchKeyCreateChanges")
    def watch_key_create_changes(self) -> Optional[bool]:
        """
        Monitor registry key creation events.
        """
        return pulumi.get(self, "watch_key_create_changes")

    @property
    @pulumi.getter(name="watchKeyDeleteChanges")
    def watch_key_delete_changes(self) -> Optional[bool]:
        """
        Monitor registry key deletion events.
        """
        return pulumi.get(self, "watch_key_delete_changes")

    @property
    @pulumi.getter(name="watchKeyPermissionsChanges")
    def watch_key_permissions_changes(self) -> Optional[bool]:
        """
        Monitor registry key permission change events.
        """
        return pulumi.get(self, "watch_key_permissions_changes")

    @property
    @pulumi.getter(name="watchKeyRenameChanges")
    def watch_key_rename_changes(self) -> Optional[bool]:
        """
        Monitor registry key rename events.
        """
        return pulumi.get(self, "watch_key_rename_changes")

    @property
    @pulumi.getter(name="watchKeyValueDeleteChanges")
    def watch_key_value_delete_changes(self) -> Optional[bool]:
        """
        Monitor registry value deletion events.
        """
        return pulumi.get(self, "watch_key_value_delete_changes")

    @property
    @pulumi.getter(name="watchKeyValueSetChanges")
    def watch_key_value_set_changes(self) -> Optional[bool]:
        """
        Monitor registry value set events.
        """
        return pulumi.get(self, "watch_key_value_set_changes")


@pulumi.output_type
class PreventionPolicyLinuxCloudAntiMalware(dict):
    def __init__(__self__, *,
                 detection: str,
                 prevention: str):
        """
        :param str detection: Machine learning level for detection.
        :param str prevention: Machine learning level for prevention.
        """
        pulumi.set(__self__, "detection", detection)
        pulumi.set(__self__, "prevention", prevention)

    @property
    @pulumi.getter
    def detection(self) -> str:
        """
        Machine learning level for detection.
        """
        return pulumi.get(self, "detection")

    @property
    @pulumi.getter
    def prevention(self) -> str:
        """
        Machine learning level for prevention.
        """
        return pulumi.get(self, "prevention")


@pulumi.output_type
class PreventionPolicyLinuxSensorAntiMalware(dict):
    def __init__(__self__, *,
                 detection: str,
                 prevention: str):
        """
        :param str detection: Machine learning level for detection.
        :param str prevention: Machine learning level for prevention.
        """
        pulumi.set(__self__, "detection", detection)
        pulumi.set(__self__, "prevention", prevention)

    @property
    @pulumi.getter
    def detection(self) -> str:
        """
        Machine learning level for detection.
        """
        return pulumi.get(self, "detection")

    @property
    @pulumi.getter
    def prevention(self) -> str:
        """
        Machine learning level for prevention.
        """
        return pulumi.get(self, "prevention")


@pulumi.output_type
class PreventionPolicyMacCloudAdwareAndPup(dict):
    def __init__(__self__, *,
                 detection: str,
                 prevention: str):
        """
        :param str detection: Machine learning level for detection.
        :param str prevention: Machine learning level for prevention.
        """
        pulumi.set(__self__, "detection", detection)
        pulumi.set(__self__, "prevention", prevention)

    @property
    @pulumi.getter
    def detection(self) -> str:
        """
        Machine learning level for detection.
        """
        return pulumi.get(self, "detection")

    @property
    @pulumi.getter
    def prevention(self) -> str:
        """
        Machine learning level for prevention.
        """
        return pulumi.get(self, "prevention")


@pulumi.output_type
class PreventionPolicyMacCloudAntiMalware(dict):
    def __init__(__self__, *,
                 detection: str,
                 prevention: str):
        """
        :param str detection: Machine learning level for detection.
        :param str prevention: Machine learning level for prevention.
        """
        pulumi.set(__self__, "detection", detection)
        pulumi.set(__self__, "prevention", prevention)

    @property
    @pulumi.getter
    def detection(self) -> str:
        """
        Machine learning level for detection.
        """
        return pulumi.get(self, "detection")

    @property
    @pulumi.getter
    def prevention(self) -> str:
        """
        Machine learning level for prevention.
        """
        return pulumi.get(self, "prevention")


@pulumi.output_type
class PreventionPolicyMacSensorAdwareAndPup(dict):
    def __init__(__self__, *,
                 detection: str,
                 prevention: str):
        """
        :param str detection: Machine learning level for detection.
        :param str prevention: Machine learning level for prevention.
        """
        pulumi.set(__self__, "detection", detection)
        pulumi.set(__self__, "prevention", prevention)

    @property
    @pulumi.getter
    def detection(self) -> str:
        """
        Machine learning level for detection.
        """
        return pulumi.get(self, "detection")

    @property
    @pulumi.getter
    def prevention(self) -> str:
        """
        Machine learning level for prevention.
        """
        return pulumi.get(self, "prevention")


@pulumi.output_type
class PreventionPolicyMacSensorAntiMalware(dict):
    def __init__(__self__, *,
                 detection: str,
                 prevention: str):
        """
        :param str detection: Machine learning level for detection.
        :param str prevention: Machine learning level for prevention.
        """
        pulumi.set(__self__, "detection", detection)
        pulumi.set(__self__, "prevention", prevention)

    @property
    @pulumi.getter
    def detection(self) -> str:
        """
        Machine learning level for detection.
        """
        return pulumi.get(self, "detection")

    @property
    @pulumi.getter
    def prevention(self) -> str:
        """
        Machine learning level for prevention.
        """
        return pulumi.get(self, "prevention")


@pulumi.output_type
class PreventionPolicyWindowsAdwareAndPup(dict):
    def __init__(__self__, *,
                 detection: str,
                 prevention: str):
        """
        :param str detection: Machine learning level for detection.
        :param str prevention: Machine learning level for prevention.
        """
        pulumi.set(__self__, "detection", detection)
        pulumi.set(__self__, "prevention", prevention)

    @property
    @pulumi.getter
    def detection(self) -> str:
        """
        Machine learning level for detection.
        """
        return pulumi.get(self, "detection")

    @property
    @pulumi.getter
    def prevention(self) -> str:
        """
        Machine learning level for prevention.
        """
        return pulumi.get(self, "prevention")


@pulumi.output_type
class PreventionPolicyWindowsCloudAntiMalware(dict):
    def __init__(__self__, *,
                 detection: str,
                 prevention: str):
        """
        :param str detection: Machine learning level for detection.
        :param str prevention: Machine learning level for prevention.
        """
        pulumi.set(__self__, "detection", detection)
        pulumi.set(__self__, "prevention", prevention)

    @property
    @pulumi.getter
    def detection(self) -> str:
        """
        Machine learning level for detection.
        """
        return pulumi.get(self, "detection")

    @property
    @pulumi.getter
    def prevention(self) -> str:
        """
        Machine learning level for prevention.
        """
        return pulumi.get(self, "prevention")


@pulumi.output_type
class PreventionPolicyWindowsCloudAntiMalwareMicrosoftOfficeFiles(dict):
    def __init__(__self__, *,
                 detection: str,
                 prevention: str):
        """
        :param str detection: Machine learning level for detection.
        :param str prevention: Machine learning level for prevention.
        """
        pulumi.set(__self__, "detection", detection)
        pulumi.set(__self__, "prevention", prevention)

    @property
    @pulumi.getter
    def detection(self) -> str:
        """
        Machine learning level for detection.
        """
        return pulumi.get(self, "detection")

    @property
    @pulumi.getter
    def prevention(self) -> str:
        """
        Machine learning level for prevention.
        """
        return pulumi.get(self, "prevention")


@pulumi.output_type
class PreventionPolicyWindowsCloudAntiMalwareUserInitiated(dict):
    def __init__(__self__, *,
                 detection: str,
                 prevention: str):
        """
        :param str detection: Machine learning level for detection.
        :param str prevention: Machine learning level for prevention.
        """
        pulumi.set(__self__, "detection", detection)
        pulumi.set(__self__, "prevention", prevention)

    @property
    @pulumi.getter
    def detection(self) -> str:
        """
        Machine learning level for detection.
        """
        return pulumi.get(self, "detection")

    @property
    @pulumi.getter
    def prevention(self) -> str:
        """
        Machine learning level for prevention.
        """
        return pulumi.get(self, "prevention")


@pulumi.output_type
class PreventionPolicyWindowsExtendedUserModeData(dict):
    def __init__(__self__, *,
                 detection: str):
        """
        :param str detection: Machine learning level for detection.
        """
        pulumi.set(__self__, "detection", detection)

    @property
    @pulumi.getter
    def detection(self) -> str:
        """
        Machine learning level for detection.
        """
        return pulumi.get(self, "detection")


@pulumi.output_type
class PreventionPolicyWindowsSensorAntiMalware(dict):
    def __init__(__self__, *,
                 detection: str,
                 prevention: str):
        """
        :param str detection: Machine learning level for detection.
        :param str prevention: Machine learning level for prevention.
        """
        pulumi.set(__self__, "detection", detection)
        pulumi.set(__self__, "prevention", prevention)

    @property
    @pulumi.getter
    def detection(self) -> str:
        """
        Machine learning level for detection.
        """
        return pulumi.get(self, "detection")

    @property
    @pulumi.getter
    def prevention(self) -> str:
        """
        Machine learning level for prevention.
        """
        return pulumi.get(self, "prevention")


@pulumi.output_type
class PreventionPolicyWindowsSensorAntiMalwareUserInitiated(dict):
    def __init__(__self__, *,
                 detection: str,
                 prevention: str):
        """
        :param str detection: Machine learning level for detection.
        :param str prevention: Machine learning level for prevention.
        """
        pulumi.set(__self__, "detection", detection)
        pulumi.set(__self__, "prevention", prevention)

    @property
    @pulumi.getter
    def detection(self) -> str:
        """
        Machine learning level for detection.
        """
        return pulumi.get(self, "detection")

    @property
    @pulumi.getter
    def prevention(self) -> str:
        """
        Machine learning level for prevention.
        """
        return pulumi.get(self, "prevention")


@pulumi.output_type
class SensorUpdatePolicySchedule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "timeBlocks":
            suggest = "time_blocks"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SensorUpdatePolicySchedule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SensorUpdatePolicySchedule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SensorUpdatePolicySchedule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enabled: bool,
                 time_blocks: Optional[Sequence['outputs.SensorUpdatePolicyScheduleTimeBlock']] = None,
                 timezone: Optional[str] = None):
        """
        :param bool enabled: Enable the scheduler for sensor update policy.
        :param Sequence['SensorUpdatePolicyScheduleTimeBlockArgs'] time_blocks: The time block to prevent sensor updates. Only set when enabled is true.
        :param str timezone: The time zones that will be used for the time blocks. Only set when enabled is true.
        """
        pulumi.set(__self__, "enabled", enabled)
        if time_blocks is not None:
            pulumi.set(__self__, "time_blocks", time_blocks)
        if timezone is not None:
            pulumi.set(__self__, "timezone", timezone)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Enable the scheduler for sensor update policy.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="timeBlocks")
    def time_blocks(self) -> Optional[Sequence['outputs.SensorUpdatePolicyScheduleTimeBlock']]:
        """
        The time block to prevent sensor updates. Only set when enabled is true.
        """
        return pulumi.get(self, "time_blocks")

    @property
    @pulumi.getter
    def timezone(self) -> Optional[str]:
        """
        The time zones that will be used for the time blocks. Only set when enabled is true.
        """
        return pulumi.get(self, "timezone")


@pulumi.output_type
class SensorUpdatePolicyScheduleTimeBlock(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endTime":
            suggest = "end_time"
        elif key == "startTime":
            suggest = "start_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SensorUpdatePolicyScheduleTimeBlock. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SensorUpdatePolicyScheduleTimeBlock.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SensorUpdatePolicyScheduleTimeBlock.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 days: Sequence[str],
                 end_time: str,
                 start_time: str):
        """
        :param Sequence[str] days: The days of the week the time block should be active.
        :param str end_time: The end time for the time block in 24HR format. Must be atleast 1 hour more than start_time.
        :param str start_time: The start time for the time block in 24HR format. Must be atleast 1 hour before end_time.
        """
        pulumi.set(__self__, "days", days)
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "start_time", start_time)

    @property
    @pulumi.getter
    def days(self) -> Sequence[str]:
        """
        The days of the week the time block should be active.
        """
        return pulumi.get(self, "days")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> str:
        """
        The end time for the time block in 24HR format. Must be atleast 1 hour more than start_time.
        """
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        """
        The start time for the time block in 24HR format. Must be atleast 1 hour before end_time.
        """
        return pulumi.get(self, "start_time")


@pulumi.output_type
class GetCloudAwsAccountAccountResult(dict):
    def __init__(__self__, *,
                 account_id: str,
                 account_type: str,
                 asset_inventory_enabled: bool,
                 cloudtrail_bucket_name: str,
                 cloudtrail_region: str,
                 dspm_enabled: bool,
                 dspm_role_arn: str,
                 dspm_role_name: str,
                 eventbus_arn: str,
                 eventbus_name: str,
                 external_id: str,
                 iam_role_arn: str,
                 iam_role_name: str,
                 idp_enabled: bool,
                 intermediate_role_arn: str,
                 is_organization_management_account: bool,
                 organization_id: str,
                 realtime_visibility_enabled: bool,
                 sensor_management_enabled: bool,
                 target_ouses: Sequence[str]):
        """
        :param str account_id: The AWS Account ID
        :param str account_type: The AWS account type. Value is 'commercial' for Commercial cloud accounts. For GovCloud environments, value can be either 'commercial' or 'gov' depending on the account type
        :param bool asset_inventory_enabled: Whether asset inventory is enabled
        :param str cloudtrail_bucket_name: The name of the CloudTrail S3 bucket used for real-time visibility
        :param str cloudtrail_region: The AWS region of the CloudTrail bucket
        :param bool dspm_enabled: Whether Data Security Posture Management is enabled
        :param str dspm_role_arn: The ARN of the IAM role to be used by CrowdStrike DSPM
        :param str dspm_role_name: The name of the IAM role to be used by CrowdStrike DSPM
        :param str eventbus_arn: The ARN of the Amazon EventBridge used by CrowdStrike to forward messages
        :param str eventbus_name: The name of the Amazon EventBridge used by CrowdStrike to forward messages
        :param str external_id: The external ID used to assume the AWS IAM role
        :param str iam_role_arn: The ARN of the AWS IAM role used to access this AWS account
        :param str iam_role_name: The name of the AWS IAM role used to access this AWS account
        :param bool idp_enabled: Whether Identity Protection is enabled
        :param str intermediate_role_arn: The ARN of the intermediate role used to assume the AWS IAM role
        :param bool is_organization_management_account: Indicates whether this is the management account (formerly known as the root account) of an AWS Organization
        :param str organization_id: The AWS Organization ID
        :param bool realtime_visibility_enabled: Whether real-time visibility is enabled
        :param bool sensor_management_enabled: Whether 1-click sensor deployment is enabled
        :param Sequence[str] target_ouses: The list of AWS Organizational Units (OUs) targeted for this account
        """
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "account_type", account_type)
        pulumi.set(__self__, "asset_inventory_enabled", asset_inventory_enabled)
        pulumi.set(__self__, "cloudtrail_bucket_name", cloudtrail_bucket_name)
        pulumi.set(__self__, "cloudtrail_region", cloudtrail_region)
        pulumi.set(__self__, "dspm_enabled", dspm_enabled)
        pulumi.set(__self__, "dspm_role_arn", dspm_role_arn)
        pulumi.set(__self__, "dspm_role_name", dspm_role_name)
        pulumi.set(__self__, "eventbus_arn", eventbus_arn)
        pulumi.set(__self__, "eventbus_name", eventbus_name)
        pulumi.set(__self__, "external_id", external_id)
        pulumi.set(__self__, "iam_role_arn", iam_role_arn)
        pulumi.set(__self__, "iam_role_name", iam_role_name)
        pulumi.set(__self__, "idp_enabled", idp_enabled)
        pulumi.set(__self__, "intermediate_role_arn", intermediate_role_arn)
        pulumi.set(__self__, "is_organization_management_account", is_organization_management_account)
        pulumi.set(__self__, "organization_id", organization_id)
        pulumi.set(__self__, "realtime_visibility_enabled", realtime_visibility_enabled)
        pulumi.set(__self__, "sensor_management_enabled", sensor_management_enabled)
        pulumi.set(__self__, "target_ouses", target_ouses)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> str:
        """
        The AWS Account ID
        """
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="accountType")
    def account_type(self) -> str:
        """
        The AWS account type. Value is 'commercial' for Commercial cloud accounts. For GovCloud environments, value can be either 'commercial' or 'gov' depending on the account type
        """
        return pulumi.get(self, "account_type")

    @property
    @pulumi.getter(name="assetInventoryEnabled")
    def asset_inventory_enabled(self) -> bool:
        """
        Whether asset inventory is enabled
        """
        return pulumi.get(self, "asset_inventory_enabled")

    @property
    @pulumi.getter(name="cloudtrailBucketName")
    def cloudtrail_bucket_name(self) -> str:
        """
        The name of the CloudTrail S3 bucket used for real-time visibility
        """
        return pulumi.get(self, "cloudtrail_bucket_name")

    @property
    @pulumi.getter(name="cloudtrailRegion")
    def cloudtrail_region(self) -> str:
        """
        The AWS region of the CloudTrail bucket
        """
        return pulumi.get(self, "cloudtrail_region")

    @property
    @pulumi.getter(name="dspmEnabled")
    def dspm_enabled(self) -> bool:
        """
        Whether Data Security Posture Management is enabled
        """
        return pulumi.get(self, "dspm_enabled")

    @property
    @pulumi.getter(name="dspmRoleArn")
    def dspm_role_arn(self) -> str:
        """
        The ARN of the IAM role to be used by CrowdStrike DSPM
        """
        return pulumi.get(self, "dspm_role_arn")

    @property
    @pulumi.getter(name="dspmRoleName")
    def dspm_role_name(self) -> str:
        """
        The name of the IAM role to be used by CrowdStrike DSPM
        """
        return pulumi.get(self, "dspm_role_name")

    @property
    @pulumi.getter(name="eventbusArn")
    def eventbus_arn(self) -> str:
        """
        The ARN of the Amazon EventBridge used by CrowdStrike to forward messages
        """
        return pulumi.get(self, "eventbus_arn")

    @property
    @pulumi.getter(name="eventbusName")
    def eventbus_name(self) -> str:
        """
        The name of the Amazon EventBridge used by CrowdStrike to forward messages
        """
        return pulumi.get(self, "eventbus_name")

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> str:
        """
        The external ID used to assume the AWS IAM role
        """
        return pulumi.get(self, "external_id")

    @property
    @pulumi.getter(name="iamRoleArn")
    def iam_role_arn(self) -> str:
        """
        The ARN of the AWS IAM role used to access this AWS account
        """
        return pulumi.get(self, "iam_role_arn")

    @property
    @pulumi.getter(name="iamRoleName")
    def iam_role_name(self) -> str:
        """
        The name of the AWS IAM role used to access this AWS account
        """
        return pulumi.get(self, "iam_role_name")

    @property
    @pulumi.getter(name="idpEnabled")
    def idp_enabled(self) -> bool:
        """
        Whether Identity Protection is enabled
        """
        return pulumi.get(self, "idp_enabled")

    @property
    @pulumi.getter(name="intermediateRoleArn")
    def intermediate_role_arn(self) -> str:
        """
        The ARN of the intermediate role used to assume the AWS IAM role
        """
        return pulumi.get(self, "intermediate_role_arn")

    @property
    @pulumi.getter(name="isOrganizationManagementAccount")
    def is_organization_management_account(self) -> bool:
        """
        Indicates whether this is the management account (formerly known as the root account) of an AWS Organization
        """
        return pulumi.get(self, "is_organization_management_account")

    @property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> str:
        """
        The AWS Organization ID
        """
        return pulumi.get(self, "organization_id")

    @property
    @pulumi.getter(name="realtimeVisibilityEnabled")
    def realtime_visibility_enabled(self) -> bool:
        """
        Whether real-time visibility is enabled
        """
        return pulumi.get(self, "realtime_visibility_enabled")

    @property
    @pulumi.getter(name="sensorManagementEnabled")
    def sensor_management_enabled(self) -> bool:
        """
        Whether 1-click sensor deployment is enabled
        """
        return pulumi.get(self, "sensor_management_enabled")

    @property
    @pulumi.getter(name="targetOuses")
    def target_ouses(self) -> Sequence[str]:
        """
        The list of AWS Organizational Units (OUs) targeted for this account
        """
        return pulumi.get(self, "target_ouses")


@pulumi.output_type
class GetSensorUpdatePolicyBuildsLinuxResult(dict):
    def __init__(__self__, *,
                 alls: Sequence['outputs.GetSensorUpdatePolicyBuildsLinuxAllResult'],
                 latest: 'outputs.GetSensorUpdatePolicyBuildsLinuxLatestResult',
                 n1: 'outputs.GetSensorUpdatePolicyBuildsLinuxN1Result',
                 n2: 'outputs.GetSensorUpdatePolicyBuildsLinuxN2Result'):
        """
        :param Sequence['GetSensorUpdatePolicyBuildsLinuxAllArgs'] alls: All sensor builds for the specific platform.
        :param 'GetSensorUpdatePolicyBuildsLinuxLatestArgs' latest: The latest sensor build.
        :param 'GetSensorUpdatePolicyBuildsLinuxN1Args' n1: The n-1 sensor build.
        :param 'GetSensorUpdatePolicyBuildsLinuxN2Args' n2: The n-2 sensor build.
        """
        pulumi.set(__self__, "alls", alls)
        pulumi.set(__self__, "latest", latest)
        pulumi.set(__self__, "n1", n1)
        pulumi.set(__self__, "n2", n2)

    @property
    @pulumi.getter
    def alls(self) -> Sequence['outputs.GetSensorUpdatePolicyBuildsLinuxAllResult']:
        """
        All sensor builds for the specific platform.
        """
        return pulumi.get(self, "alls")

    @property
    @pulumi.getter
    def latest(self) -> 'outputs.GetSensorUpdatePolicyBuildsLinuxLatestResult':
        """
        The latest sensor build.
        """
        return pulumi.get(self, "latest")

    @property
    @pulumi.getter
    def n1(self) -> 'outputs.GetSensorUpdatePolicyBuildsLinuxN1Result':
        """
        The n-1 sensor build.
        """
        return pulumi.get(self, "n1")

    @property
    @pulumi.getter
    def n2(self) -> 'outputs.GetSensorUpdatePolicyBuildsLinuxN2Result':
        """
        The n-2 sensor build.
        """
        return pulumi.get(self, "n2")


@pulumi.output_type
class GetSensorUpdatePolicyBuildsLinuxAllResult(dict):
    def __init__(__self__, *,
                 build: str,
                 platform: str,
                 sensor_version: str,
                 stage: str):
        """
        :param str build: The build number for a specific sensor version.
        :param str platform: The target platform for a the build.
        :param str sensor_version: CrowdStrike Falcon Sensor version.
        :param str stage: The stage for the build.
        """
        pulumi.set(__self__, "build", build)
        pulumi.set(__self__, "platform", platform)
        pulumi.set(__self__, "sensor_version", sensor_version)
        pulumi.set(__self__, "stage", stage)

    @property
    @pulumi.getter
    def build(self) -> str:
        """
        The build number for a specific sensor version.
        """
        return pulumi.get(self, "build")

    @property
    @pulumi.getter
    def platform(self) -> str:
        """
        The target platform for a the build.
        """
        return pulumi.get(self, "platform")

    @property
    @pulumi.getter(name="sensorVersion")
    def sensor_version(self) -> str:
        """
        CrowdStrike Falcon Sensor version.
        """
        return pulumi.get(self, "sensor_version")

    @property
    @pulumi.getter
    def stage(self) -> str:
        """
        The stage for the build.
        """
        return pulumi.get(self, "stage")


@pulumi.output_type
class GetSensorUpdatePolicyBuildsLinuxArm64Result(dict):
    def __init__(__self__, *,
                 alls: Sequence['outputs.GetSensorUpdatePolicyBuildsLinuxArm64AllResult'],
                 latest: 'outputs.GetSensorUpdatePolicyBuildsLinuxArm64LatestResult',
                 n1: 'outputs.GetSensorUpdatePolicyBuildsLinuxArm64N1Result',
                 n2: 'outputs.GetSensorUpdatePolicyBuildsLinuxArm64N2Result'):
        """
        :param Sequence['GetSensorUpdatePolicyBuildsLinuxArm64AllArgs'] alls: All sensor builds for the specific platform.
        :param 'GetSensorUpdatePolicyBuildsLinuxArm64LatestArgs' latest: The latest sensor build.
        :param 'GetSensorUpdatePolicyBuildsLinuxArm64N1Args' n1: The n-1 sensor build.
        :param 'GetSensorUpdatePolicyBuildsLinuxArm64N2Args' n2: The n-2 sensor build.
        """
        pulumi.set(__self__, "alls", alls)
        pulumi.set(__self__, "latest", latest)
        pulumi.set(__self__, "n1", n1)
        pulumi.set(__self__, "n2", n2)

    @property
    @pulumi.getter
    def alls(self) -> Sequence['outputs.GetSensorUpdatePolicyBuildsLinuxArm64AllResult']:
        """
        All sensor builds for the specific platform.
        """
        return pulumi.get(self, "alls")

    @property
    @pulumi.getter
    def latest(self) -> 'outputs.GetSensorUpdatePolicyBuildsLinuxArm64LatestResult':
        """
        The latest sensor build.
        """
        return pulumi.get(self, "latest")

    @property
    @pulumi.getter
    def n1(self) -> 'outputs.GetSensorUpdatePolicyBuildsLinuxArm64N1Result':
        """
        The n-1 sensor build.
        """
        return pulumi.get(self, "n1")

    @property
    @pulumi.getter
    def n2(self) -> 'outputs.GetSensorUpdatePolicyBuildsLinuxArm64N2Result':
        """
        The n-2 sensor build.
        """
        return pulumi.get(self, "n2")


@pulumi.output_type
class GetSensorUpdatePolicyBuildsLinuxArm64AllResult(dict):
    def __init__(__self__, *,
                 build: str,
                 platform: str,
                 sensor_version: str,
                 stage: str):
        """
        :param str build: The build number for a specific sensor version.
        :param str platform: The target platform for a the build.
        :param str sensor_version: CrowdStrike Falcon Sensor version.
        :param str stage: The stage for the build.
        """
        pulumi.set(__self__, "build", build)
        pulumi.set(__self__, "platform", platform)
        pulumi.set(__self__, "sensor_version", sensor_version)
        pulumi.set(__self__, "stage", stage)

    @property
    @pulumi.getter
    def build(self) -> str:
        """
        The build number for a specific sensor version.
        """
        return pulumi.get(self, "build")

    @property
    @pulumi.getter
    def platform(self) -> str:
        """
        The target platform for a the build.
        """
        return pulumi.get(self, "platform")

    @property
    @pulumi.getter(name="sensorVersion")
    def sensor_version(self) -> str:
        """
        CrowdStrike Falcon Sensor version.
        """
        return pulumi.get(self, "sensor_version")

    @property
    @pulumi.getter
    def stage(self) -> str:
        """
        The stage for the build.
        """
        return pulumi.get(self, "stage")


@pulumi.output_type
class GetSensorUpdatePolicyBuildsLinuxArm64LatestResult(dict):
    def __init__(__self__, *,
                 build: str,
                 platform: str,
                 sensor_version: str,
                 stage: str):
        """
        :param str build: The build number for a specific sensor version.
        :param str platform: The target platform for a the build.
        :param str sensor_version: CrowdStrike Falcon Sensor version.
        :param str stage: The stage for the build.
        """
        pulumi.set(__self__, "build", build)
        pulumi.set(__self__, "platform", platform)
        pulumi.set(__self__, "sensor_version", sensor_version)
        pulumi.set(__self__, "stage", stage)

    @property
    @pulumi.getter
    def build(self) -> str:
        """
        The build number for a specific sensor version.
        """
        return pulumi.get(self, "build")

    @property
    @pulumi.getter
    def platform(self) -> str:
        """
        The target platform for a the build.
        """
        return pulumi.get(self, "platform")

    @property
    @pulumi.getter(name="sensorVersion")
    def sensor_version(self) -> str:
        """
        CrowdStrike Falcon Sensor version.
        """
        return pulumi.get(self, "sensor_version")

    @property
    @pulumi.getter
    def stage(self) -> str:
        """
        The stage for the build.
        """
        return pulumi.get(self, "stage")


@pulumi.output_type
class GetSensorUpdatePolicyBuildsLinuxArm64N1Result(dict):
    def __init__(__self__, *,
                 build: str,
                 platform: str,
                 sensor_version: str,
                 stage: str):
        """
        :param str build: The build number for a specific sensor version.
        :param str platform: The target platform for a the build.
        :param str sensor_version: CrowdStrike Falcon Sensor version.
        :param str stage: The stage for the build.
        """
        pulumi.set(__self__, "build", build)
        pulumi.set(__self__, "platform", platform)
        pulumi.set(__self__, "sensor_version", sensor_version)
        pulumi.set(__self__, "stage", stage)

    @property
    @pulumi.getter
    def build(self) -> str:
        """
        The build number for a specific sensor version.
        """
        return pulumi.get(self, "build")

    @property
    @pulumi.getter
    def platform(self) -> str:
        """
        The target platform for a the build.
        """
        return pulumi.get(self, "platform")

    @property
    @pulumi.getter(name="sensorVersion")
    def sensor_version(self) -> str:
        """
        CrowdStrike Falcon Sensor version.
        """
        return pulumi.get(self, "sensor_version")

    @property
    @pulumi.getter
    def stage(self) -> str:
        """
        The stage for the build.
        """
        return pulumi.get(self, "stage")


@pulumi.output_type
class GetSensorUpdatePolicyBuildsLinuxArm64N2Result(dict):
    def __init__(__self__, *,
                 build: str,
                 platform: str,
                 sensor_version: str,
                 stage: str):
        """
        :param str build: The build number for a specific sensor version.
        :param str platform: The target platform for a the build.
        :param str sensor_version: CrowdStrike Falcon Sensor version.
        :param str stage: The stage for the build.
        """
        pulumi.set(__self__, "build", build)
        pulumi.set(__self__, "platform", platform)
        pulumi.set(__self__, "sensor_version", sensor_version)
        pulumi.set(__self__, "stage", stage)

    @property
    @pulumi.getter
    def build(self) -> str:
        """
        The build number for a specific sensor version.
        """
        return pulumi.get(self, "build")

    @property
    @pulumi.getter
    def platform(self) -> str:
        """
        The target platform for a the build.
        """
        return pulumi.get(self, "platform")

    @property
    @pulumi.getter(name="sensorVersion")
    def sensor_version(self) -> str:
        """
        CrowdStrike Falcon Sensor version.
        """
        return pulumi.get(self, "sensor_version")

    @property
    @pulumi.getter
    def stage(self) -> str:
        """
        The stage for the build.
        """
        return pulumi.get(self, "stage")


@pulumi.output_type
class GetSensorUpdatePolicyBuildsLinuxLatestResult(dict):
    def __init__(__self__, *,
                 build: str,
                 platform: str,
                 sensor_version: str,
                 stage: str):
        """
        :param str build: The build number for a specific sensor version.
        :param str platform: The target platform for a the build.
        :param str sensor_version: CrowdStrike Falcon Sensor version.
        :param str stage: The stage for the build.
        """
        pulumi.set(__self__, "build", build)
        pulumi.set(__self__, "platform", platform)
        pulumi.set(__self__, "sensor_version", sensor_version)
        pulumi.set(__self__, "stage", stage)

    @property
    @pulumi.getter
    def build(self) -> str:
        """
        The build number for a specific sensor version.
        """
        return pulumi.get(self, "build")

    @property
    @pulumi.getter
    def platform(self) -> str:
        """
        The target platform for a the build.
        """
        return pulumi.get(self, "platform")

    @property
    @pulumi.getter(name="sensorVersion")
    def sensor_version(self) -> str:
        """
        CrowdStrike Falcon Sensor version.
        """
        return pulumi.get(self, "sensor_version")

    @property
    @pulumi.getter
    def stage(self) -> str:
        """
        The stage for the build.
        """
        return pulumi.get(self, "stage")


@pulumi.output_type
class GetSensorUpdatePolicyBuildsLinuxN1Result(dict):
    def __init__(__self__, *,
                 build: str,
                 platform: str,
                 sensor_version: str,
                 stage: str):
        """
        :param str build: The build number for a specific sensor version.
        :param str platform: The target platform for a the build.
        :param str sensor_version: CrowdStrike Falcon Sensor version.
        :param str stage: The stage for the build.
        """
        pulumi.set(__self__, "build", build)
        pulumi.set(__self__, "platform", platform)
        pulumi.set(__self__, "sensor_version", sensor_version)
        pulumi.set(__self__, "stage", stage)

    @property
    @pulumi.getter
    def build(self) -> str:
        """
        The build number for a specific sensor version.
        """
        return pulumi.get(self, "build")

    @property
    @pulumi.getter
    def platform(self) -> str:
        """
        The target platform for a the build.
        """
        return pulumi.get(self, "platform")

    @property
    @pulumi.getter(name="sensorVersion")
    def sensor_version(self) -> str:
        """
        CrowdStrike Falcon Sensor version.
        """
        return pulumi.get(self, "sensor_version")

    @property
    @pulumi.getter
    def stage(self) -> str:
        """
        The stage for the build.
        """
        return pulumi.get(self, "stage")


@pulumi.output_type
class GetSensorUpdatePolicyBuildsLinuxN2Result(dict):
    def __init__(__self__, *,
                 build: str,
                 platform: str,
                 sensor_version: str,
                 stage: str):
        """
        :param str build: The build number for a specific sensor version.
        :param str platform: The target platform for a the build.
        :param str sensor_version: CrowdStrike Falcon Sensor version.
        :param str stage: The stage for the build.
        """
        pulumi.set(__self__, "build", build)
        pulumi.set(__self__, "platform", platform)
        pulumi.set(__self__, "sensor_version", sensor_version)
        pulumi.set(__self__, "stage", stage)

    @property
    @pulumi.getter
    def build(self) -> str:
        """
        The build number for a specific sensor version.
        """
        return pulumi.get(self, "build")

    @property
    @pulumi.getter
    def platform(self) -> str:
        """
        The target platform for a the build.
        """
        return pulumi.get(self, "platform")

    @property
    @pulumi.getter(name="sensorVersion")
    def sensor_version(self) -> str:
        """
        CrowdStrike Falcon Sensor version.
        """
        return pulumi.get(self, "sensor_version")

    @property
    @pulumi.getter
    def stage(self) -> str:
        """
        The stage for the build.
        """
        return pulumi.get(self, "stage")


@pulumi.output_type
class GetSensorUpdatePolicyBuildsMacResult(dict):
    def __init__(__self__, *,
                 alls: Sequence['outputs.GetSensorUpdatePolicyBuildsMacAllResult'],
                 latest: 'outputs.GetSensorUpdatePolicyBuildsMacLatestResult',
                 n1: 'outputs.GetSensorUpdatePolicyBuildsMacN1Result',
                 n2: 'outputs.GetSensorUpdatePolicyBuildsMacN2Result'):
        """
        :param Sequence['GetSensorUpdatePolicyBuildsMacAllArgs'] alls: All sensor builds for the specific platform.
        :param 'GetSensorUpdatePolicyBuildsMacLatestArgs' latest: The latest sensor build.
        :param 'GetSensorUpdatePolicyBuildsMacN1Args' n1: The n-1 sensor build.
        :param 'GetSensorUpdatePolicyBuildsMacN2Args' n2: The n-2 sensor build.
        """
        pulumi.set(__self__, "alls", alls)
        pulumi.set(__self__, "latest", latest)
        pulumi.set(__self__, "n1", n1)
        pulumi.set(__self__, "n2", n2)

    @property
    @pulumi.getter
    def alls(self) -> Sequence['outputs.GetSensorUpdatePolicyBuildsMacAllResult']:
        """
        All sensor builds for the specific platform.
        """
        return pulumi.get(self, "alls")

    @property
    @pulumi.getter
    def latest(self) -> 'outputs.GetSensorUpdatePolicyBuildsMacLatestResult':
        """
        The latest sensor build.
        """
        return pulumi.get(self, "latest")

    @property
    @pulumi.getter
    def n1(self) -> 'outputs.GetSensorUpdatePolicyBuildsMacN1Result':
        """
        The n-1 sensor build.
        """
        return pulumi.get(self, "n1")

    @property
    @pulumi.getter
    def n2(self) -> 'outputs.GetSensorUpdatePolicyBuildsMacN2Result':
        """
        The n-2 sensor build.
        """
        return pulumi.get(self, "n2")


@pulumi.output_type
class GetSensorUpdatePolicyBuildsMacAllResult(dict):
    def __init__(__self__, *,
                 build: str,
                 platform: str,
                 sensor_version: str,
                 stage: str):
        """
        :param str build: The build number for a specific sensor version.
        :param str platform: The target platform for a the build.
        :param str sensor_version: CrowdStrike Falcon Sensor version.
        :param str stage: The stage for the build.
        """
        pulumi.set(__self__, "build", build)
        pulumi.set(__self__, "platform", platform)
        pulumi.set(__self__, "sensor_version", sensor_version)
        pulumi.set(__self__, "stage", stage)

    @property
    @pulumi.getter
    def build(self) -> str:
        """
        The build number for a specific sensor version.
        """
        return pulumi.get(self, "build")

    @property
    @pulumi.getter
    def platform(self) -> str:
        """
        The target platform for a the build.
        """
        return pulumi.get(self, "platform")

    @property
    @pulumi.getter(name="sensorVersion")
    def sensor_version(self) -> str:
        """
        CrowdStrike Falcon Sensor version.
        """
        return pulumi.get(self, "sensor_version")

    @property
    @pulumi.getter
    def stage(self) -> str:
        """
        The stage for the build.
        """
        return pulumi.get(self, "stage")


@pulumi.output_type
class GetSensorUpdatePolicyBuildsMacLatestResult(dict):
    def __init__(__self__, *,
                 build: str,
                 platform: str,
                 sensor_version: str,
                 stage: str):
        """
        :param str build: The build number for a specific sensor version.
        :param str platform: The target platform for a the build.
        :param str sensor_version: CrowdStrike Falcon Sensor version.
        :param str stage: The stage for the build.
        """
        pulumi.set(__self__, "build", build)
        pulumi.set(__self__, "platform", platform)
        pulumi.set(__self__, "sensor_version", sensor_version)
        pulumi.set(__self__, "stage", stage)

    @property
    @pulumi.getter
    def build(self) -> str:
        """
        The build number for a specific sensor version.
        """
        return pulumi.get(self, "build")

    @property
    @pulumi.getter
    def platform(self) -> str:
        """
        The target platform for a the build.
        """
        return pulumi.get(self, "platform")

    @property
    @pulumi.getter(name="sensorVersion")
    def sensor_version(self) -> str:
        """
        CrowdStrike Falcon Sensor version.
        """
        return pulumi.get(self, "sensor_version")

    @property
    @pulumi.getter
    def stage(self) -> str:
        """
        The stage for the build.
        """
        return pulumi.get(self, "stage")


@pulumi.output_type
class GetSensorUpdatePolicyBuildsMacN1Result(dict):
    def __init__(__self__, *,
                 build: str,
                 platform: str,
                 sensor_version: str,
                 stage: str):
        """
        :param str build: The build number for a specific sensor version.
        :param str platform: The target platform for a the build.
        :param str sensor_version: CrowdStrike Falcon Sensor version.
        :param str stage: The stage for the build.
        """
        pulumi.set(__self__, "build", build)
        pulumi.set(__self__, "platform", platform)
        pulumi.set(__self__, "sensor_version", sensor_version)
        pulumi.set(__self__, "stage", stage)

    @property
    @pulumi.getter
    def build(self) -> str:
        """
        The build number for a specific sensor version.
        """
        return pulumi.get(self, "build")

    @property
    @pulumi.getter
    def platform(self) -> str:
        """
        The target platform for a the build.
        """
        return pulumi.get(self, "platform")

    @property
    @pulumi.getter(name="sensorVersion")
    def sensor_version(self) -> str:
        """
        CrowdStrike Falcon Sensor version.
        """
        return pulumi.get(self, "sensor_version")

    @property
    @pulumi.getter
    def stage(self) -> str:
        """
        The stage for the build.
        """
        return pulumi.get(self, "stage")


@pulumi.output_type
class GetSensorUpdatePolicyBuildsMacN2Result(dict):
    def __init__(__self__, *,
                 build: str,
                 platform: str,
                 sensor_version: str,
                 stage: str):
        """
        :param str build: The build number for a specific sensor version.
        :param str platform: The target platform for a the build.
        :param str sensor_version: CrowdStrike Falcon Sensor version.
        :param str stage: The stage for the build.
        """
        pulumi.set(__self__, "build", build)
        pulumi.set(__self__, "platform", platform)
        pulumi.set(__self__, "sensor_version", sensor_version)
        pulumi.set(__self__, "stage", stage)

    @property
    @pulumi.getter
    def build(self) -> str:
        """
        The build number for a specific sensor version.
        """
        return pulumi.get(self, "build")

    @property
    @pulumi.getter
    def platform(self) -> str:
        """
        The target platform for a the build.
        """
        return pulumi.get(self, "platform")

    @property
    @pulumi.getter(name="sensorVersion")
    def sensor_version(self) -> str:
        """
        CrowdStrike Falcon Sensor version.
        """
        return pulumi.get(self, "sensor_version")

    @property
    @pulumi.getter
    def stage(self) -> str:
        """
        The stage for the build.
        """
        return pulumi.get(self, "stage")


@pulumi.output_type
class GetSensorUpdatePolicyBuildsWindowsResult(dict):
    def __init__(__self__, *,
                 alls: Sequence['outputs.GetSensorUpdatePolicyBuildsWindowsAllResult'],
                 latest: 'outputs.GetSensorUpdatePolicyBuildsWindowsLatestResult',
                 n1: 'outputs.GetSensorUpdatePolicyBuildsWindowsN1Result',
                 n2: 'outputs.GetSensorUpdatePolicyBuildsWindowsN2Result'):
        """
        :param Sequence['GetSensorUpdatePolicyBuildsWindowsAllArgs'] alls: All sensor builds for the specific platform.
        :param 'GetSensorUpdatePolicyBuildsWindowsLatestArgs' latest: The latest sensor build.
        :param 'GetSensorUpdatePolicyBuildsWindowsN1Args' n1: The n-1 sensor build.
        :param 'GetSensorUpdatePolicyBuildsWindowsN2Args' n2: The n-2 sensor build.
        """
        pulumi.set(__self__, "alls", alls)
        pulumi.set(__self__, "latest", latest)
        pulumi.set(__self__, "n1", n1)
        pulumi.set(__self__, "n2", n2)

    @property
    @pulumi.getter
    def alls(self) -> Sequence['outputs.GetSensorUpdatePolicyBuildsWindowsAllResult']:
        """
        All sensor builds for the specific platform.
        """
        return pulumi.get(self, "alls")

    @property
    @pulumi.getter
    def latest(self) -> 'outputs.GetSensorUpdatePolicyBuildsWindowsLatestResult':
        """
        The latest sensor build.
        """
        return pulumi.get(self, "latest")

    @property
    @pulumi.getter
    def n1(self) -> 'outputs.GetSensorUpdatePolicyBuildsWindowsN1Result':
        """
        The n-1 sensor build.
        """
        return pulumi.get(self, "n1")

    @property
    @pulumi.getter
    def n2(self) -> 'outputs.GetSensorUpdatePolicyBuildsWindowsN2Result':
        """
        The n-2 sensor build.
        """
        return pulumi.get(self, "n2")


@pulumi.output_type
class GetSensorUpdatePolicyBuildsWindowsAllResult(dict):
    def __init__(__self__, *,
                 build: str,
                 platform: str,
                 sensor_version: str,
                 stage: str):
        """
        :param str build: The build number for a specific sensor version.
        :param str platform: The target platform for a the build.
        :param str sensor_version: CrowdStrike Falcon Sensor version.
        :param str stage: The stage for the build.
        """
        pulumi.set(__self__, "build", build)
        pulumi.set(__self__, "platform", platform)
        pulumi.set(__self__, "sensor_version", sensor_version)
        pulumi.set(__self__, "stage", stage)

    @property
    @pulumi.getter
    def build(self) -> str:
        """
        The build number for a specific sensor version.
        """
        return pulumi.get(self, "build")

    @property
    @pulumi.getter
    def platform(self) -> str:
        """
        The target platform for a the build.
        """
        return pulumi.get(self, "platform")

    @property
    @pulumi.getter(name="sensorVersion")
    def sensor_version(self) -> str:
        """
        CrowdStrike Falcon Sensor version.
        """
        return pulumi.get(self, "sensor_version")

    @property
    @pulumi.getter
    def stage(self) -> str:
        """
        The stage for the build.
        """
        return pulumi.get(self, "stage")


@pulumi.output_type
class GetSensorUpdatePolicyBuildsWindowsLatestResult(dict):
    def __init__(__self__, *,
                 build: str,
                 platform: str,
                 sensor_version: str,
                 stage: str):
        """
        :param str build: The build number for a specific sensor version.
        :param str platform: The target platform for a the build.
        :param str sensor_version: CrowdStrike Falcon Sensor version.
        :param str stage: The stage for the build.
        """
        pulumi.set(__self__, "build", build)
        pulumi.set(__self__, "platform", platform)
        pulumi.set(__self__, "sensor_version", sensor_version)
        pulumi.set(__self__, "stage", stage)

    @property
    @pulumi.getter
    def build(self) -> str:
        """
        The build number for a specific sensor version.
        """
        return pulumi.get(self, "build")

    @property
    @pulumi.getter
    def platform(self) -> str:
        """
        The target platform for a the build.
        """
        return pulumi.get(self, "platform")

    @property
    @pulumi.getter(name="sensorVersion")
    def sensor_version(self) -> str:
        """
        CrowdStrike Falcon Sensor version.
        """
        return pulumi.get(self, "sensor_version")

    @property
    @pulumi.getter
    def stage(self) -> str:
        """
        The stage for the build.
        """
        return pulumi.get(self, "stage")


@pulumi.output_type
class GetSensorUpdatePolicyBuildsWindowsN1Result(dict):
    def __init__(__self__, *,
                 build: str,
                 platform: str,
                 sensor_version: str,
                 stage: str):
        """
        :param str build: The build number for a specific sensor version.
        :param str platform: The target platform for a the build.
        :param str sensor_version: CrowdStrike Falcon Sensor version.
        :param str stage: The stage for the build.
        """
        pulumi.set(__self__, "build", build)
        pulumi.set(__self__, "platform", platform)
        pulumi.set(__self__, "sensor_version", sensor_version)
        pulumi.set(__self__, "stage", stage)

    @property
    @pulumi.getter
    def build(self) -> str:
        """
        The build number for a specific sensor version.
        """
        return pulumi.get(self, "build")

    @property
    @pulumi.getter
    def platform(self) -> str:
        """
        The target platform for a the build.
        """
        return pulumi.get(self, "platform")

    @property
    @pulumi.getter(name="sensorVersion")
    def sensor_version(self) -> str:
        """
        CrowdStrike Falcon Sensor version.
        """
        return pulumi.get(self, "sensor_version")

    @property
    @pulumi.getter
    def stage(self) -> str:
        """
        The stage for the build.
        """
        return pulumi.get(self, "stage")


@pulumi.output_type
class GetSensorUpdatePolicyBuildsWindowsN2Result(dict):
    def __init__(__self__, *,
                 build: str,
                 platform: str,
                 sensor_version: str,
                 stage: str):
        """
        :param str build: The build number for a specific sensor version.
        :param str platform: The target platform for a the build.
        :param str sensor_version: CrowdStrike Falcon Sensor version.
        :param str stage: The stage for the build.
        """
        pulumi.set(__self__, "build", build)
        pulumi.set(__self__, "platform", platform)
        pulumi.set(__self__, "sensor_version", sensor_version)
        pulumi.set(__self__, "stage", stage)

    @property
    @pulumi.getter
    def build(self) -> str:
        """
        The build number for a specific sensor version.
        """
        return pulumi.get(self, "build")

    @property
    @pulumi.getter
    def platform(self) -> str:
        """
        The target platform for a the build.
        """
        return pulumi.get(self, "platform")

    @property
    @pulumi.getter(name="sensorVersion")
    def sensor_version(self) -> str:
        """
        CrowdStrike Falcon Sensor version.
        """
        return pulumi.get(self, "sensor_version")

    @property
    @pulumi.getter
    def stage(self) -> str:
        """
        The stage for the build.
        """
        return pulumi.get(self, "stage")


