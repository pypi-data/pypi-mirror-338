 SystemMessage 
You are a precise browser automation agent that interacts with websites through structured commands. Your role is to:
1. Analyze the provided webpage elements and structure
2. Plan a sequence of actions to accomplish the given task
3. Respond with valid JSON containing your action sequence and state assessment

Current date and time: 2025-04-04 14:31


INPUT STRUCTURE:
1. Current URL: The webpage you're currently on
2. Available Tabs: List of open browser tabs
3. Interactive Elements: List in the format:
   index[:]<element_type>element_text</element_type>
   - index: Numeric identifier for interaction
   - element_type: HTML element type (button, input, etc.)
   - element_text: Visible text or element description

Example:
33[:]<button>Submit Form</button>
_[:] Non-interactive text


Notes:
- Only elements with numeric indexes are interactive
- _[:] elements provide context but cannot be interacted with



1. RESPONSE FORMAT: You must ALWAYS respond with valid JSON in this exact format:
   {
     "current_state": {
       "evaluation_previous_goal": "Success|Failed|Unknown - Analyze the current elements and the image to check if the previous goals/actions are successful like intended by the task. Ignore the action result. The website is the ground truth. Also mention if something unexpected happened like new suggestions in an input field. Shortly state why/why not",
       "memory": "Description of what has been done and what you need to remember until the end of the task",
       "next_goal": "What needs to be done with the next actions"
     },
     "action": [
       {
         "one_action_name": {
           // action-specific parameter
         }
       },
       // ... more actions in sequence
     ]
   }

2. ACTIONS: You can specify multiple actions in the list to be executed in sequence. But always specify only one action name per item.

   Common action sequences:
   - Form filling: [
       {"input_text": {"index": 1, "text": "username"}},
       {"input_text": {"index": 2, "text": "password"}},
       {"click_element": {"index": 3}},
     ]
   - Navigation and extraction: [
       {"open_new_tab": {}},
       {"go_to_url": {"url": http://localhost:8080/now/workflow-studio/home/process}},
       {"extract_page_content": {}}
     ]
   - Custom prompt mapping:Use custom prompt with the following mapping:[
    {"prompt": "log in", "action": "Openhttp://localhost:8080/now/workflow-studio/home/process, then wait for page to load, reload the page. login with username: a, password: b then click on login button."}
    {"prompt": "login with username 'a' and password 'b'", "action": "Openhttp://localhost:8080/now/workflow-studio/home/process, then wait for page to load, reload the page. login with username: a, password: b then click on login button."},
    {"prompt": "enter a unique flow name", "action": "Enter a flow name: 'demo flow'+ date + time(in seconds) at the moment"},
    {"prompt": "create a flow", "action": "wait for 5 more seconds and click on the + 'Create' button on the top left, wait for 5 seconds and click on 'flow' button."}]

   - Text presence checking: [
       {"check_text_presence": {"text": "abc", "case_sensitive": false}},
       {"done": {"result": "Text 'abc' found on page"}}
     ]
     If the text is not found, the action will fail with an error message.

3. ELEMENT INTERACTION:
   - Only use indexes that exist in the provided element list
   - Each element has a unique index number (e.g., "33[:]<button>")
   - Elements marked with "_[:]" are non-interactive (for context only)

4. NAVIGATION & ERROR HANDLING:
   - If no suitable elements exist, use other functions to complete the task
   - If stuck, try alternative approaches
   - Handle popups/cookies by accepting or closing them
   - Use scroll to find elements you are looking for

5. TASK COMPLETION:
   - Use the done action as the last action as soon as the task is complete
   - Don't hallucinate actions
   - If the task requires specific information - make sure to include everything in the done function. This is what the user will see.
   - If you are running out of steps (current step), think about speeding it up, and ALWAYS use the done action as the last action.

6. VISUAL CONTEXT:
   - When an image is provided, use it to understand the page layout
   - Bounding boxes with labels correspond to element indexes
   - Each bounding box and its label have the same color
   - Most often the label is inside the bounding box, on the top right
   - Visual context helps verify element locations and relationships
   - sometimes labels overlap, so use the context to verify the correct element

7. TEXT PRESENCE CHECKING:
   - Use the check_text_presence action to verify if specific text exists on the page
   - The check is case-insensitive by default (can be made case-sensitive)
   - If the text is not found, the action will fail
   - This works like a hard assertion - the task will fail if the text is not present
   - Example: To check if "Login" is present (case-insensitive):
     {"check_text_presence": {"text": "Login", "case_sensitive": false}}

8. Form filling:
   - If you fill an input field and your action sequence is interrupted, most often a list with suggestions popped up under the field and you need to first select the right element from the suggestion list.

9. ACTION SEQUENCING:
   - Actions are executed in the order they appear in the list
   - Each action should logically follow from the previous one
   - If the page changes after an action, the sequence is interrupted and you get the new state.
   - If content only disappears the sequence continues.
   - Only provide the action sequence until you think the page will change.
   - Try to be efficient, e.g. fill forms at once, or chain actions where nothing changes on the page like saving, extracting, checkboxes...
   - only use multiple actions if it makes sense.

10. SELENIUM SCRIPT GENERATION:
   - At the end of the task, generate a Selenium Java script for all the successful actions performed during the task.
   - The script should include:
     - Browser initialization
     - URL navigation
     - Element interaction (e.g., clicking, form filling)
     - Handling errors, delays, and waits if needed
   - Use XPath or CSS selectors based on the element index if specified.
   - Make sure the script is well-commented and ready for execution.
   - Example:
```java
   import org.openqa.selenium.By;
   import org.openqa.selenium.WebDriver;
   import org.openqa.selenium.WebElement;
   import org.openqa.selenium.chrome.ChromeDriver;
   import java.util.concurrent.TimeUnit;

   public class WebAutomation {
       public static void main(String[] args) {
           // Set Chrome driver path
           System.setProperty("webdriver.chrome.driver", "/path/to/chromedriver");

           // Initialize WebDriver
           WebDriver driver = new ChromeDriver();
           driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

           // Open URL
           driver.get("https://example.com");

           // Fill in username
           WebElement username = driver.findElement(By.xpath("//input[@id='username']"));
           username.sendKeys("myusername");

           // Fill in password
           WebElement password = driver.findElement(By.xpath("//input[@id='password']"));
           password.sendKeys("mypassword");

           // Click login button
           WebElement loginButton = driver.findElement(By.xpath("//button[@id='login']"));
           loginButton.click();

           // Close the browser
           driver.quit();
       }
   }


   - use maximum 10 actions per sequence

Functions:
Complete task: 
{done: {'text': {'type': 'string'}}}
Search Google in the current tab: 
{search_google: {'query': {'type': 'string'}}}
Navigate to URL in the current tab: 
{go_to_url: {'url': {'type': 'string'}}}
Go back: 
{go_back: {}}
Click element: 
{click_element: {'index': {'type': 'integer'}, 'xpath': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}}}
Input text into a input interactive element: 
{input_text: {'index': {'type': 'integer'}, 'text': {'type': 'string'}, 'xpath': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None}}}
Switch tab: 
{switch_tab: {'page_id': {'type': 'integer'}}}
Open url in new tab: 
{open_tab: {'url': {'type': 'string'}}}
Extract page content to get the pure text or markdown with links if include_links is set to true: 
{extract_content: {'include_links': {'type': 'boolean'}}}
Scroll down the page by pixel amount - if no amount is specified, scroll down one page: 
{scroll_down: {'amount': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None}}}
Scroll up the page by pixel amount - if no amount is specified, scroll up one page: 
{scroll_up: {'amount': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'default': None}}}
Send strings of special keys like Backspace, Insert, PageDown, Delete, Enter, Shortcuts such as `Control+o`, `Control+Shift+T` are supported as well. This gets used in keyboard.press. Be aware of different operating systems and their shortcuts: 
{send_keys: {'keys': {'type': 'string'}}}
If you dont find something which you want to interact with, scroll to it: 
{scroll_to_text: {'text': {'type': 'string'}}}
Get all options from a native dropdown: 
{get_dropdown_options: {'index': {'type': 'integer'}}}
Select dropdown option for interactive element index by the text of the option you want to select: 
{select_dropdown_option: {'index': {'type': 'integer'}, 'text': {'type': 'string'}}}

Remember: Your responses must be valid JSON matching the specified format. Each action in the sequence must be valid.

 HumanMessage 
Your ultimate task is: login with username: admin, password: admin, click on 'New' button and check if 'Flow' tab is present. If you achieved your ultimate task, stop everything and use the done action in the next step to complete the task. If not, continue as usual.

 AIMessage 


 ToolMessage 
Browser started

 AIMessage 


 ToolMessage 


 HumanMessage 
Action result: 🔗  Navigated to http://localhost:8080

 HumanMessage 
Action error: s': {'jailbreak': {'filtered': True, 'detected': True}}}, 'code': 'content_filter', 'message': "The response was filtered due to the prompt triggering Azure OpenAI's content management policy. Please modify your prompt and retry. To learn more about our content filtering policies please read our documentation: \r\nhttps://go.microsoft.com/fwlink/?linkid=2198766.", 'param': 'prompt', 'type': None}}

 AIMessage 


 ToolMessage 


 HumanMessage 
Action result: ⌨️  Input "admin" into index 1

 HumanMessage 
Action result: ⌨️  Input "admin" into index 3

 HumanMessage 
Action result: 🖱️  Clicked button with index 5: Log in

 AIMessage 


 ToolMessage 


 HumanMessage 
Action result: 🖱️  Clicked button with index 4: Favorites

 AIMessage 


 ToolMessage 


 AIMessage 


 ToolMessage 


 HumanMessage 
Action result: ⌨️  Input "Flow" into index 12

 HumanMessage 
Action result: ⌨️  Sent keys: Enter

 AIMessage 


 ToolMessage 


 AIMessage 


 ToolMessage 


 HumanMessage 
Action result: 🖱️  Clicked button with index 16:

 AIMessage 


 ToolMessage 


 HumanMessage 
Action result: 🔍  Scrolled down the page by 500 pixels

 AIMessage 


 ToolMessage 


 HumanMessage 
Action result: 🖱️  Clicked button with index 6: Admin

 AIMessage 


 ToolMessage 


 HumanMessage 
Action result: ⌨️  Input "Flow" into index 3

 HumanMessage 
Action result: ⌨️  Sent keys: Enter

 AIMessage 


 ToolMessage 


 HumanMessage 
Action result: 🖱️  Clicked button with index 9: Admin

 AIMessage 


 ToolMessage 


 HumanMessage 
Action result: 🔍  Searched for "ServiceNow create new flow" in Google

 HumanMessage 
Current url: https://www.google.com/search?q=ServiceNow%20create%20new%20flow&udm=14&sei=BKDvZ5aUMu6d4-EPzf2p6QE
Available tabs:
[TabInfo(page_id=0, url='https://www.google.com/search?q=ServiceNow%20create%20new%20flow&udm=14&sei=BKDvZ5aUMu6d4-EPzf2p6QE', title='ServiceNow create new flow - Google Search')]
Interactive elements from current page view:
[Start of page]
_[:]Accessibility links
_[:]Skip to main content
_[:]Accessibility help
_[:]Accessibility feedback
0[:]<a title="Go to Google Home"></a>
1[:]<textarea value="ServiceNow create new flow" aria-label="Search" placeholder="" aria-expanded="false" name="q" role="combobox"></textarea>
2[:]<div tabindex="0" aria-label="Clear" role="button"></div>
3[:]<div aria-label="Search by voice" role="button" tabindex="0"></div>
4[:]<div aria-label="Search by image" role="button" tabindex="0"></div>
5[:]<button aria-label="Search" type="submit"></button>
6[:]<div aria-label="Settings" role="button" tabindex="0"></div>
7[:]<a aria-label="Google apps" aria-expanded="false" role="button" tabindex="0"></a>
8[:]<a aria-label="Sign in">Sign in</a>
_[:]Filters and topics
9[:]<a role="link">All</a>
10[:]<a role="link">Videos</a>
11[:]<a role="link">Images</a>
12[:]<a role="link">Forums</a>
13[:]<a role="link">Short videos</a>
14[:]<a role="link" tabindex="-1">Web</a>
15[:]<a role="link">Flights</a>
16[:]<div aria-expanded="false" role="button" tabindex="0">More</div>
17[:]<div aria-expanded="false" role="button" tabindex="0">Tools</div>
_[:]Search Results
18[:]<a >Creating Flows
ServiceNow
https://developer.servicenow.com
› dev</a>
19[:]<img alt=""></img>
20[:]<div aria-label="About this result" role="button" tabindex="0"></div>
_[:]To create a flow from the Flow Designer landing page,
_[:]click the New button, then select the Flow menu item
_[:]. To create a flow from other Flow Designer tabs, ...
21[:]<a >Create a flow
ServiceNow
https://www.servicenow.com
› ... › Building flows</a>
22[:]<img alt=""></img>
23[:]<div aria-label="About this result" role="button" tabindex="0"></div>
_[:]Create a flow ·
_[:]Navigate to All > Process Automation > Flow Designer
_[:]. · Click New > Flow. · On the Flow Properties screen, fill in the fields. Search: · Click ...
24[:]<a >Set Up a Flow in ServiceNow
Akeyless
https://docs.akeyless.io
› docs › set-up-a-flow-in-service...</a>
25[:]<img alt=""></img>
26[:]<div aria-label="About this result" role="button" tabindex="0"></div>
_[:]Creating a flow in ServiceNow involves
_[:]using the Flow Designer
_[:], a powerful tool that allows you to automate processes and tasks within your ServiceNow ...
27[:]<a >Create a flow in Workflow Studio
ServiceNow
https://www.servicenow.com
› ... › Building flows</a>
28[:]<img alt=""></img>
29[:]<div aria-label="About this result" role="button" tabindex="0"></div>
_[:]Chapters ·
_[:]Navigate to All > Process Automation > Workflow Studio
_[:]. · From the Workflow Studio home page, select New > Flow. · Select whether to build the flow ...
30[:]<a ></a>
31[:]<img alt=""></img>
32[:]<div aria-label="About this result" role="button" tabindex="0"></div>
33[:]<a ></a>
34[:]<img alt=""></img>
35[:]<div aria-label="About this result" role="button" tabindex="0"></div>
36[:]<a ></a>
37[:]<img alt=""></img>
38[:]<div aria-label="About this result" role="button" tabindex="0"></div>
39[:]<img alt=""></img>
40[:]<div aria-label="About this result" role="button" tabindex="0"></div>
... 1100 pixels below - scroll or extract content to see more ...

 RESPONSE
{
  "current_state": {
    "evaluation_previous_goal": "Success - Retrieved relevant search results about creating new flow.",
    "memory": "Google search results show tutorials and references to creating new flow.",
    "next_goal": "Click first result leading to ServiceNow site to find more accurate tutorial about creating new flow."
  },
  "action": [
    {
      "click_element": {
        "index": 18
      }
    }
  ]
}