# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
import typing
from .thread_item import ThreadItem
import pydantic
from ...types.count import Count
from ...types.limit import Limit
from ...types.last_key import LastKey
from ...core.pydantic_utilities import IS_PYDANTIC_V2


class ListThreadsResponse(UniversalBaseModel):
    """
    Examples
    --------
    import datetime

    from agentmail.threads import ListThreadsResponse, ThreadItem

    ListThreadsResponse(
        threads=[
            ThreadItem(
                thread_id="thread_123",
                event_id="event_123",
                labels=["RECEIVED", "UNREAD"],
                timestamp=datetime.datetime.fromisoformat(
                    "2024-01-15 09:30:00+00:00",
                ),
                senders=["alice@example.com", "bob@example.com"],
                recipients=["alice@example.com", "bob@example.com"],
                message_count=3,
                subject="Project Discussion",
                preview="Let's review the timeline for...",
            ),
            ThreadItem(
                thread_id="thread_456",
                event_id="event_456",
                labels=["SENT"],
                timestamp=datetime.datetime.fromisoformat(
                    "2024-01-15 10:15:00+00:00",
                ),
                senders=["charlie@example.com"],
                recipients=["david@example.com"],
                message_count=1,
                subject="Weekly Update",
                preview="Here's what we accomplished...",
            ),
        ],
        limit=10,
        count=2,
        last_key="thread_456#2024-01-15T10:15:00Z",
    )
    """

    threads: typing.List[ThreadItem] = pydantic.Field()
    """
    Thread items. Ordered by `updated_at` descending.
    """

    count: Count
    limit: typing.Optional[Limit] = None
    last_key: typing.Optional[LastKey] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
