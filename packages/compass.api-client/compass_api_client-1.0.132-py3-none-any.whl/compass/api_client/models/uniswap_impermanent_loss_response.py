# coding: utf-8

"""
    Compass API

    #### Welcome to the DeFi API from [Compass Labs](https://www.compasslabs.ai)!  Our API allows you to interact and transact in DeFi with ease.  We help you construct your transactions via a **simple REST API**.   You maintain custody at all times and **sign** all transactions **yourself**.

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Union
from compass.api_client.models.token0_token1 import Token0Token1
from typing import Optional, Set
from typing_extensions import Self

class UniswapImpermanentLossResponse(BaseModel):
    """
    UniswapImpermanentLossResponse
    """ # noqa: E501
    impermanent_loss: Union[StrictFloat, StrictInt] = Field(description="The impermanent loss of the position. This is the difference between the value of tokens if you had just held them and the value of the tokens currently in the LP position.")
    total_fees_earned_in_usd: Union[StrictFloat, StrictInt] = Field(description="The total fees earned in the liquidity position in USD.")
    fees_earned: Token0Token1 = Field(description="The fees earned in the portions of token0 and token1 separately, in units of token0 and token1.")
    current_lp: Token0Token1 = Field(description="The current amount of token0 and token1 in the liquidity position in the units of token0 and token1.")
    initial_lp: Token0Token1 = Field(description="The initial amount of token0 and token1 supplied to the liquidity position in the units of token0 and token1.")
    initial_value_in_usd: Union[StrictFloat, StrictInt] = Field(description="The initial value in USD of the liquidity position calculated using the historical price at the time of supplying.")
    current_value_in_usd: Union[StrictFloat, StrictInt] = Field(description="The current value of the liquidity position in USD calculated using the current price.")
    hold_value_in_usd: Union[StrictFloat, StrictInt] = Field(description="The value of the tokens in USD if you had just held them.")
    __properties: ClassVar[List[str]] = ["impermanent_loss", "total_fees_earned_in_usd", "fees_earned", "current_lp", "initial_lp", "initial_value_in_usd", "current_value_in_usd", "hold_value_in_usd"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UniswapImpermanentLossResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of fees_earned
        if self.fees_earned:
            _dict['fees_earned'] = self.fees_earned.to_dict()
        # override the default output from pydantic by calling `to_dict()` of current_lp
        if self.current_lp:
            _dict['current_lp'] = self.current_lp.to_dict()
        # override the default output from pydantic by calling `to_dict()` of initial_lp
        if self.initial_lp:
            _dict['initial_lp'] = self.initial_lp.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UniswapImpermanentLossResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "impermanent_loss": obj.get("impermanent_loss"),
            "total_fees_earned_in_usd": obj.get("total_fees_earned_in_usd"),
            "fees_earned": Token0Token1.from_dict(obj["fees_earned"]) if obj.get("fees_earned") is not None else None,
            "current_lp": Token0Token1.from_dict(obj["current_lp"]) if obj.get("current_lp") is not None else None,
            "initial_lp": Token0Token1.from_dict(obj["initial_lp"]) if obj.get("initial_lp") is not None else None,
            "initial_value_in_usd": obj.get("initial_value_in_usd"),
            "current_value_in_usd": obj.get("current_value_in_usd"),
            "hold_value_in_usd": obj.get("hold_value_in_usd")
        })
        return _obj


