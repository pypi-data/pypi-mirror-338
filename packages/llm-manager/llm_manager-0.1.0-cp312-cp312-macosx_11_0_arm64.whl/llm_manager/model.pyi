from abc import ABC, abstractmethod
from llm_manager.message import Message, MessageRole
from llm_manager.modal import LLMStatus, LLModal
from llm_manager.prompt import PromptManager
from llm_manager.tools import Tools
from pydantic import BaseModel, Field
from typing import Any, Iterator, TypeVar

OutputType = TypeVar('OutputType')

class LLModel(BaseModel):
    _pretty: bool = False
    _prompt_manager: PromptManager
    _llm: LLModal
    def __init__(self, **data: Any) -> None: ...
    @property
    @abstractmethod
    def _section(self) -> str: ...
    @property
    def hyperparameter(self) -> dict[str, Any]: ...
    def _stream(self, output: Iterator[str]) -> Iterator[OutputType]: ...
    def clear(self) -> None: ...
    def close(self) -> None: ...
    @property
    def status(self) -> LLMStatus: ...
    def prompt(self, **kwargs) -> str: ...
    @property
    def kwargs(self) -> dict[str, Any]: ...
    def parser(self, output: str) -> OutputType: ...
    def pretty_parser(self, output: str) -> OutputType: ...
    def _parser(self, output: str) -> OutputType: ...
    def add_message(self, role: MessageRole, content: str) -> None: ...
    @property
    def history(self) -> list[Message]: ...
    @property
    def user_turns(self) -> int: ...
    def _reload(self, **kwargs: Any) -> None: ...
    def run(self, retry: bool = False, pretty: bool | None = None, **kwargs: Any) -> OutputType | Iterator[OutputType]: ...

class VLModel(LLModel, ABC):
    images: list[str] = Field(default_factory=list)
    video: list[str] = Field(default_factory=list)
    @property
    def hyperparameter(self) -> dict[str, Any]: ...
    def clear(self) -> None: ...
    @property
    def kwargs(self) -> dict[str, Any]: ...
    def _reload(self, **kwargs: Any) -> None: ...

class TLModel(LLModel, ABC):
    tools: Tools = Field(default_factory=Tools)
    @property
    def hyperparameter(self) -> dict[str, Any]: ...
    def clear(self) -> None: ...
    @property
    def kwargs(self) -> dict[str, Any]: ...
    def _reload(self, **kwargs: Any) -> None: ...
