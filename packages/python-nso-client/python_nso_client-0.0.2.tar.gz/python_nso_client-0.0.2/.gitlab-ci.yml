# You can override the included template(s) by including variable overrides
# SAST customization: https://docs.gitlab.com/ee/user/application_security/sast/#customizing-the-sast-settings
# Secret Detection customization: https://docs.gitlab.com/ee/user/application_security/secret_detection/pipeline/#customization
# Dependency Scanning customization: https://docs.gitlab.com/ee/user/application_security/dependency_scanning/#customizing-the-dependency-scanning-settings
# Container Scanning customization: https://docs.gitlab.com/ee/user/application_security/container_scanning/#customizing-the-container-scanning-settings
# Note that environment variables can be set in several places
# See https://docs.gitlab.com/ee/ci/variables/#cicd-variable-precedence
stages:
- test
- build
- deploy

include:
- template: Security/SAST.gitlab-ci.yml

sast:
  stage: test

lint-ruff:
  stage: test
  image: ghcr.io/astral-sh/ruff:alpine
  script:
    - ruff check
    - ruff format --diff

test-pytest:
  stage: test
  image: ghcr.io/astral-sh/uv:alpine
  script:
    - uv sync
    - uv run pytest --showlocals
  artifacts:
    when: always
    paths:
      - report.xml
      - coverage.xml
      - htmlcov
    reports:
      junit: report.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml


publish-release:
  stage: build
  image: ghcr.io/astral-sh/uv:alpine
  dependencies:
    - lint-ruff
    - test-pytest
  rules:
    - if: $CI_COMMIT_TAG
      when: on_success

  environment:
    name: release
  # id_tokens:
  #   UV_PUBLISH_TOKEN:
  #     aud: pypi
  script:
    - uv build
    - uv publish --token "$PYPI_TOKEN"
