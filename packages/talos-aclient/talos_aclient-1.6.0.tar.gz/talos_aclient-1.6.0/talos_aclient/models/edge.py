# coding: utf-8

"""
    Talos

    FastAPI Best Architecture

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Edge(BaseModel):
    """
    Edge
    """ # noqa: E501
    id: StrictStr
    source_id: StrictStr
    source_name: Optional[StrictStr] = None
    source_label_id: Optional[StrictStr] = None
    target_id: StrictStr
    target_name: Optional[StrictStr] = None
    target_label_id: Optional[StrictStr] = None
    label_id: Optional[StrictStr] = None
    label_name: Optional[StrictStr] = None
    properties: Optional[Dict[str, Any]] = None
    __properties: ClassVar[List[str]] = ["id", "source_id", "source_name", "source_label_id", "target_id", "target_name", "target_label_id", "label_id", "label_name", "properties"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Edge from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if source_name (nullable) is None
        # and model_fields_set contains the field
        if self.source_name is None and "source_name" in self.model_fields_set:
            _dict['source_name'] = None

        # set to None if source_label_id (nullable) is None
        # and model_fields_set contains the field
        if self.source_label_id is None and "source_label_id" in self.model_fields_set:
            _dict['source_label_id'] = None

        # set to None if target_name (nullable) is None
        # and model_fields_set contains the field
        if self.target_name is None and "target_name" in self.model_fields_set:
            _dict['target_name'] = None

        # set to None if target_label_id (nullable) is None
        # and model_fields_set contains the field
        if self.target_label_id is None and "target_label_id" in self.model_fields_set:
            _dict['target_label_id'] = None

        # set to None if label_id (nullable) is None
        # and model_fields_set contains the field
        if self.label_id is None and "label_id" in self.model_fields_set:
            _dict['label_id'] = None

        # set to None if label_name (nullable) is None
        # and model_fields_set contains the field
        if self.label_name is None and "label_name" in self.model_fields_set:
            _dict['label_name'] = None

        # set to None if properties (nullable) is None
        # and model_fields_set contains the field
        if self.properties is None and "properties" in self.model_fields_set:
            _dict['properties'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Edge from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "source_id": obj.get("source_id"),
            "source_name": obj.get("source_name"),
            "source_label_id": obj.get("source_label_id"),
            "target_id": obj.get("target_id"),
            "target_name": obj.get("target_name"),
            "target_label_id": obj.get("target_label_id"),
            "label_id": obj.get("label_id"),
            "label_name": obj.get("label_name"),
            "properties": obj.get("properties")
        })
        return _obj


