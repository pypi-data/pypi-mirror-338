# coding: utf-8

"""
    Talos

    FastAPI Best Architecture

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from talos_aclient.models.enum_celery_queue import EnumCeleryQueue
from typing import Optional, Set
from typing_extensions import Self

class MergeDatasetGraphRequest(BaseModel):
    """
    MergeDatasetGraphRequest
    """ # noqa: E501
    trace_info: Optional[Dict[str, Any]] = None
    queue: Optional[EnumCeleryQueue] = None
    allow_override: Optional[StrictBool] = False
    source_label_ids: Optional[List[StrictStr]] = None
    source_label_names: Optional[List[StrictStr]] = None
    source_dataset_id: Optional[StrictStr] = 'dataset-default'
    dataset_id: Optional[StrictStr] = 'dataset-default'
    __properties: ClassVar[List[str]] = ["trace_info", "queue", "allow_override", "source_label_ids", "source_label_names", "source_dataset_id", "dataset_id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MergeDatasetGraphRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if trace_info (nullable) is None
        # and model_fields_set contains the field
        if self.trace_info is None and "trace_info" in self.model_fields_set:
            _dict['trace_info'] = None

        # set to None if source_label_ids (nullable) is None
        # and model_fields_set contains the field
        if self.source_label_ids is None and "source_label_ids" in self.model_fields_set:
            _dict['source_label_ids'] = None

        # set to None if source_label_names (nullable) is None
        # and model_fields_set contains the field
        if self.source_label_names is None and "source_label_names" in self.model_fields_set:
            _dict['source_label_names'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MergeDatasetGraphRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "trace_info": obj.get("trace_info"),
            "queue": obj.get("queue"),
            "allow_override": obj.get("allow_override") if obj.get("allow_override") is not None else False,
            "source_label_ids": obj.get("source_label_ids"),
            "source_label_names": obj.get("source_label_names"),
            "source_dataset_id": obj.get("source_dataset_id") if obj.get("source_dataset_id") is not None else 'dataset-default',
            "dataset_id": obj.get("dataset_id") if obj.get("dataset_id") is not None else 'dataset-default'
        })
        return _obj


