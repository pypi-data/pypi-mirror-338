"""
pyodide-mkdocs-theme
Copyleft GNU GPLv3 üÑØ 2024 Fr√©d√©ric Zinelli

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.
If not, see <https://www.gnu.org/licenses/>.
"""

from mkdocs.config import config_options as C

from pyodide_mkdocs_theme.pyodide_macros.tools_and_constants import (
    KEYWORDS_SEPARATOR,
    HtmlClass,
    IdeConstants,
    IdeMode,
    MacroShowConfig,
    P5BtnLocation,
)
from pyodide_mkdocs_theme.pyodide_macros.parsing import items_comma_joiner

from ...tools.test_cases import CASES_OPTIONS
from ..config_option_src import ConfigOptionIdeLink, ConfigOptionSrc, VAR_ARGS
from ..sub_config_src import SubConfigSrc
from ..macro_config_src import MacroConfigSrc, MultiQcmConfigSrc

from .docs_dirs_config import (
    to_page,
    DOCS_CONFIG,
    DOCS_FIGURES,
    DOCS_IDE_DETAILS,
    DOCS_PY_BTNS,
    DOCS_RUN_MACRO,
    DOCS_QCMS,
    DOCS_RESUME,
    DOCS_TERMINALS,
)




OP,CLO = '{{', '}}'





PY_GLOBAL = SubConfigSrc.with_default_docs(
    to_page(DOCS_IDE_DETAILS) / '#IDE-{name}'
)(
    '', elements=(

    ConfigOptionIdeLink(
        'py_name', str, default="", index=0, in_yaml_docs=False,
        docs = """
            Chemin relatif (sans l'extension du fichier) vers le fichier `{exo}.py` et les
            √©ventuels autres fichiers annexes, sur lesquels baser l'IDE.
        """,
        yaml_desc="""
            Relative path (no extension) toward the `{exo}.py` file for an IDE, terminal, ...
        """
    ),
    ConfigOptionIdeLink(
        'ID', int, in_config=False, docs_type="None|int",
        docs = """
            √Ä utiliser pour diff√©rencier deux IDEs utilisant les m√™mes fichiers
            [{{annexes()}}](--ide-files), afin de diff√©rencier leurs sauvegardes
            (nota: $ID \\ge 0$).
        """,
        yaml_desc="Disambiguate different macro calls using the same underlying files."
    ),
    ConfigOptionIdeLink(
        'SANS', str, default="",
        docs=f"""
            Pour interdire des fonctions builtins, des modules, des acc√®s d'attributs ou
            de m√©thodes, ou des mots clefs : cha√Æne de noms s√©par√©s par des virgules, des
            points-virgules et/ou espaces. Les mots clefs viennent en dernier, apr√®s le
            s√©parateur `{ KEYWORDS_SEPARATOR }`.
        """,
        yaml_desc="""
            Used to forbid the use of builtins, attribute accesses, packages or keywords in the
            python code (space or comma separated identifiers).
        """
    ),
    ConfigOptionIdeLink(
        'WHITE', str, default="",
        docs="""
            (_\"White list\"_) Ensemble de noms de modules/packages √† pr√©-importer avant que les
            interdictions ne soient mises en place (voir argument `SANS`. _L'argument `WHITE` est
            normalement {{ orange('**obsol√®te**') }}_).
        """,
        yaml_desc="""
            Names of packages to import automatically in the global scope (to avoid troubles with
            forbidden modules).
        """,
        # yaml_desc="""
        #     Noms de modules/packages √† pr√©-importer avant que les interdictions ne soient mises
        #     en place.
        # """,
    ),
    ConfigOptionIdeLink(
        'REC_LIMIT', int, default=-1,
        docs = f"""
            Pour imposer une profondeur de r√©cursion maximale. Nota: ne jamais descendre en-dessous
            de { IdeConstants.min_recursion_limit }. La valeur par d√©faut, `#!py -1`, signifie que
            l'argument n'est pas utilis√©.
        """,
        yaml_desc = f"""
            Limit the recursion depth (do not use values below { IdeConstants.min_recursion_limit }).
        """,
        # yaml_desc="Limite de la profondeur de r√©cursion (ne pas descendre en-dessous de "
        # +f"{ IdeConstants.min_recursion_limit }).",
    ),
    ConfigOptionIdeLink(
        'SHOW', str, conf_type = C.Choice(
            tuple(MacroShowConfig.gen_values(keep=True)),       # with "python"
            default = MacroShowConfig.none,
        ),
        docs="""
            Affiche des donn√©es sur l'appel de macro dans le terminal, durant le `mkdocs serve` :
            {{ul_li([
                "`#!py ''`: Ne fait rien (d√©faut).",
                "`#!py 'args'`: Affiche tous les arguments de l'appel de macro.",
                "`#!py 'python'`: Affiche les contenus des sections, telles que vues par PMT.",
                "`#!py 'all'`: Combine `#!py 'args'` et `#!py 'python'`.",
            ])}}
        """,
        yaml_desc="Display macro related infos in the terminal.",
    ),
    ConfigOptionIdeLink(
        'MERMAID', bool, default=False,
        docs="""
            Signale qu'un rendu de graphe mermaid sera attendu √† un moment ou un autre des
            ex√©cutions.
            <br>Nota : l'extension markdown `pymdownx.superfences` doit √™tre configur√©e pour
            accepter les blocs de code `mermaid`. Voir la configuration par d√©faut du mkdocs.yml
            via les scripts du th√®me, par exemple avec : `python -m pyodide_mkdocs_theme --yml`.
        """,
        yaml_desc="Mark a page as containing dynamic Mermaid graphs built during executions."
    ),
    ConfigOptionIdeLink(
        'AUTO_RUN', bool, default=False,
        docs="Lance automatiquement le code apr√®s avoir affich√© la page.",
        yaml_desc="Run the python code on page load or not.",
    ),
))






def _py_globals_copy_gen(**replacements:ConfigOptionIdeLink):
    return (
        (arg if name not in replacements else replacements[name]).copy_with()
        for name,arg in PY_GLOBAL.subs_dct.items()
    )



MOST_LIKELY_USELESS_ID = PY_GLOBAL.ID.copy_with(docs="""
    √Ä utiliser pour diff√©rencier deux appels de macros diff√©rents, dans le cas o√π vous tomberiez
    sur une collision d'id (tr√®s improbable, car des hachages sont utilis√©s. Cet argument ne
    devrait normalement pas √™tre n√©cessaire pour cette macro).
""")

MEANINGFUL_ARGS_FOR_NON_USER_TOOLS = ('py_name', 'ID', 'SHOW', 'MERMAID')

*PY_BTN_POSITIONAL, PY_BTN_MERMAID, PY_BTN_AUTO_RUN = (

    arg.copy_with(in_macros_docs=arg.name in MEANINGFUL_ARGS_FOR_NON_USER_TOOLS)

    for arg in _py_globals_copy_gen(
        ID = MOST_LIKELY_USELESS_ID,
        py_name = PY_GLOBAL.py_name.copy_with(docs="""
            Cr√©e un bouton isol√© utilisant le fichier python correspondant
            (uniquement `env` et `ignore`).
        """)
    )
)

# Ensure order is as expected...:
assert PY_BTN_MERMAID.name == 'MERMAID', "Wrong PY_GLOBAL elements order... (MERMAID)"
assert PY_BTN_AUTO_RUN.name == 'AUTO_RUN', "Wrong PY_GLOBAL elements order... (AUTO_RUN)"





#----------------------------------------------------------------------------------------





BS_MACRO = '" + back_slash() + "'
"""
The pretty well named... XD
Necessary to bypass jinja deprecation warning when using backslashes where it doesn't like it...
"""



IDE = MacroConfigSrc(
    'IDE',
    docs = "Valeurs par d√©faut pour les arguments des macros `IDE` et `IDEv`.",
    yaml_desc = "Default values for arguments used in the `IDE` and `IDEv` macros.",
    docs_page_url = to_page(DOCS_IDE_DETAILS),
    elements = (

    *_py_globals_copy_gen(
        AUTO_RUN = PY_GLOBAL.AUTO_RUN.copy_with(
            docs=PY_GLOBAL.AUTO_RUN.docs.rstrip('.')+" (lance uniquement les tests publics).")
    ),
    ConfigOptionIdeLink(
        'MAX', int, default=5, docs_type="int|'+'",
        docs="""
            Nombre maximal d'essais de validation avant de rendre la correction et/ou les
            remarques disponibles.
        """,
        yaml_desc="Maximum number of attempts before revealing correction and remarks.",
    ),
    ConfigOptionIdeLink(
        'LOGS', bool, default=True,
        docs="""
            {{ red('Durant des tests de validation') }}, si LOGS est `True`, le code complet
            d'une assertion est utilis√© comme message d'erreur, quand l'assertion a √©t√© √©crite
            sans message.
        """,
        yaml_desc = """
            Build or not missing assertion messages for failed assertions in the secret tests
        """,
        # yaml_desc="""
        #     Construit ou non les messages manquant pour les assertions √©chou√©es lors des
        #     validations.
        # """,
    ),
    ConfigOptionIdeLink(
        'MODE', str, is_optional=True,
        conf_type = C.Choice(IdeMode.VALUES),
        docs_type='None|str',
        docs_default_as_type=True,
        line_feed_link=False,
        docs = f"""
            Change le mode d'ex√©cution des codes python. Les modes disponibles sont :<br>
            { OP } ul_li([
                "`#!py None` : ex√©cutions normales.",
                "`#!py {IdeMode.delayed_reveal!r}` : pour des IDEs n'ayant pas de tests (pas de
                section `tests` ni `secrets`) mais dont on ne veut pas que la solution s'affiche
                d√®s la premi√®re ex√©cution (typiquement, des exercices turtle ou p5). Chaque
                validation fait d√©cro√Ætre le nombre d'essais et les solutions et remarques, si
                elles existent, sont r√©v√©l√©es une fois tous les essais consomm√©s (une erreur est
                lev√©e durant le build, si l'IDE  a des sections `tests` ou `secrets`, ou s'il a
                un nombre d'essais infini).",
                "`#!py {IdeMode.no_reveal!r}` : ex√©cutions normales, mais les solutions et
                remarques, si elles existent, ne sont jamais r√©v√©l√©es, m√™me en cas de succ√®s.
                Le compteur d'essais est ${ BS_MACRO }infty$.",
                "`#!py {IdeMode.no_valid!r}` : quels que soient les fichiers/sections
                disponibles, le bouton et les raccourcis de validations sont inactifs.
                Le compteur d'essais est ${ BS_MACRO }infty$.",
                "`#!py {IdeMode.revealed!r}` : les solutions et remarques, si elles existent,
                sont r√©v√©l√©es d√®s le chargement de la page.
                Le compteur d'essais est ${ BS_MACRO }infty$.",
            ]) { CLO }
        """,
        yaml_desc = f"""
            Change the execution  mode of an IDE (`{IdeMode.no_reveal!r}`, `{IdeMode.no_valid!r}`,
            by default: `null`).
        """,
        # yaml_desc = f"""
        #     Change le mode d'ex√©cution de l'IDE (`{IdeMode.no_reveal!r}`, `{IdeMode.no_valid!r}`,
        #     `null` par d√©faut).
        # """,
    ),
    ConfigOptionIdeLink(
        'MIN_SIZE', int, default=3,
        docs = "Nombre de lignes minimal de l'√©diteur.",
        yaml_desc = "Minimum number of lines of an editor.",
    ),
    ConfigOptionIdeLink(
        'MAX_SIZE', int, default=30,
        docs = "Impose la hauteur maximale possible pour un √©diteur, en nombres de lignes.",
        yaml_desc = "Maximum number of lines of an editor.",
    ),
    ConfigOptionIdeLink(
        'TERM_H', int, default=10,
        docs = "Nombre de lignes initiales utilis√©es pour la hauteur du terminal (approximatif).",
        yaml_desc="Initial number of lines of a terminal (approximative).",
    ),
    ConfigOptionIdeLink(
        'TEST', str, conf_type=C.Choice(CASES_OPTIONS, default=''),
        docs = """
            D√©finit la fa√ßon dont l'IDE doit √™tre g√©r√© lors des tests dans [la page g√©n√©r√©e
            automatiquement pour tester tous les IDEs de la documentation](--redactors/IDE-tests-page/).
            <br>{{ ul_li([
                "Depuis un fichier de configuration, un fichier" + meta() + " ou l'ent√™te d'une page
                markdown : " + cases_options_as_yaml_str()+ ".",
                "Depuis un appel de macro: les m√™mes, ou bien utiliser un object `Case`, d√©fini dans
                l'environnement, pour plus de possibilit√©s."
            ])}}
        """,
        yaml_desc = """
            Configuration to use when testing this IDE (more options through macro call arguments)
        """,
    ),
    ConfigOptionIdeLink(
        'TWO_COLS', bool, default=False,
        docs = """
            Si `True`, cet IDE passe automatiquement en mode "deux colonnes" au chargement de la page.
        """,
        yaml_desc="Automatically goes in split screen mode if `true`.",
    ),
    ConfigOptionIdeLink(
        'STD_KEY', str, default="",
        docs = """
            Clef √† passer en argument de [`terminal_message`](--IDEs-terminal_message) pour
            autoriser son utilisation lorsque la sortie standard est d√©sactiv√©e pendant les
            tests.
        """,
        yaml_desc="""
            Key to pass as first argument of the `terminal_message` python function (in pyodide),
            to allow to print messages directly in the terminal of an IDE, when the stdout is
            deactivated.
        """,
    ),
    ConfigOptionIdeLink(
        'EXPORT', bool, default=False,
        docs = """
            D√©fini si le contenu de l'√©diteur de cet IDE doit √™tre ajout√© √† l'archive zip
            r√©cup√©rant les codes de tous les IDEs de la page.
        """,
        yaml_desc="""
            Add the content of this editor to the zip archive, when extracting all the codes
            of the IDEs in the page.
        """,
    ),
))










TERMINAL = MacroConfigSrc.with_default_docs(
    to_page(DOCS_TERMINALS) / '#signature'
)(
    'terminal',
    docs = "Valeurs par d√©faut pour les arguments de la macro `terminal`.",
    yaml_desc = "Default values for arguments used in the `terminal` macro.",
    elements=(

    *_py_globals_copy_gen(
        ID = MOST_LIKELY_USELESS_ID,
        py_name = PY_GLOBAL.py_name.copy_with(docs="""
            Cr√©e un terminal isol√© utilisant le fichier python correspondant (sections
            autoris√©es: `env`, `env_term`, `post_term`, `post` et `ignore`).
        """)
    ),
    ConfigOptionIdeLink(
        'TERM_H', int, default=10,
        docs = "Nombre de lignes initiales utilis√©es pour la hauteur du terminal (approximatif).",
        yaml_desc="Initial number of lines of a terminal (approximative).",
    ),
    ConfigOptionSrc(
        'FILL', str, default='',
        docs = """
            Commande √† afficher dans le terminal lors de sa cr√©ation.
            <br>{{ red('Uniquement pour les terminaux isol√©s.') }}
        """,
        yaml_desc="Command used to prefill the terminal (isolated terminals only).",
        # yaml_desc="Commande pour pr√©remplir le terminal (terminaux isol√©s uniquement).",
    ),
))










PY_BTN = MacroConfigSrc.with_default_docs(
    to_page(DOCS_PY_BTNS) / '#signature'
)(
    'py_btn',
    docs = "Valeurs par d√©faut pour les arguments de la macro `py_btn`.",
    yaml_desc = "Default values for arguments used in the `py_btn` macro.",
    elements=(

    *( arg.copy_with() for arg in PY_BTN_POSITIONAL ),
    ConfigOptionSrc(
        'ICON', str, default="",
        docs = """
            Par d√©faut, le bouton \"play\" des tests publics des IDE est utilis√©.
            <br>Peut √©galement √™tre une ic√¥ne `mkdocs-material`, une adresse vers une image
            (lien ou fichier), ou du code html.<br>Si un fichier est utiliser, l'adresse doit
            √™tre relative au `docs_dir` du site construit.
        """,
        yaml_desc="Image of the button (by default: `play`  / file path / :icon-material: / url).",
        # yaml_desc="Image pour le bouton (`play` par d√©faut / fichier / :icon-material: / lien).",
    ),
    ConfigOptionSrc(
        'HEIGHT', int, is_optional=True, docs_type="None|int",
        docs = "Hauteur par d√©faut du bouton.",
        yaml_desc="Default height for the button",
    ),
    ConfigOptionSrc(
        'WIDTH', int, is_optional=True, docs_type="None|int",
        docs = "Largeur par d√©faut du bouton.",
        yaml_desc="Default width for the button",
    ),
    ConfigOptionSrc(
        'SIZE', int, is_optional=True, docs_type="None|int",
        docs = "Si d√©finie, utilis√©e pour la largeur __et__ la hauteur du bouton.",
        yaml_desc="If given, define the height and the width for the button",
    ),
    ConfigOptionSrc(
        'TIP', str, lang_default_access='py_btn.msg',
        docs = "Message √† utiliser pour l'info-bulle.",
        yaml_desc="Tooltip message",
    ),
    ConfigOptionSrc(
        'TIP_SHIFT', int, default=50,
        docs = """
            D√©calage horizontal de l'info-bulle par rapport au bouton, en `%` (c'est le
            d√©calage vers la gauche de l'info-bulle par rapport au point d'ancrage de
            la fl√®che au-dessus de celle-ci. `50%` correspond √† un centrage).
        """,
        yaml_desc="Horizontal leftward shifting of the tooltip (%)",
        # yaml_desc="D√©calage horizontal de l'info-bulle vers la gauche (%)",
    ),
    ConfigOptionSrc(
        'TIP_WIDTH', float, default=0.0,
        docs = "Largeur de l'info-bulle, en `em` (`#!py 0` correspond √† une largeur automatique).",
        yaml_desc="Tooltip width (in em units. Use `0` for automatic width)",
    ),
    ConfigOptionSrc(
        'WRAPPER', str, default='div',
        docs = "Type de balise dans laquelle mettre le bouton.",
        yaml_desc = "Tag type the button will be inserted into",
    ),
    PY_BTN_MERMAID.copy_with(),
    PY_BTN_AUTO_RUN.copy_with(),
))











AUTO_RUN = MacroConfigSrc.with_default_docs(
    to_page(DOCS_RUN_MACRO) / '#signature'
)(
    'run',
    docs      = "Valeurs par d√©faut pour les arguments de la macro `run`.",
    yaml_desc = "Default values for arguments used in the `run` macro.",
    elements  = tuple(
        arg if arg.name!='py_name' else arg.copy_with(docs="""
            Chemin relatif vers le fichier python (sans extension) √† ex√©cuter au chargement de
            la page (section `env` uniquement).
        """)
        for arg in (*PY_BTN_POSITIONAL, PY_BTN_MERMAID)
    ),
)








SECTION = MacroConfigSrc.with_default_docs(
    to_page(DOCS_RESUME) / '#section'
)(
    'section',
    docs = "Valeurs par d√©faut pour les arguments de la macro `terminal`.",
    yaml_desc = "Default values for arguments used in the `section` macro.",
    in_yaml_docs = False,
    elements = (

    # Required on the python side, but should never be given through "meta", so it has to be
    # non blocking on the config side:
    PY_GLOBAL.py_name.copy_with(
        docs="[Fichier python {{ annexe() }}](--ide-files).",
    ),
    ConfigOptionSrc(
        'section', str, index=1, is_optional=True,
        docs = "Nom de la section √† extraire.",
        yaml_desc="Name of the section to extract.",
    ),
))








PY = MacroConfigSrc.with_default_docs(
    to_page(DOCS_RESUME) / '#py'
)(
    'py',
    docs = "Valeurs par d√©faut pour les arguments de la macro `py`.",
    yaml_desc = "Default values for arguments used in the `py` macro.",
    in_yaml_docs = False,
    elements = (

    # Required on the python side, but should never be given through "meta", so it has to be
    # non blocking on the config side:
    ConfigOptionSrc(
        'py_name', str, is_optional=True, index=0,
        docs = "Fichier source √† utiliser (sans l'extension).",
        yaml_desc="Relative path, but without extension, of the python file to use.",
    ),
))








MULTI_QCM = MultiQcmConfigSrc.with_default_docs(
    to_page(DOCS_QCMS) / '#arguments'
)(
    'multi_qcm',
    docs = "Valeurs par d√©faut pour les arguments de la macro `multi_qcm`.",
    yaml_desc = "Default values for arguments used in the `multi_qcm` macro.",
    elements = (

    # Required on the python side, but should never be given through "meta": must not be blocking:
    ConfigOptionSrc(
        'questions', list, index=VAR_ARGS, in_config=False, docs_default_as_type=False,
        docs = """
            Suite √† la version `2.4.0` du th√®me, cet argument devrait √™tre une unique cha√Æne de
            caract√®res indiquant le chemin relatif vers un [fichier `json`](--qcms-json) contenant
            les donn√©es pour les diff√©rentes questions, et potentiellement les valeurs pour tous
            les autres arguments de la macro.
            <br>Ce fichier peut √™tre facilement cr√©√© gr√¢ce √† [l'outil de cr√©ation de fichier
            `json` pour les qcms](--qcm-builder), disponible dans la documentation du th√®me.
            <br>{{ pmt_note("Si la d√©claration est √©crite √† la main, chaque argument individuel est
            alors une [liste d√©crivant une question avec ses choix et r√©ponses](--qcm_question).
            Cette m√©thode est cependant vivement d√©conseill√©e car elle pr√©sente de nombreux
            pi√®ges lors de la r√©daction de l'appel de macro.") }}
        """,
        yaml_desc = """
            Varags: each element is a list representing the data for one question (3 or 4 elements),
            or use one single relative path to a `.json` file.
        """,
    ),
    ConfigOptionSrc(
        'description', str, default='',
        docs = """
            Texte d'introduction (markdown) d'un QCM, ajout√© au d√©but de l'admonition, avant
            la premi√®re question. Cet argument est optionnel.
        """,
        yaml_desc="Introduction text at the beginning of the quiz admonition.",
        # yaml_desc="Texte d'introduction au d√©but de l'admonition du QCM.",
    ),
    ConfigOptionSrc(
        'hide', bool, default=False,
        docs = """
            Si `#!py True`, un masque appara√Æt au-dessus des boutons pour signaler √† l'utilisateur
            que les r√©ponses resteront cach√©es apr√®s validation.
        """,
        yaml_desc = """
            Indicates whether correct/incorrect answers are visible or not after validation.
        """,
        # yaml_desc="Indique si les r√©ponses correctes/incorrects sont visibles √† la correction.",
    ),
    ConfigOptionSrc(
        'multi', bool, default=False,
        docs = """
            R√©glage pour toutes les questions du qcm ayant une seule bonne r√©ponse, indiquant si
            elles doivent √™tre consid√©r√©es comme √©tant √† choix simple ou multiples.
        """,
        yaml_desc="Disambiguate MCQ and SCQ if not automatically decidable.",
        # yaml_desc="Permet de clarifier entre QCM et QCU quand ambigu√´.",
    ),
    ConfigOptionSrc(
        'shuffle', bool, default=False,
        docs = "M√©lange les questions et leurs choix ou pas, √† chaque fois que le qcm est jou√©.",
        yaml_desc="Shuffle questions and their items or not.",
    ),
    ConfigOptionSrc(
        'shuffle_questions', bool, default=False,
        docs = "M√©lange les questions uniquement, √† chaque fois que le qcm est jou√©.",
        yaml_desc="Shuffling or not, questions only.",
    ),
    ConfigOptionSrc(
        'shuffle_items', bool, default=False,
        docs="M√©lange seulement les items de chaque question, √† chaque fois que le qcm est jou√©.",
        yaml_desc="Shuffling the items of each question or not.",
    ),
    ConfigOptionSrc(
        'admo_kind', str, conf_type=C.Choice(('!!!', '???', '???+', None), default="!!!"),
        docs = """
            Type d'admonition dans laquelle les questions seront rassembl√©es :{{ul_li([
                "`#!py '!!!'` : classique,",
                "`#!py '???'` : d√©pliable,",
                "`#!py '???+'` : repliable,",
                "`None` : pas d'admonition autour du qcm."
            ])}} `None` permet d'ajouter du contenu markdown autour du qcm de mani√®re plus
            fine, si besoin.{{pmt_note("√Ä noter que l'admonition restera visible dans le markdown g√©n√©r√©
            par la macro : elle sera supprim√©e dans la couche JS, au moment de l'affichage de
            la page html")}}.
        """,
        yaml_desc="Type of the admonition wrapping the whole MCQ (`!!!`, ...).",
        # yaml_desc="Type d'admonition pour le QCM complet (`!!!`, ...).",
    ),
    ConfigOptionSrc(
        'admo_class', str, default="tip",
        docs = """
            Pour changer la classe d'admonition. Il est √©galement possible d'ajouter d'autres
            classes si besoin, en les s√©parant par des espaces (exemple : `#!py 'tip inline end
            my-class'`).
        """,
        yaml_desc="Html class(es) for the admonition wrapping the whole MCQ (default: `tip`).",
        # yaml_desc="Classe(s) utilis√©e(s) pour l'admonition du QCM complet (d√©faut: `tip`).",
    ),
    ConfigOptionSrc(
        'qcm_title', str, lang_default_access="qcm_title.msg",
        docs = "Pour changer le titre de l'admonition.",
        yaml_desc="Override the default title of the MCQ admonition.",
    ),
    ConfigOptionSrc(
        'tag_list_of_qs', str, conf_type=C.Choice(('ul', 'ol')), is_optional=True,
        docs = """
            {{ ul_li([
                '`#!py None` : automatique (d√©faut).',
                '`#!py "ol"` : questions num√©rot√©es.',
                '`#!py "ul"` : questions avec puces.',
            ]) }}
            D√©finit le type de liste html utilis√©e pour construire les questions.
            <br>Si la valeur est `None`, '`#!py "ol"` est utilis√©, sauf s'il n'y a qu'une
            seule question pour le qcm, o√π c'est alors `#!py "ul"` qui est utilis√©.
        """,
        yaml_desc="Enforce the list tag used to build the questions in a MCQ.",
    ),
    ConfigOptionSrc(
        'DEBUG', bool, default=False,
        docs = "Si `True`, affiche dans la console le code markdown g√©n√©r√© pour ce qcm.",
        yaml_desc="""
            If `True`, the generated markdown of the MCQ will be printed to the console
            during mkdocs build.
        """,
    ),
    ConfigOptionSrc(
        'SHOW', str, conf_type=C.Choice(MacroShowConfig.VALUES, default=MacroShowConfig.none),
        docs="""
            Affiche des donn√©es sur l'appel de macro dans le terminal, durant le `mkdocs serve` :
            {{ul_li([
                "`#!py ''`: Ne fait rien (d√©faut).",
                "`#!py 'args'`: Affiche tous les arguments de l'appel de macro.",
            ])}}
        """,
        yaml_desc="Display macro related infos in the terminal.",
    ),
))









FIGURE = MacroConfigSrc.with_default_docs(
    to_page(DOCS_FIGURES) / '#signature'
)(
    'figure',
    docs = "Valeurs par d√©faut pour les arguments de la macro `figure`.",
    yaml_desc = "Default values for arguments used in the `figure` macro.",
    elements = (

    # Required on the python side, but should never be given through "meta": must not be blocking:
    ConfigOptionSrc(
        'div_id', str, default="figure1", index=0,
        docs = """
            Id html de la div qui accueillera la figure ou l'√©l√©ment ins√©r√© dynamiquement.
            <br>√Ä modifier s'il y a plusieurs figures ins√©r√©es dans la m√™me page.
        """,
        yaml_desc="""
            Html id of the `div` tag that will hold the dynamically generated figure
            (default: `\"figure1\"`).
        """,
    ),
    ConfigOptionSrc(
        'div_class', str, default="",
        docs = f"""
            Classe html √† ajouter √† la div qui accueillera la figure.<br>La classe
            `{ HtmlClass.py_mk_figure }` est syst√©matiquement pr√©sente : il possible de
            surcharger les r√®gles css de cette classe pour obtenir l'affichage voulu.
        """,
        yaml_desc="Html class to add to the `div` tag that will hold dynamically generated figures.",
        # yaml_desc="Classe html √† donner √† la div qui accueillera la figure.",
    ),
    ConfigOptionSrc(
        'inner_text', str, lang_default_access="figure_text.msg",
        docs = "Texte qui sera affich√© avant qu'une figure ne soit trac√©e.",
        yaml_desc="Text used as placeholder before any figure is inserted.",
    ),
    ConfigOptionSrc(
        'admo_kind', str, default="!!!",
        docs = """
            Type d'admonition dans laquelle la figure sera affich√©e (`'???'` et `'???+'`
            sont √©galement utilisables).
            <br>Si `admo_kind` est `''`, la `<div>` sera ajout√©e sans admonition, et les
            arguments suivants seront alors ignor√©s.
        """,
        yaml_desc="Type of the admonition wrapping the generated figure (`!!!`, ...).",
        # yaml_desc="Type d'admonition pour la figure (`!!!`, ...).",
    ),
    ConfigOptionSrc(
        'admo_class', str, default="tip",
        docs = """
            Pour changer la classe d'admonition. Il est √©galement possible d'ajouter d'autres
            classes si besoin, en les s√©parant par des espaces (exemple : `#!py 'tip inline end
            my-class'`).
        """,
        yaml_desc = """
            Html class(es) of the admonition wrapping the generated figure (default: `tip`).
        """,
        # yaml_desc="Classe(s) utilis√©e(s) pour l'admonition de la figure (d√©faut: `tip`)."
    ),
    ConfigOptionSrc(
        'admo_title', str, lang_default_access="figure_admo_title.msg",
        docs = "Pour changer le titre de l'admonition.",
        yaml_desc="Admonition title.",
    ),
    ConfigOptionSrc(
        'p5_buttons', str, conf_type=C.Choice(P5BtnLocation.VALUES), is_optional=True,
        docs = f"""
            Si d√©fini, ajoute les boutons start/step/stop pour g√©rer les animations construites avec
            [p5](--p5_processing/how_to/).
            <br>Les boutons sont ajout√©s sur le c√¥t√© indiqu√© du canevas, les valeurs possibles √©tant
            { items_comma_joiner(['`#!py "'+loc+'"`' for loc in P5BtnLocation.VALUES]) }.
        """,
        yaml_desc="""
            Add start, step and stop buttons for p5 animations, on the given side of the canvas.
        """,
    ),
    ConfigOptionSrc(
        'SHOW', str, conf_type=C.Choice(MacroShowConfig.VALUES, default=MacroShowConfig.none),
        docs="""
            Affiche des donn√©es sur l'appel de macro dans le terminal, durant le `mkdocs serve` :
            {{ul_li([
                "`#!py ''`: Ne fait rien (d√©faut).",
                "`#!py 'args'`: Affiche tous les arguments de l'appel de macro.",
            ])}}
        """,
        yaml_desc="Display macro related infos in the terminal.",
    ),
))






ARGS_MACRO_CONFIG = SubConfigSrc(
    'args',
    docs_page_url = to_page(DOCS_CONFIG) / '#{py_macros_path}',
    docs = """
        R√©glages des arguments par d√©faut accessibles pour les diff√©rentes macros du th√®me.
        Explications d√©taill√©es dans la page [Aide r√©dacteurs/R√©sum√©](--redactors/resume/).
    """,
    yaml_desc = """
        Configurations of default values for arguments used in `PyodideMacrosPlugin` macros.
    """,
    # yaml_desc = "Configurations des arguments par d√©faut pour les diff√©rentes macros du th√®me.",
     elements = (
        IDE,
        TERMINAL,
        PY_BTN,
        AUTO_RUN,
        SECTION,
        MULTI_QCM,
        PY,
        FIGURE,
     )
)
