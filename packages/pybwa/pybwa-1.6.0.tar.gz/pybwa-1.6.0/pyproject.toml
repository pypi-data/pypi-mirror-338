[project]
name = "pybwa"
version = "1.6.0"
description = "Python bindings for BWA"
readme = "README.md"
authors = [{name = "Nils Homer", email = "nils@fulcrumgenomics.com"}]
license = "MIT"
homepage = "https://github.com/fulcrumgenomics/pybwa"
repository = "https://github.com/fulcrumgenomics/pybwa"
keywords = ["bioinformatics"]
packages = [{ include = "pybwa" }]
classifiers = [
	"Development Status :: 3 - Alpha",
	"Environment :: Console",
	"Intended Audience :: Developers",
	"Intended Audience :: Science/Research",
	"License :: OSI Approved :: MIT License",
	"Operating System :: OS Independent",
	"Programming Language :: Python :: 3",
	"Topic :: Scientific/Engineering :: Bio-Informatics",
	"Topic :: Software Development :: Documentation",
	"Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.9.0,<4.0"
dependencies = [
	"fgpyo >=0.7.0",
	"pysam >=0.22.1",
	"typing_extensions >=3.7.4; python_version <'3.13'",
]

[tool.poetry]
include = [
    # pybwa
	{ path = "LICENSE", format = ["sdist", "wheel"] },
	{ path = "README.md", format = ["sdist", "wheel"] },
	{ path = "pybwa/libbwa*.so", format = "wheel" },
	{ path = "patches/*patch", format = ["sdist", "wheel"] },
	{ path = "tests", format = "sdist" },
	# bwa
	{ path = "bwa/*.h", format = ["sdist", "wheel"] },
	{ path = "bwa/*.c", format = ["sdist", "wheel"] },
	{ path = "bwa/Makefile", format = ["sdist", "wheel"] },
	{ path = "bwa/README.md", format = ["sdist", "wheel"] },
	# htslib
	{ path = "htslib/**/*.h", format = ["sdist", "wheel"] },
	{ path = "htslib/**/*.c", format = ["sdist", "wheel"] },
	{ path = "htslib/LICENSE", format = ["sdist", "wheel"] },
	{ path = "htslib/README", format = ["sdist", "wheel"] },
	{ path = "htslib/configure.ac", format = ["sdist", "wheel"] },
	{ path = "htslib/m4/*.m4", format = ["sdist", "wheel"] },
	{ path = "htslib/*.in", format = ["sdist", "wheel"] },
	{ path = "htslin/configure", format = ["sdist", "wheel"] },
	{ path = "htslib/config.guess", format = ["sdist", "wheel"] },
	{ path = "htslib/config.sub", format = ["sdist", "wheel"] },
	{ path = "htslib/version.sh", format = ["sdist", "wheel"] },
	{ path = "htslib/Makefile", format = ["sdist", "wheel"] },
	{ path = "htslib/*mk", format = ["sdist", "wheel"] },
]
exclude = [
	"pybwa/**/*.so",
	"**/*.so",
	"*.so",
	"htslib/*config*.h",
]

[tool.poetry.build]
generate-setup-file = false
script = "build.py"

[tool.poetry.dependencies]

[tool.poetry.group.dev.dependencies]
# dependencies for linting, style checking, and unit testing
mypy = ">=1.7.0"
pytest = ">=7.4.0"
pytest-cov = ">=2.8.1"
ruff = "0.4.8"
setuptools = ">=68.0.0"
black = ">=24.8.0"  # for readthedocs
cython = "^3.0.11"
coverage = {extras = ["toml"], version = "^7.6.10"}

[tool.poetry.group.docs.dependencies]
# dependencies for building docs 
sphinx = { version = ">=7.0.0"}
enum-tools = "^0.12.0"
sphinx-toolbox = "^3.8.1"
sphinx-jinja2-compat = "^0.3.0"
sphinx-rtd-theme = "^3.0.2"
sphinx-autodoc-typehints = "2"

[build-system]
requires = ["poetry-core>=2.1.1", "cython>=3.0.11", "setuptools>=75.1.0", "pysam >=0.22.1"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
line-length    = 100
target-version = "py39"
output-format  = "full"

[tool.ruff.lint]
select    = ["C901", "B", "E", "F", "I", "W", "Q"]
ignore    = ["E203", "E701"]
unfixable = ["B"]

[tool.ruff.lint.isort]
force-single-line = true

[tool.mypy]
strict_optional             = true
check_untyped_defs          = true
disallow_incomplete_defs    = true
disallow_untyped_calls      = true
disallow_untyped_decorators = true
disallow_untyped_defs       = true
no_implicit_optional        = true
warn_no_return              = true
warn_redundant_casts        = true
warn_return_any             = true
warn_unreachable            = true
warn_unused_configs         = true
warn_unused_ignores         = true
enable_error_code           = "ignore-without-code"
exclude                     = ["site/", "docs/"]

[[tool.mypy.overrides]]
module = ["pyximport.*", "_test_libbwaindex"]
ignore_missing_imports = true

[tool.coverage.run]
plugins = ["Cython.Coverage"]
branch = true
