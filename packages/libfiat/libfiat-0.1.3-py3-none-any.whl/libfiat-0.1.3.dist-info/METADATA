Metadata-Version: 2.4
Name: libfiat
Version: 0.1.3
Summary: A Python 3 client for interacting with FIAT-based firmware
Project-URL: homepage, https://github.com/danpage/fiat
Project-URL: documentation, https://fiat.readthedocs.io
Maintainer-email: Daniel Page <dan@phoo.org>
License: MIT License
        
        Copyright (c) 2024 Daniel Page
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
Classifier: Development Status :: 4 - Beta
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Requires-Python: >=3.8
Requires-Dist: crc
Requires-Dist: pyserial
Description-Content-Type: text/markdown

<!--- ==================================================================== --->

The context for
FIAT 
is somewhat standard for physical implementation, e.g.,
[side-channel](https://en.wikipedia.org/wiki/Side-channel_attack)
attacks.  At a (very) high level, it can be modelled as follows

```
+---------------------------+                 +--------------------------+
|          client           |                 |          target          |
+===========================+                 +==========================+
|                           | ----- req ----> | kernel layer             |
|                           | <---- ack ----- |~~~~~~~~~~~~~~~~~~~~~~~~~~|
|                           |                 | driver layer: SPRs, GPRs |
|                           |                 |~~~~~~~~~~~~~~~~~~~~~~~~~~|
|                           | <-- trigger --- |  board layer: UART, GPIO |
+---------------------------+                 +--------------------------+
```

in the sense that there are two parties,
a client (or user)
and
a target,
who interact synchronously:
the client transmits a  req(uest)         to the target,
the target performs some computation,
then
the target transmits an ack(nowledgement) to the client,
FIAT structures the target implementation into

1. a kernel layer, 
   i.e., the use-case specific functionality of interest,
2. a  board layer,
   i.e., infrastructure related to the hardware, or board said functionality is executed on,
3. a driver layer,
   which uses the board layer to provide an interface to the kernel,

noting the state is reflected by a set of special- and general-purpose 
registers.  The goal is to support both

- the target implementation, e.g., by providing 
  the board and driver layers, plus a build system, meaning the developer need only configure and implement the kernel layer,
  and
- the client implementation, e.g., by providing 
  a library that manages low-level interaction with a given target implementation,

while at least *attempting* to balance simplicity against flexibility.

<!--- ==================================================================== --->
