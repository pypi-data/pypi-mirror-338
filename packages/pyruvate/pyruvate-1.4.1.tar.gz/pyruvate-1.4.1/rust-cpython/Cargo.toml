[package]

name = "cpython"
version = "0.7.2"
description = "Bindings to Python"
authors = ["Daniel Grunwald <daniel@danielgrunwald.de>"]
readme = "README.md"
keywords = [
    "python",
    "cpython",
    "libpython27",
]
homepage = "https://github.com/dgrunwald/rust-cpython"
repository = "https://github.com/dgrunwald/rust-cpython.git"
documentation = "http://dgrunwald.github.io/rust-cpython/doc/cpython/"
categories = ["api-bindings", "development-tools::ffi"]
license = "MIT"
exclude = [
    "/.gitignore",
    "/.travis.yml",
    "/appveyor.yml",
    "/.cargo/config",
    "/extensions/**",
    "/Makefile"
]
#build = "build.rs"
edition = "2018"

[badges]
travis-ci = { repository = "dgrunwald/rust-cpython" }
appveyor = { repository = "dgrunwald/rust-cpython" }

[dependencies]
libc = "0.2"
num-traits = "0.2"
paste = "1"
serde = { version = "1", features = ["derive"], optional = true }

[dev-dependencies]
rustversion = "1.0"
serde_bytes = { version = "0.11" }
serde_cbor = { version = "0.11" }

[dependencies.pyo3-ffi]
version = "*"
features = ["extension-module"]

[features]
default = ["python3-sys"]
python3-sys = []

# Deprecated: nonnull feature no longer has any effect;
# std::ptr::NonNull is now used unconditionally.
nonnull = []

# Enable additional features that require nightly rust
nightly = []

# Use this feature when building an extension module.
# It tells the linker to keep the python symbols unresolved,
# so that the module can also be used with statically linked python interpreters.
extension-module = [ "pyo3-ffi/extension-module" ]

#pep-384 = ["python3-sys/pep-384"]

# When set, do not call prepare_freethreaded_python() when calling
# GILGuard::acquire(). This effectively prevents the crate from automatically
# calling Py_Initialize() and other functions that attempt to automatically
# initialize the Python interpreter.
#
# This feature can be useful for programs embedding Python, which can guarantee
# Python interpreter initialization and don't need the automatic-by-default
# behavior or don't want the behavior coded into this crate.
#
# The feature may also be necessary if this crate's code executes as part of
# Python interpreter initialization, before the Py_Initialize() call completes.
# This scenario should be rare.
no-auto-initialize = []
