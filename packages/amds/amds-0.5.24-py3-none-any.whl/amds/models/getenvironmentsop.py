"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from amds.types import BaseModel
from typing import Dict, List, Optional
from typing_extensions import NotRequired, TypedDict


class GetEnvironmentsEnvironmentsTypedDict(TypedDict):
    description: NotRequired[str]
    environment_id: NotRequired[str]
    name: NotRequired[str]


class GetEnvironmentsEnvironments(BaseModel):
    description: Optional[str] = None

    environment_id: Optional[str] = None

    name: Optional[str] = None


class GetEnvironmentsResponseBodyTypedDict(TypedDict):
    r"""Get Environments"""

    environments: NotRequired[List[GetEnvironmentsEnvironmentsTypedDict]]
    status: NotRequired[str]


class GetEnvironmentsResponseBody(BaseModel):
    r"""Get Environments"""

    environments: Optional[List[GetEnvironmentsEnvironments]] = None

    status: Optional[str] = None


class GetEnvironmentsResponseTypedDict(TypedDict):
    headers: Dict[str, List[str]]
    result: GetEnvironmentsResponseBodyTypedDict


class GetEnvironmentsResponse(BaseModel):
    headers: Dict[str, List[str]]

    result: GetEnvironmentsResponseBody
