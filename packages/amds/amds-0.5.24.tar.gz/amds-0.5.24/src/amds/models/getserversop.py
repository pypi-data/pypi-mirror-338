"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from amds.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
from pydantic import model_serializer
from typing import Dict, List, Optional
from typing_extensions import NotRequired, TypedDict


class GetServersServersTypedDict(TypedDict):
    alph_editor_url: NotRequired[str]
    environment: NotRequired[str]
    name: NotRequired[str]
    port: NotRequired[float]
    port_forward_url: NotRequired[str]
    server_request: NotRequired[str]
    status: NotRequired[str]
    thumb: NotRequired[str]
    token: NotRequired[Nullable[str]]
    url: NotRequired[str]


class GetServersServers(BaseModel):
    alph_editor_url: Optional[str] = None

    environment: Optional[str] = None

    name: Optional[str] = None

    port: Optional[float] = None

    port_forward_url: Optional[str] = None

    server_request: Optional[str] = None

    status: Optional[str] = None

    thumb: Optional[str] = None

    token: OptionalNullable[str] = UNSET

    url: Optional[str] = None

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "alph_editor_url",
            "environment",
            "name",
            "port",
            "port_forward_url",
            "server_request",
            "status",
            "thumb",
            "token",
            "url",
        ]
        nullable_fields = ["token"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class GetServersResponseBodyTypedDict(TypedDict):
    r"""Get Servers"""

    servers: NotRequired[List[GetServersServersTypedDict]]
    status: NotRequired[str]


class GetServersResponseBody(BaseModel):
    r"""Get Servers"""

    servers: Optional[List[GetServersServers]] = None

    status: Optional[str] = None


class GetServersResponseTypedDict(TypedDict):
    headers: Dict[str, List[str]]
    result: GetServersResponseBodyTypedDict


class GetServersResponse(BaseModel):
    headers: Dict[str, List[str]]

    result: GetServersResponseBody
