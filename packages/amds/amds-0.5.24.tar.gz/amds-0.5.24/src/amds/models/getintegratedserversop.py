"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from amds.types import BaseModel
from typing import Dict, List, Optional
from typing_extensions import NotRequired, TypedDict


class DataTypedDict(TypedDict):
    environment: NotRequired[str]
    port: NotRequired[float]
    port_forward_url: NotRequired[str]
    server_name: NotRequired[str]
    status: NotRequired[str]
    thumb: NotRequired[str]
    token: NotRequired[str]
    url: NotRequired[str]


class Data(BaseModel):
    environment: Optional[str] = None

    port: Optional[float] = None

    port_forward_url: Optional[str] = None

    server_name: Optional[str] = None

    status: Optional[str] = None

    thumb: Optional[str] = None

    token: Optional[str] = None

    url: Optional[str] = None


class GetIntegratedServersResponseBodyTypedDict(TypedDict):
    r"""Get Integrated Servers"""

    data: NotRequired[List[DataTypedDict]]
    status: NotRequired[str]


class GetIntegratedServersResponseBody(BaseModel):
    r"""Get Integrated Servers"""

    data: Optional[List[Data]] = None

    status: Optional[str] = None


class GetIntegratedServersResponseTypedDict(TypedDict):
    headers: Dict[str, List[str]]
    result: GetIntegratedServersResponseBodyTypedDict


class GetIntegratedServersResponse(BaseModel):
    headers: Dict[str, List[str]]

    result: GetIntegratedServersResponseBody
