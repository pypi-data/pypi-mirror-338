r"""
This file was *autogenerated* from article2.tex with sagetex.sty
version 2021/10/16 v3.6. It contains the contents of all the
sageexample environments from article2.tex. You should be able to
doctest this file with "sage -t article2_doctest.sage".

It is always safe to delete this file; it is not used in typesetting your
document.

Sage commandline, line 3912::

sage: version()
'SageMath version ..., Release Date: ...'
sage: import importlib.metadata
sage: importlib.metadata.version("slabbe")
'...'

Sage commandline, line 3925::

sage: n = 3  # try with another integer, the code below works at least for 1 <= n <= 7
sage: x = polygen(QQ, "x")
sage: K.<beta> = NumberField(x^2 - n*x - 1, embedding=RR(n))
sage: beta.n()
3.30277563773199

Sage commandline, line 3935::

sage: unit_square_ieqs = [[0, 1, 0], [0, 0, 1], [1, -1, 0], [1, 0, -1]]
sage: def Lambda_inv(a,b,c):
....:     ieqs = list(unit_square_ieqs)
....:     ieqs.extend([[-1/beta+1-a, 0, 1], [a+1/beta, 0, -1]])
....:     ieqs.extend([[-1/beta+1-b, 1/beta, 1], [b+1/beta, -1/beta, -1]])
....:     ieqs.extend([[-1/beta+1-c, beta, 1], [c+1/beta, -beta, -1]])
....:     return Polyhedron(ieqs=ieqs)

Sage commandline, line 3946::

sage: Vn = [(a,b,c) for a in range(2) for b in range(2) for c in range(n+2) if a<=b<=c]
sage: Vn
[(0, 0, 0), (0, 0, 1), ..., (1, 1, ...)]
sage: assert sum(Lambda_inv(*v).volume() for v in Vn) == 1
sage: Lambda_inv(0,0,n+1).volume()      # one of the atom has empty interior
0

Sage commandline, line 3956::

sage: def vector_to_str(v):
....:     return "".join(str(a) for a in v)
sage: vector_to_str((0,1,4))        # for example
'014'

Sage commandline, line 3964::

sage: lattice_base = identity_matrix(2)
sage: from slabbe import PolyhedronExchangeTransformation as PET
sage: Re1 = PET.toral_translation(lattice_base, vector((1/beta,0)))
sage: Re2 = PET.toral_translation(lattice_base, vector((0,1/beta)))

Sage commandline, line 3972::

sage: from slabbe import PolyhedronPartition
sage: EAST = PolyhedronPartition({vector_to_str(v):Lambda_inv(*v) for v in Vn
....:                                if Lambda_inv(*v).volume() > 0})
sage: M = matrix(K, 2, (0,1,1,0))
sage: NORTH = EAST.apply_linear_map(M)
sage: WEST = Re1(EAST)
sage: SOUTH = Re2(NORTH)
sage: G = graphics_array([EAST.plot(),NORTH.plot(), SOUTH.plot(),WEST.plot()])
sage: G.show(figsize=10)

Sage commandline, line 3989::

sage: PEN,dEN = EAST.refinement(NORTH, certificate=True)
sage: PWS,dWS = WEST.refinement(SOUTH, certificate=True)
sage: G = graphics_array([PEN.plot(),PWS.plot()])
sage: G.show(figsize=5)

Sage commandline, line 4004::

sage: PWS.is_equal_up_to_relabeling(PEN)
True
sage: P = PEN           # faster than P = PEN.refinement(PWS)
sage: bijection = P.keys_permutation(PWS)
sage: bijection[9]     # for example
16

Sage commandline, line 4014::

sage: from slabbe import WangTileSet
sage: tiles = [dEN[i]+dWS[bijection[i]] for i in sorted(dEN)]
sage: T3 = WangTileSet(tiles)
sage: t = T3.tikz(ncolumns=10, scale=1.2)

Sage commandline, line 4030::

sage: x_le_beta_inv = [1/beta,-1,0]
sage: P1,s1 = Re1.induced_partition(x_le_beta_inv, P, substitution_type="row")
sage: R1e1,_ = Re1.induced_transformation(x_le_beta_inv)
sage: R1e2,_ = Re2.induced_transformation(x_le_beta_inv)

Sage commandline, line 4037::

sage: y_le_beta_inv = [1/beta,0,-1]
sage: P2,s2 = Re2.induced_partition(y_le_beta_inv, P1, substitution_type="column")
sage: R2e1,_ = R1e1.induced_transformation(y_le_beta_inv)
sage: R2e2,_ = R1e2.induced_transformation(y_le_beta_inv)

Sage commandline, line 4046::

sage: P2_scaled = (-beta * P2).translate((1,1))
sage: P3 = Re2(Re1(P2_scaled))
sage: G = graphics_array([P2_scaled.plot(), P3.plot()])
sage: G.show(figsize=5)

Sage commandline, line 4057::

sage: P.is_equal_up_to_relabeling(P3)
True
sage: Re1 == (beta * R2e1).inverse()
True
sage: Re2 == (beta * R2e2).inverse()
True

Sage commandline, line 4067::

sage: from slabbe import Substitution2d
sage: s3 = Substitution2d.from_permutation(P.keys_permutation(P3))
sage: s123 = s1*s2*s3

Sage commandline, line 4089::

sage: s123_tikz = s123.wang_tikz(domain_tiles=T3, codomain_tiles=T3, ncolumns=6, scale=1.2, label_shift=.15)

"""
