r"""
This file was *autogenerated* from hdr.tex with sagetex.sty
version 2021/10/16 v3.6. It contains the contents of all the
sageexample environments from hdr.tex. You should be able to
doctest this file with "sage -t hdr_doctest.sage".

It is always safe to delete this file; it is not used in typesetting your
document.

Sage commandline, line 983::

sage: version()
'SageMath version ..., Release Date: ...'
sage: import importlib.metadata
sage: importlib.metadata.version("slabbe")
'...'

Sage commandline, line 2229::

sage: K.<sqrt5> = NumberField(x^2-5, embedding=2.2)
sage: alpha = sqrt5*3/110 + 75/22
sage: continued_fraction(alpha)
[3; 2, 7, (1, 5)*]
sage: alpha.n()
3.47007458120454

Sage commandline, line 2248::

sage: from slabbe import PolyhedronExchangeTransformation as PET
sage: base = diagonal_matrix((1+alpha,1))
sage: translation = vector((alpha, 0))
sage: fundamental_domain = polytopes.hypercube(2, intervals=[(-1,alpha), (0,1)])
sage: T = PET.toral_translation(base, translation, fundamental_domain)
sage: T
Polyhedron Exchange Transformation of
Polyhedron partition of 2 atoms with 2 letters
with translations {0: (-1, 0), 1: (3/110*sqrt5 + 75/22, 0)}

Sage commandline, line 2267::

sage: Tind,s = T.induced_transformation(ieq=[alpha-3,-1,0])
sage: Tind
Polyhedron Exchange Transformation of
Polyhedron partition of 2 atoms with 2 letters
with translations {0: (-1, 0), 1: (3/110*sqrt5 + 9/22, 0)}
sage: s
{0: [0], 1: [1, 0, 0, 0]}

Sage commandline, line 2282::

sage: D = diagonal_matrix((-1/(alpha-3),1))
sage: Tindzoom = D * Tind
sage: Tindzoom
Polyhedron Exchange Transformation of
Polyhedron partition of 2 atoms with 2 letters
with translations {0: (-1/6*sqrt5 + 5/2, 0), 1: (-1, 0)}

Sage commandline, line 2294::

    sage: beta = Tindzoom.translations()[0][0]
    sage: continued_fraction(beta)
    [2; 7, (1, 5)*]

Sage commandline, line 2343::

    sage: def preimage(sequence):
    ....:     from collections import defaultdict
    ....:     d = defaultdict(list)
    ....:     for (n,a) in enumerate(sequence):
    ....:         d[a].append(n)
    ....:     return dict(d)

Sage commandline, line 2353::

    sage: def draw_sequence_on_circle(sequence, frequency):
    ....:     d = preimage(sequence)
    ....:     color_dict = dict(zip(d.keys(), rainbow(len(d))))
    ....:     G = Graphics()
    ....:     for a in d:
    ....:         L = [e^(2*pi*I*frequency*n) for n in d[a]]
    ....:         G += points(L, color=color_dict[a], legend_label=a)
    ....:     title = "Frequency = {:.5f}".format(frequency.n())
    ....:     G += circle((0,0), 1, linestyle="dotted", alpha=.5, color="gray", title=title)
    ....:     return G

Sage commandline, line 2376::

    sage: L = ["even","odd"] * 6
    sage: preimage(L)
    {'even': [0, 2, 4, 6, 8, 10], 'odd': [1, 3, 5, 7, 9, 11]}

Sage commandline, line 2387::

    sage: G1 = draw_sequence_on_circle(["even","odd"]*10, sqrt(3))
    sage: G2 = draw_sequence_on_circle(["even","odd"]*10, 1/2+1/200)
    sage: G3 = draw_sequence_on_circle(["even","odd"]*10, 1/2)
    sage: G = graphics_array([G1,G2,G3])

Sage commandline, line 2500::

    sage: F = words.FibonacciWord(['even','odd'])
    sage: F[:15]
    word: even,odd,even,even,odd,even,odd,even,even,odd,even,even,odd,even,odd
    sage: GFibo1 = draw_sequence_on_circle(F[:100], frequency=sqrt(3))
    sage: GFibo2 = draw_sequence_on_circle(F[:100], frequency=(1+sqrt(5))/2)
    sage: GFibo = graphics_array([GFibo1,GFibo2])

Sage commandline, line 3488::

sage: from slabbe.arXiv_1903_06137 import jeandel_rao_tiles
sage: from slabbe.arXiv_1903_06137 import geometric_edges_shapes
sage: T0 = jeandel_rao_tiles()
sage: tiling = T0.solver(20,20).solve(solver="glucose")
sage: draw_H, draw_V = geometric_edges_shapes()
sage: tikz = tiling.tikz(draw_H=draw_H,draw_V=draw_V, id=True, label=False,
....:                  scale="1,very thick", font=r"\bfseries")

Sage commandline, line 4906::

    sage: from slabbe.matrix_cocycle import cocycles
    sage: c = cocycles.Cassaigne()
    sage: ctikz1 = c.tikz_n_cylinders(1, labels=True, scale=3)
    sage: ctikz2 = c.tikz_n_cylinders(2, labels=True, scale=3)
    sage: ctikz3 = c.tikz_n_cylinders(3, labels=True, scale=3)
    sage: ctikz4 = c.tikz_n_cylinders(4, labels=False, scale=3)
    sage: ctikz5 = c.tikz_n_cylinders(5, labels=False, scale=3)
    sage: ctikz6 = c.tikz_n_cylinders(6, labels=False, scale=3)

Sage commandline, line 4966::

sage: from slabbe.mult_cont_frac import Cassaigne
sage: c = Cassaigne()
sage: c
Cassaigne 3-dimensional continued fraction algorithm
sage: C = c.substitutions()
sage: C
{1: WordMorphism: 1->1, 2->13, 3->2, 2: WordMorphism: 1->2, 2->13, 3->3}
sage: it = c.coding_iterator((1,e,pi))
sage: directive_sequence = [next(it) for _ in range(20)]
sage: directive_sequence
[2, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 2, 2, 1, 2, 2, 2, 2, 2]
sage: w = c.s_adic_word((1,e,pi))
sage: w
word: 2323213232323132323213232321323231323232...

Sage commandline, line 5198::

    sage: c1 = WordMorphism("1->1,2->13,3->2")
    sage: c2 = WordMorphism("1->2,2->13,3->3")
    sage: c12 = c1*c2
    sage: c12_left_image = c12.rauzy_fractal_plot()
    sage: c12_right_image = c12.rauzy_fractal_plot(exchange=True)

Sage commandline, line 5460::

    sage: url = "https://members.loria.fr/EJeandel/research/100.txt"
    sage: import urllib
    sage: Jeandel100x100 = [line.decode() for line in urllib.request.urlopen(url).read().splitlines()]
    sage: Jeandel100x100[35][:80]
    '73a43a3873a2873a43a3873a2873873a2873a43a3873a2873a43a2873a2873873a2873a43a3873a2'
    sage: GJR35 = draw_sequence_on_circle(Jeandel100x100[35], frequency=(1+sqrt(5))/2)
    sage: GJR36 = draw_sequence_on_circle(Jeandel100x100[36], frequency=(1+sqrt(5))/2)
    sage: GJR = graphics_array([GJR35, GJR36])

Sage commandline, line 5488::

sage: from collections import defaultdict
sage: def preimage2d(rectangular_pattern):
....:     "Input is using matrix coordinates, output using Euclidean coordinates"
....:     d = defaultdict(list)
....:     nlines = len(rectangular_pattern)
....:     for (j, line) in enumerate(rectangular_pattern):
....:         for (i, a) in enumerate(line):
....:             d[a].append((i,nlines - 1 - j))
....:     return dict(d)
sage: from sage.functions.other import floor
sage: def frac(x):
....:     return x - floor(x)
sage: def draw_pattern_on_torus(pattern, M):
....:     d = preimage2d(pattern)
....:     color_dict = dict(zip(d.keys(), rainbow(len(d))))
....:     G = Graphics()
....:     for a in d:
....:         L = [M*vector((i,j)) for (i,j) in d[a]]
....:         fracL = [(frac(x),frac(y)) for (x,y) in L]
....:         G += points(fracL, color=color_dict[a], legend_label=a)
....:     return G

Sage commandline, line 5513::

sage: preimage2d([[1,2,3],[5,5,5]])
{1: [(0, 1)], 2: [(1, 1)], 3: [(2, 1)], 5: [(0, 0), (1, 0), (2, 0)]}
sage: frac(pi)
pi - 3

Sage commandline, line 5522::

sage: z = polygen(QQ, 'z')
sage: K.<phi> = NumberField(z^2-z-1, embedding=RR(1.6))
sage: phi.n(digits=80)
1.6180339887498948482045868343656381177203091798057628621354486227052604628189024

Sage commandline, line 5540::

    sage: M1 = matrix.column([(100,0), (0,100)])
    sage: G1 = draw_pattern_on_torus(Jeandel100x100, M1.inverse())

Sage commandline, line 5556::

    sage: M2 = matrix.column([(phi,0), (0,100)])
    sage: G2 = draw_pattern_on_torus(Jeandel100x100, M2.inverse())

Sage commandline, line 5570::

    sage: M3 = matrix.column([(phi,0), (0,phi+3)])
    sage: G3 = draw_pattern_on_torus(Jeandel100x100, M3.inverse())

Sage commandline, line 5584::

    sage: M4 = matrix.column([(phi,0), (1,phi+3)])
    sage: G4 = draw_pattern_on_torus(Jeandel100x100, M4.inverse())

Sage commandline, line 7194::

    sage: from slabbe import WangTileSet
    sage: tiles = "3222 4221 4230 4042 4140 0040 1000 1101 2111 2022 2122"
    sage: tiles = [tuple(tile) for tile in tiles.split()]
    sage: slide50 = WangTileSet(tiles)

Sage commandline, line 7214::

    sage: tiles = "2214 0424 1404 0222 1222 2223 2304 0400 0001 1112 1011"
    sage: tiles = [tuple(tile) for tile in tiles.split()]
    sage: TY = WangTileSet(tiles)

Sage commandline, line 7227::

sage: TY.is_equivalent_up_to_isometry(slide50, certificate=True)
(True,
 ((1,4,3,2),
 {'0': '0', '1': '1', '2': '2', '3': '3', '4': '4'},
 {'0': '0', '1': '1', '2': '2'},
 Substitution 2d: {0: [[1]], 1: [[3]], 2: [[4]], 3: [[9]], 4: [[10]], 5: [[0]], 6: [[2]], 7: [[5]], 8: [[6]], 9: [[8]], 10: [[7]]}))

"""
