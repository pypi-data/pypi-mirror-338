name: Cut Minor Release

on:  # yamllint disable-line rule:truthy
  workflow_dispatch:
    inputs:
      major_version:
        description: 'Major version to update'
        required: true
        type: string

env:
  REGISTRY_USER: kumo+kumo_internal
  GH_TOKEN: ${{ github.token }}
  MAJOR_VERSION: ${{ inputs.major_version }}


jobs:
  cut-release:
    name: Cut New Release of Kumo API
    runs-on: ubuntu-22.04
    outputs:
      release_success: ${{ steps.set-output.outputs.success }}

    steps:
      - uses: actions/checkout@v4
        with:
          ref: master

      - name: Clone Kumo repository
        uses: actions/checkout@v4
        with:
          repository: kumo-ai/kumo-api
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: master

      - name: Setup git user
        run: |
          git config --global user.email "github-action@users.noreply.github.com"
          git config --global user.name "GitHub Action"

      - name: Get Next Minor Version
        run: |
          cd /home/runner/work/kumo-api/kumo-api
          git fetch origin
          git checkout ${MAJOR_VERSION}

          # add v to version in pyproject.toml for comparing:
          CURRENT_VERSION=v$(awk '/^\[project\]/{p=1;next} p&&/^version/{gsub(/[^0-9.]/, "", $3);print $3;exit}' pyproject.toml)
          echo "Current version from pyproject.toml: $CURRENT_VERSION"
          # check that CURRENT_VERSION matches up with existing tags:
          LATEST_TAG=$(git tag | grep "^${MAJOR_VERSION}" | grep -E "^v[0-9]+\.[0-9]+\.[0-9]+$" | sort -V | tail -1)
          if [[ "$CURRENT_VERSION" != "$LATEST_TAG" ]]; then
            echo "Error: current version $CURRENT_VERSION does not match latest tag $LATEST_TAG, resolve pyproject.toml and release discrepency before continuing"
            exit 1
          fi

          # determine vx.y.(z+1)
          NEW_MINOR=$(echo ${CURRENT_VERSION} | awk -F. -v OFS=. '{$NF += 1 ; print}')
          echo "New minor version: $NEW_MINOR"
          echo "NEW_MINOR=$NEW_MINOR" >> $GITHUB_ENV
          echo "PREV_VERSION=$LATEST_TAG" >> $GITHUB_ENV


      - name: Update pyproject.toml
        run: |
          cd /home/runner/work/kumo-api/kumo-api
          git checkout ${MAJOR_VERSION}
          echo "current branch: $(git branch --show-current) NEW MINOR: $NEW_MINOR"
          git checkout -b "update-version-$NEW_MINOR"
          awk -v version_line="version = \"${NEW_MINOR#v}\"" -i inplace '/^\[project\]/{p=1} p&&/^version/{if(!done){sub(/^version = .*/,version_line);done=1}} 1' pyproject.toml
          awk -v version_line="version = \"${NEW_MINOR#v}\"" -i inplace '/^\[tool.poetry\]/{p=1} p&&/^version/{if(!done){sub(/^version = .*/,version_line);done=1}} 1' pyproject.toml
          git add pyproject.toml
          git commit -m "Update version to $NEW_MINOR"
          git pull origin $MAJOR_VERSION
          git push origin "update-version-$NEW_MINOR"
          gh pr create --title "Update pyproject.toml: $NEW_MINOR" --body "Update pyproject.toml: $NEW_MINOR" --label github-actions --base $MAJOR_VERSION


      - name: Cut Release
        run: |
          cd /home/runner/work/kumo-api/kumo-api

          echo "PREV_VERSION for notes: $PREV_VERSION"
          NOTES_ARG="--notes-start-tag ${PREV_VERSION}"

          # will be based on the update-version-${NEW_MINOR} branch
          git tag $NEW_MINOR
          git push origin $NEW_MINOR
          gh release create $NEW_MINOR --verify-tag --generate-notes --title $NEW_MINOR $NOTES_ARG


      - name: publish to pypi
        run: |
          cd /home/runner/work/kumo-api/kumo-api
          if [ -n "$GITHUB_TOKEN" ];
          then
            echo 'GITHUB_TOKEN is set, not safe to publish to pypi'
            exit 1
          fi
          pip install --upgrade twine
          pip install --upgrade build
          echo [pypi] > .pypirc
          echo 'username = __token__' >> .pypirc
          echo 'password = ${{ secrets.PYPI_TOKEN }}' >> .pypirc
          python -m buildÂ 
          TWINE_CHECK=$(twine check dist/* | grep "PASSED" | wc -l)
          if [ $TWINE_CHECK -ne 2 ]; then
            echo "twine check failed"
            exit 1
          fi
          twine upload dist/*


      - name: Set output
        if: ${{ success() }}
        id: set-output
        run: echo "success=true" >> $GITHUB_OUTPUT
