# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from dialga_api import scheduler_pb2 as dialga__api_dot_scheduler__pb2

GRPC_GENERATED_VERSION = '1.69.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in dialga_api/scheduler_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class ScheduleServiceStub(object):
    """The scheduling service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateSchedule = channel.unary_unary(
                '/scheduler.ScheduleService/CreateSchedule',
                request_serializer=dialga__api_dot_scheduler__pb2.CreateScheduleRequest.SerializeToString,
                response_deserializer=dialga__api_dot_scheduler__pb2.ScheduleResponse.FromString,
                _registered_method=True)
        self.DeleteSchedule = channel.unary_unary(
                '/scheduler.ScheduleService/DeleteSchedule',
                request_serializer=dialga__api_dot_scheduler__pb2.DeleteScheduleRequest.SerializeToString,
                response_deserializer=dialga__api_dot_scheduler__pb2.ScheduleResponse.FromString,
                _registered_method=True)
        self.CreateOneTimeEvent = channel.unary_unary(
                '/scheduler.ScheduleService/CreateOneTimeEvent',
                request_serializer=dialga__api_dot_scheduler__pb2.CreateOneTimeEventRequest.SerializeToString,
                response_deserializer=dialga__api_dot_scheduler__pb2.ScheduleResponse.FromString,
                _registered_method=True)
        self.DeleteOneTimeEvent = channel.unary_unary(
                '/scheduler.ScheduleService/DeleteOneTimeEvent',
                request_serializer=dialga__api_dot_scheduler__pb2.DeleteOneTimeEventRequest.SerializeToString,
                response_deserializer=dialga__api_dot_scheduler__pb2.ScheduleResponse.FromString,
                _registered_method=True)
        self.AddCompany = channel.unary_unary(
                '/scheduler.ScheduleService/AddCompany',
                request_serializer=dialga__api_dot_scheduler__pb2.CompanyRequest.SerializeToString,
                response_deserializer=dialga__api_dot_scheduler__pb2.CompanyResponse.FromString,
                _registered_method=True)
        self.RemoveCompany = channel.unary_unary(
                '/scheduler.ScheduleService/RemoveCompany',
                request_serializer=dialga__api_dot_scheduler__pb2.CompanyRequest.SerializeToString,
                response_deserializer=dialga__api_dot_scheduler__pb2.CompanyResponse.FromString,
                _registered_method=True)


class ScheduleServiceServicer(object):
    """The scheduling service definition.
    """

    def CreateSchedule(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteSchedule(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateOneTimeEvent(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteOneTimeEvent(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddCompany(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveCompany(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ScheduleServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateSchedule': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateSchedule,
                    request_deserializer=dialga__api_dot_scheduler__pb2.CreateScheduleRequest.FromString,
                    response_serializer=dialga__api_dot_scheduler__pb2.ScheduleResponse.SerializeToString,
            ),
            'DeleteSchedule': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteSchedule,
                    request_deserializer=dialga__api_dot_scheduler__pb2.DeleteScheduleRequest.FromString,
                    response_serializer=dialga__api_dot_scheduler__pb2.ScheduleResponse.SerializeToString,
            ),
            'CreateOneTimeEvent': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateOneTimeEvent,
                    request_deserializer=dialga__api_dot_scheduler__pb2.CreateOneTimeEventRequest.FromString,
                    response_serializer=dialga__api_dot_scheduler__pb2.ScheduleResponse.SerializeToString,
            ),
            'DeleteOneTimeEvent': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteOneTimeEvent,
                    request_deserializer=dialga__api_dot_scheduler__pb2.DeleteOneTimeEventRequest.FromString,
                    response_serializer=dialga__api_dot_scheduler__pb2.ScheduleResponse.SerializeToString,
            ),
            'AddCompany': grpc.unary_unary_rpc_method_handler(
                    servicer.AddCompany,
                    request_deserializer=dialga__api_dot_scheduler__pb2.CompanyRequest.FromString,
                    response_serializer=dialga__api_dot_scheduler__pb2.CompanyResponse.SerializeToString,
            ),
            'RemoveCompany': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveCompany,
                    request_deserializer=dialga__api_dot_scheduler__pb2.CompanyRequest.FromString,
                    response_serializer=dialga__api_dot_scheduler__pb2.CompanyResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'scheduler.ScheduleService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('scheduler.ScheduleService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ScheduleService(object):
    """The scheduling service definition.
    """

    @staticmethod
    def CreateSchedule(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scheduler.ScheduleService/CreateSchedule',
            dialga__api_dot_scheduler__pb2.CreateScheduleRequest.SerializeToString,
            dialga__api_dot_scheduler__pb2.ScheduleResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteSchedule(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scheduler.ScheduleService/DeleteSchedule',
            dialga__api_dot_scheduler__pb2.DeleteScheduleRequest.SerializeToString,
            dialga__api_dot_scheduler__pb2.ScheduleResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateOneTimeEvent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scheduler.ScheduleService/CreateOneTimeEvent',
            dialga__api_dot_scheduler__pb2.CreateOneTimeEventRequest.SerializeToString,
            dialga__api_dot_scheduler__pb2.ScheduleResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteOneTimeEvent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scheduler.ScheduleService/DeleteOneTimeEvent',
            dialga__api_dot_scheduler__pb2.DeleteOneTimeEventRequest.SerializeToString,
            dialga__api_dot_scheduler__pb2.ScheduleResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AddCompany(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scheduler.ScheduleService/AddCompany',
            dialga__api_dot_scheduler__pb2.CompanyRequest.SerializeToString,
            dialga__api_dot_scheduler__pb2.CompanyResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RemoveCompany(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/scheduler.ScheduleService/RemoveCompany',
            dialga__api_dot_scheduler__pb2.CompanyRequest.SerializeToString,
            dialga__api_dot_scheduler__pb2.CompanyResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
