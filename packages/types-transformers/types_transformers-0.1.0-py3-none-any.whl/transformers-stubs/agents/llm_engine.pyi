"""
This type stub file was generated by pyright.
"""

from enum import Enum
from typing import Dict, List, Optional
from huggingface_hub.utils._deprecation import _deprecate_method
from ..pipelines.base import Pipeline

logger = ...
class MessageRole(str, Enum):
    USER = ...
    ASSISTANT = ...
    SYSTEM = ...
    TOOL_CALL = ...
    TOOL_RESPONSE = ...
    @classmethod
    def roles(cls): # -> list[str]:
        ...
    


def get_clean_message_list(message_list: List[Dict[str, str]], role_conversions: Dict[str, str] = ...): # -> list[Any]:
    """
    Subsequent messages with the same role will be concatenated to a single message.

    Args:
        message_list (`List[Dict[str, str]]`): List of chat messages.
    """
    ...

llama_role_conversions = ...
class HfEngine:
    @_deprecate_method(version="4.51.0", message="Switch to smolagents instead, with the same functionalities and similar API (https://huggingface.co/docs/smolagents/index)")
    def __init__(self, model_id: Optional[str] = ...) -> None:
        ...
    
    def get_token_counts(self): # -> dict[str, int | None]:
        ...
    
    def generate(self, messages: List[Dict[str, str]], stop_sequences: Optional[List[str]] = ..., grammar: Optional[str] = ...):
        ...
    
    def __call__(self, messages: List[Dict[str, str]], stop_sequences: Optional[List[str]] = ..., grammar: Optional[str] = ...) -> str:
        """Process the input messages and return the model's response.

        This method sends a list of messages to the Hugging Face Inference API, optionally with stop sequences and grammar customization.

        Parameters:
            messages (`List[Dict[str, str]]`):
                A list of message dictionaries to be processed. Each dictionary should have the structure `{"role": "user/system", "content": "message content"}`.
            stop_sequences (`List[str]`, *optional*):
                A list of strings that will stop the generation if encountered in the model's output.
            grammar (`str`, *optional*):
                The grammar or formatting structure to use in the model's response.

        Returns:
            `str`: The text content of the model's response.

        Example:
            ```python
            >>> engine = HfApiEngine(
            ...     model="meta-llama/Meta-Llama-3.1-8B-Instruct",
            ...     token="your_hf_token_here",
            ...     max_tokens=2000
            ... )
            >>> messages = [{"role": "user", "content": "Explain quantum mechanics in simple terms."}]
            >>> response = engine(messages, stop_sequences=["END"])
            >>> print(response)
            "Quantum mechanics is the branch of physics that studies..."
            ```
        """
        ...
    


class HfApiEngine(HfEngine):
    """A class to interact with Hugging Face's Inference API for language model interaction.

    This engine allows you to communicate with Hugging Face's models using the Inference API. It can be used in both serverless mode or with a dedicated endpoint, supporting features like stop sequences and grammar customization.

    Parameters:
        model (`str`, *optional*, defaults to `"meta-llama/Meta-Llama-3.1-8B-Instruct"`):
            The Hugging Face model ID to be used for inference. This can be a path or model identifier from the Hugging Face model hub.
        token (`str`, *optional*):
            Token used by the Hugging Face API for authentication.
            If not provided, the class will use the token stored in the Hugging Face CLI configuration.
        max_tokens (`int`, *optional*, defaults to 1500):
            The maximum number of tokens allowed in the output.
        timeout (`int`, *optional*, defaults to 120):
            Timeout for the API request, in seconds.

    Raises:
        ValueError:
            If the model name is not provided.
    """
    def __init__(self, model: str = ..., token: Optional[str] = ..., max_tokens: Optional[int] = ..., timeout: Optional[int] = ...) -> None:
        ...
    
    def generate(self, messages: List[Dict[str, str]], stop_sequences: Optional[List[str]] = ..., grammar: Optional[str] = ...) -> str:
        ...
    


class TransformersEngine(HfEngine):
    """This engine uses a pre-initialized local text-generation pipeline."""
    def __init__(self, pipeline: Pipeline, model_id: Optional[str] = ...) -> None:
        ...
    
    def generate(self, messages: List[Dict[str, str]], stop_sequences: Optional[List[str]] = ..., grammar: Optional[str] = ..., max_length: int = ...) -> str:
        ...
    


DEFAULT_JSONAGENT_REGEX_GRAMMAR = ...
DEFAULT_CODEAGENT_REGEX_GRAMMAR = ...
