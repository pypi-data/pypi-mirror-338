"""
This type stub file was generated by pyright.
"""

import torch
from ..utils import is_flute_available, is_hadamard_available, is_torch_available
from torch import nn

"HIGGS through FLUTE (Flexible Lookup Table Engine for LUT-quantized LLMs) integration file"
if is_torch_available():
    ...
if is_flute_available():
    ...
if is_hadamard_available():
    ...
def pad_to_block(tensor, dims, had_block_size, value=...):
    ...

def get_higgs_grid(p: int, n: int): # -> Tensor:
    ...

def quantize_with_higgs(weight, bits: int = ..., p: int = ..., group_size: int = ..., hadamard_size: int = ...): # -> dict[str, Any]:
    ...

class HiggsLinear(torch.nn.Module):
    def __init__(self, in_features: int, out_features: int, num_bits: int, bias=..., dtype: torch.dtype = ..., device: torch.device = ..., group_size: int = ..., hadamard_size: int = ...) -> None:
        ...
    
    def forward(self, x):
        ...
    


def replace_with_higgs_linear(model, quantization_config=..., current_key_name=..., has_been_replaced=...): # -> tuple[Any, bool]:
    """
    Public method that recursively replaces the Linear layers of the given model with HIGGS quantized layers.
    `accelerate` is needed to use this method. Returns the converted model and a boolean that indicates if the
    conversion has been successfull or not.

    Args:
        model (`torch.nn.Module`):
            The model to convert, can be any `torch.nn.Module` instance.
        quantization_config (`HiggsConfig`):
            The quantization config object that contains the quantization parameters.
        current_key_name (`list`, *optional*):
            A list that contains the current key name. This is used for recursion and should not be passed by the user.
        has_been_replaced (`bool`, *optional*):
            A boolean that indicates if the conversion has been successful or not. This is used for recursion and
            should not be passed by the user.
    """
    ...

def dequantize_higgs(model, current_key_name=...):
    """
    Dequantizes the HiggsLinear layers in the given model by replacing them with standard torch.nn.Linear layers.
    Args:
        model (torch.nn.Module): The model containing HiggsLinear layers to be dequantized.
        current_key_name (list, optional): A list to keep track of the current module names during recursion. Defaults to None.
    Returns:
        torch.nn.Module: The model with HiggsLinear layers replaced by torch.nn.Linear layers.
    """
    ...

