name: Build

on:
  push:
    branches: [main]
  pull_request:
    branches: ['*']

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Install Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"
    - name: Get pip cache dir
      id: pip-cache
      shell: bash
      run: |
        echo "dir=$(pip cache dir)" >> $GITHUB_OUTPUT
    - name: Cache pip
      uses: actions/cache@v4
      with:
        path: ${{ steps.pip-cache.outputs.dir }}
        key: ${{ env.CACHE_PREFIX }}-pip-${{ env.PYTHON_VERSION }}-${{ hashFiles('setup.cfg', 'setup.py', '**/requirements.txt') }}
        restore-keys: |
          ${{ env.CACHE_PREFIX }}-pip-${{ env.PYTHON_VERSION }}
    - uses: actions/setup-node@v4
      with:
        node-version: '20'
    - name: Get yarn cache directory path
      id: yarn-cache-dir-path
      run: |
        corepack enable
        yarn set version 3.5.0
        echo "dir=$(yarn config get cacheFolder)" >> $GITHUB_OUTPUT
    - uses: actions/cache@v4
      id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
      with:
        path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-

    - name: Install dependencies
      run: python -m pip install -U jupyterlab==4.0.0

    - name: Setup .yarnrc.yml
      run: |
        jlpm config set npmScopes.datalayer.npmRegistryServer "https://npm.pkg.github.com"
        jlpm config set npmScopes.datalayer.npmAlwaysAuth true
        jlpm config set npmScopes.datalayer.npmAuthToken $NODE_AUTH_TOKEN
      env:
        NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Lint the extension
      run: |
        set -eux
        jlpm
        jlpm run lint:check
    
    - name: Test the extension
      run: |
        set -eux
        jlpm run test

    - name: Build the extension
      run: |
        set -eux
        python -m pip install .[test]

        pytest -vv -r ap --cov jupyter_iam
        jupyter server extension list
        jupyter server extension list 2>&1 | grep -ie "jupyter_iam.*OK"

        jupyter labextension list
        jupyter labextension list 2>&1 | grep -ie "@datalayer/jupyter_iam.*OK"
        python -m jupyterlab.browser_check

    - name: Package the extension
      run: |
        set -eux

        pip install build
        python -m build
        pip uninstall -y "jupyter_iam" jupyterlab

    - name: Upload extension packages
      uses: actions/upload-artifact@v2
      with:
        name: extension-artifacts
        path: dist/jupyter_iam*
        if-no-files-found: error

  test_isolated:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Install Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'
        architecture: 'x64'
    - uses: actions/download-artifact@v2
      with:
        name: extension-artifacts
    - name: Install and Test
      run: |
        set -eux
        # Remove NodeJS, twice to take care of system and locally installed node versions.
        sudo rm -rf $(which node)
        sudo rm -rf $(which node)

        pip install "jupyterlab==4.1.0b0" jupyter_iam*.whl


        jupyter server extension list
        jupyter server extension list 2>&1 | grep -ie "jupyter_iam.*OK"

        jupyter labextension list
        jupyter labextension list 2>&1 | grep -ie "@datalayer/jupyter_iam.*OK"
        python -m jupyterlab.browser_check --no-chrome-test

  integration-tests:
    name: Integration tests
    needs: build
    runs-on: ubuntu-latest

    env:
      PLAYWRIGHT_BROWSERS_PATH: ${{ github.workspace }}/pw-browsers

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Base Setup
      uses: jupyterlab/maintainer-tools/.github/actions/base-setup@v1

    - name: Download extension package
      uses: actions/download-artifact@v2
      with:
        name: extension-artifacts
        
    - name: Install the extension
      run: |
        set -eux
        python -m pip install "jupyterlab==4.1.0b0" jupyter_iam*.whl

    - name: Install dependencies
      working-directory: ui-tests
      env:
        PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1
      run: jlpm install

    - name: Set up browser cache
      uses: actions/cache@v2
      with:
        path: |
          ${{ github.workspace }}/pw-browsers
        key: ${{ runner.os }}-${{ hashFiles('ui-tests/yarn.lock') }}

    - name: Install browser
      run: jlpm playwright install chromium
      working-directory: ui-tests

    - name: Execute integration tests
      working-directory: ui-tests
      run: |
        jlpm playwright test

    - name: Upload Playwright Test report
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: jupyter_iam-playwright-tests
        path: |
          ui-tests/test-results
          ui-tests/playwright-report

  check_links:
    name: Check Links
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v2
      - uses: jupyterlab/maintainer-tools/.github/actions/base-setup@v1
      - uses: jupyterlab/maintainer-tools/.github/actions/check-links@v1
