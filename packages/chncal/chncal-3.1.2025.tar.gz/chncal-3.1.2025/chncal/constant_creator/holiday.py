# -*- coding: utf-8 -*-

from __future__ import absolute_import, unicode_literals

import datetime

try:
    from ..utils import get_file_path, load_yml, trans_date
except:
    from chncal.utils import get_file_path, load_yml, trans_date


constants_template = """# -*- coding: utf-8 -*-

# this file is generated by:
# chncal.constant_creator.holiday.create_holiday_constant

from __future__ import absolute_import, unicode_literals

"""

holiday_str = """import datetime
from enum import Enum


class Holiday(Enum):
    
    def __new__(cls, english, chinese, days):        
        obj = object.__new__(cls)
        obj._value_ = english

        obj.chinese = chinese
        obj.days = days
        
        return obj

    # 常规假期天数
    new_years_day = "New Year's Day", '元旦', 1
    spring_festival = 'Spring Festival', '春节', 3
    tomb_sweeping_day = 'Tomb-sweeping Day', '清明', 1
    labour_day = 'Labour Day', '劳动节', 1
    dragon_boat_festival = 'Dragon Boat Festival', '端午', 1
    national_day = 'National Day', '国庆节', 3
    mid_autumn_festival = 'Mid-autumn Festival', '中秋', 1

    # special holidays
    anti_fascist_70th_day = 'Anti-Fascist 70th Day', '中国人民抗日战争暨世界反法西斯战争胜利70周年纪念日', 1


holidays = {}

workdays = {}
"""

constants_template = constants_template + holiday_str

Holiday = None
exec(holiday_str)


class HolidayArr(object):
    """假期安排数据"""
    
    WORKDAY = 1
    HOLIDAY = 2

    def __init__(self):
        self.holidays = {}
        self.workdays = {}

        self.year = None
        self.date = None
        self.holiday = None
        self.day_type = None
        
        self.load_data()

    def nyd(self):
        """元旦 New Year's Day"""
        return self.mark(Holiday.new_years_day)

    def sf(self):
        """春节 Sprint Festival"""
        return self.mark(Holiday.spring_festival)

    def tsd(self):
        """清明节 Tomb-Sweeping Day"""
        return self.mark(Holiday.tomb_sweeping_day)

    def ld(self):
        """劳动节 Labour Day"""
        return self.mark(Holiday.labour_day)

    def dbf(self):
        """端午节 Dragon Boat Festival"""
        return self.mark(Holiday.dragon_boat_festival)

    def nd(self):
        """国庆节 National Day"""
        return self.mark(Holiday.national_day)

    def maf(self):
        """中秋节 Mid-autumn Festival"""
        return self.mark(Holiday.mid_autumn_festival)

    def afd(self):
        """中国人民抗日战争暨世界反法西斯战争胜利70周年纪念日 Anti-Fascist 70th Day"""
        return self.mark(Holiday.anti_fascist_70th_day)
    
    def mark(self, holiday):
        self.holiday = holiday
        return self
            
    def year_at(self, year):
        self.year = year
        return self
    
    def save(self, date, day_type):
        date = trans_date(date)
        if not self.year:
            raise ValueError('should set year before saving holiday')
        if not self.holiday:
            raise ValueError('should set holiday before saving holiday')
        self.day_type = day_type
        self.days[date] = self.holiday
        self.date = date
        return self

    def to(self, date):
        if not (self.year and self.date):
            raise ValueError('should set year&date before saving holiday range')
        start_date = self.date
        end_date = trans_date(date)
        if end_date <= start_date:
            raise ValueError('end date should be after start date')
        for i in range((end_date - start_date).days):
            the_date = start_date + datetime.timedelta(days=i + 1)
            self.days[the_date] = self.holiday
        return self

    def work(self, date):
        return self.save(date, self.WORKDAY)

    def rest(self, date):
        return self.save(date, self.HOLIDAY)

    @property
    def days(self):
        mapping = {self.HOLIDAY: self.holidays, self.WORKDAY: self.workdays}
        return mapping[self.day_type]
    
    def load_data(self):
        data = load_yml(get_file_path('holiday.yml', 'data'))
        for year in data:
            exec('self.year_at({})'.format(year))
            for name, arr in data[year]['holidays'].items():
                exec('self.{}()'.format(name))
                for key, value in arr.items():
                    if len(value) == 3 and value[1] == 'to':
                        cmdstr = 'self.{}({}).to({})'.format(key, value[0], value[2])
                    else:
                        cmdstr = 'self.' + '.'.join(['{}({})'.format(key, v) for v in value])
                    exec(cmdstr)
    
    
def _get_lines(days: dict):
    yield '{'
    line = '    datetime.date(year={}, month={}, day={}): {}.value,'
    for date in sorted(days.keys()):
        yield line.format(date.year, date.month, date.day, days[date])
    yield '}'


def create_holiday_constant():
    holiday_arr = HolidayArr()
    file_content = constants_template.format(
        '\n'.join(_get_lines(holiday_arr.holidays)),
        '\n'.join(_get_lines(holiday_arr.workdays))
    )
    file_path = get_file_path('holiday.py')
    with open(file_path, 'wb') as f:
        f.write(file_content.encode('utf-8'))


if __name__ == '__main__':
    create_holiday_constant()
