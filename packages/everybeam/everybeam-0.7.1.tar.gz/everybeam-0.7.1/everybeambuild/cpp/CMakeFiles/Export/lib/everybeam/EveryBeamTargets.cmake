# Generated by CMake

if("${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}" LESS 2.5)
   message(FATAL_ERROR "CMake >= 2.6.0 required")
endif()
cmake_policy(PUSH)
cmake_policy(VERSION 2.6...3.18)
#----------------------------------------------------------------
# Generated CMake target import file.
#----------------------------------------------------------------

# Commands may need to know the format version.
set(CMAKE_IMPORT_FILE_VERSION 1)

# Protect against multiple inclusion, which would fail when already imported targets are added once more.
set(_targetsDefined)
set(_targetsNotDefined)
set(_expectedTargets)
foreach(_expectedTarget EveryBeam::everybeam EveryBeam::everybeam-core EveryBeam::hamaker EveryBeam::oskar EveryBeam::skamidbeam)
  list(APPEND _expectedTargets ${_expectedTarget})
  if(NOT TARGET ${_expectedTarget})
    list(APPEND _targetsNotDefined ${_expectedTarget})
  endif()
  if(TARGET ${_expectedTarget})
    list(APPEND _targetsDefined ${_expectedTarget})
  endif()
endforeach()
if("${_targetsDefined}" STREQUAL "${_expectedTargets}")
  unset(_targetsDefined)
  unset(_targetsNotDefined)
  unset(_expectedTargets)
  set(CMAKE_IMPORT_FILE_VERSION)
  cmake_policy(POP)
  return()
endif()
if(NOT "${_targetsDefined}" STREQUAL "")
  message(FATAL_ERROR "Some (but not all) targets in this export set were already defined.\nTargets Defined: ${_targetsDefined}\nTargets not yet defined: ${_targetsNotDefined}\n")
endif()
unset(_targetsDefined)
unset(_targetsNotDefined)
unset(_expectedTargets)


# Compute the installation prefix relative to this file.
get_filename_component(_IMPORT_PREFIX "${CMAKE_CURRENT_LIST_FILE}" PATH)
get_filename_component(_IMPORT_PREFIX "${_IMPORT_PREFIX}" PATH)
get_filename_component(_IMPORT_PREFIX "${_IMPORT_PREFIX}" PATH)
if(_IMPORT_PREFIX STREQUAL "/")
  set(_IMPORT_PREFIX "")
endif()

# Create imported target EveryBeam::everybeam
add_library(EveryBeam::everybeam SHARED IMPORTED)

set_target_properties(EveryBeam::everybeam PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "/var/software/spack/opt/spack/linux-rocky8-zen2/gcc-9.4.0/casacore-3.4.0-d27cwqno64dyrpjp6v3wu652jkmoz7b4/include"
  INTERFACE_LINK_LIBRARIES "EveryBeam::hamaker;EveryBeam::oskar;EveryBeam::skamidbeam;/var/software/spack/opt/spack/linux-rocky8-zen2/gcc-9.4.0/casacore-3.4.0-d27cwqno64dyrpjp6v3wu652jkmoz7b4/lib/libcasa_ms.so;/var/software/spack/opt/spack/linux-rocky8-zen2/gcc-9.4.0/casacore-3.4.0-d27cwqno64dyrpjp6v3wu652jkmoz7b4/lib/libcasa_fits.so;/var/software/spack/opt/spack/linux-rocky8-zen2/gcc-9.4.0/cfitsio-3.49-oim4gsfpaxlyfauz3p6cwyglgyrdntvo/lib/libcfitsio.so;/usr/lib64/libm.so;/var/software/spack/opt/spack/linux-rocky8-zen2/gcc-9.4.0/casacore-3.4.0-d27cwqno64dyrpjp6v3wu652jkmoz7b4/lib/libcasa_scimath.so;/var/software/spack/opt/spack/linux-rocky8-zen2/gcc-9.4.0/casacore-3.4.0-d27cwqno64dyrpjp6v3wu652jkmoz7b4/lib/libcasa_measures.so;/var/software/spack/opt/spack/linux-rocky8-zen2/gcc-9.4.0/casacore-3.4.0-d27cwqno64dyrpjp6v3wu652jkmoz7b4/lib/libcasa_scimath_f.so;/var/software/spack/opt/spack/linux-rocky8-zen2/gcc-9.4.0/openblas-0.3.24-4gysi6pgs43u63olhaqltlislalgkyos/lib/libopenblas.so;-lpthread;-lm;-ldl;/var/software/spack/opt/spack/linux-rocky8-zen2/gcc-9.4.0/casacore-3.4.0-d27cwqno64dyrpjp6v3wu652jkmoz7b4/lib/libcasa_tables.so;/var/software/spack/opt/spack/linux-rocky8-zen2/gcc-9.4.0/casacore-3.4.0-d27cwqno64dyrpjp6v3wu652jkmoz7b4/lib/libcasa_casa.so;hdf5-shared;/usr/lib64/libm.so;dl;hdf5_cpp-shared;/var/software/spack/opt/spack/linux-rocky8-zen2/gcc-9.4.0/fftw-3.3.10-i7ayzqg24e5nm7booudmxf2rds4m4bpr/lib/libfftw3f.so;/var/software/spack/opt/spack/linux-rocky8-zen2/gcc-9.4.0/cfitsio-3.49-oim4gsfpaxlyfauz3p6cwyglgyrdntvo/lib/libcfitsio.so"
)

# Create imported target EveryBeam::everybeam-core
add_library(EveryBeam::everybeam-core SHARED IMPORTED)

# Create imported target EveryBeam::hamaker
add_library(EveryBeam::hamaker SHARED IMPORTED)

set_target_properties(EveryBeam::hamaker PROPERTIES
  INTERFACE_LINK_LIBRARIES "hdf5_cpp-shared;EveryBeam::everybeam-core"
)

# Create imported target EveryBeam::oskar
add_library(EveryBeam::oskar SHARED IMPORTED)

set_target_properties(EveryBeam::oskar PROPERTIES
  INTERFACE_LINK_LIBRARIES "hdf5-shared;hdf5_cpp-shared;-fopenmp;EveryBeam::everybeam-core"
)

# Create imported target EveryBeam::skamidbeam
add_library(EveryBeam::skamidbeam SHARED IMPORTED)

if(CMAKE_VERSION VERSION_LESS 2.8.12)
  message(FATAL_ERROR "This file relies on consumers using CMake 2.8.12 or greater.")
endif()

# Load information for each installed configuration.
get_filename_component(_DIR "${CMAKE_CURRENT_LIST_FILE}" PATH)
file(GLOB CONFIG_FILES "${_DIR}/EveryBeamTargets-*.cmake")
foreach(f ${CONFIG_FILES})
  include(${f})
endforeach()

# Cleanup temporary variables.
set(_IMPORT_PREFIX)

# Loop over all imported files and verify that they actually exist
foreach(target ${_IMPORT_CHECK_TARGETS} )
  foreach(file ${_IMPORT_CHECK_FILES_FOR_${target}} )
    if(NOT EXISTS "${file}" )
      message(FATAL_ERROR "The imported target \"${target}\" references the file
   \"${file}\"
but this file does not exist.  Possible reasons include:
* The file was deleted, renamed, or moved to another location.
* An install or uninstall procedure did not complete successfully.
* The installation package was faulty and contained
   \"${CMAKE_CURRENT_LIST_FILE}\"
but not all the files it references.
")
    endif()
  endforeach()
  unset(_IMPORT_CHECK_FILES_FOR_${target})
endforeach()
unset(_IMPORT_CHECK_TARGETS)

# This file does not depend on other imported targets which have
# been exported from the same project but in a separate export set.

# Commands beyond this point should not need to know the version.
set(CMAKE_IMPORT_FILE_VERSION)
cmake_policy(POP)
