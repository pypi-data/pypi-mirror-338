"""
Debug script to compare element counts with different exclusion methods.
"""

import os
import sys
from pathlib import Path

# Add parent directory to path for imports
sys.path.insert(0, str(Path(__file__).parent.parent))

from natural_pdf import PDF


def debug_element_counts():
    # Get PDF path - use a default if one isn't specified
    # Look for any PDF in the examples directory or pdfs directory
    example_dir = Path(__file__).parent
    pdf_files = list(example_dir.glob("*.pdf"))
    
    if not pdf_files:
        pdfs_dir = example_dir.parent / "pdfs"
        if pdfs_dir.exists():
            pdf_files = list(pdfs_dir.glob("*.pdf"))
    
    if pdf_files:
        pdf_path = str(pdf_files[0])
    else:
        print("No PDF file found.")
        sys.exit(1)
    
    print(f"Using PDF: {pdf_path}")

    # Case 1: Direct page-level exclusion
    print("\n=== Case 1: Direct page-level exclusion ===")
    pdf1 = PDF(pdf_path)
    page1 = pdf1.pages[0]
    
    # First count without exclusions
    all_text_no_exclusions = page1.find_all('text')
    print(f"Before exclusion: {len(all_text_no_exclusions)} text elements")
    
    # Count the elements in the region to be excluded
    line1 = page1.find('line')
    region_above = line1.above()
    elements_in_region = page1.find_all('text')
    excluded_count = 0
    for element in elements_in_region:
        if region_above._is_element_in_region(element):
            excluded_count += 1
    print(f"Region above line contains {excluded_count} elements")
    
    # Now add the exclusion and count again
    page1.add_exclusion(region_above)
    all_text_with_exclusion = page1.find_all('text')
    print(f"After direct exclusion: {len(all_text_with_exclusion)} text elements")
    print(f"Elements excluded: {len(all_text_no_exclusions) - len(all_text_with_exclusion)}")

    # Debug the exclusion regions
    exclusion_regions = page1._get_exclusion_regions(include_callable=True)
    print(f"Found {len(exclusion_regions)} exclusion regions")
    for i, region in enumerate(exclusion_regions):
        print(f"  Region {i+1}: top={region.top}, bottom={region.bottom}, x0={region.x0}, x1={region.x1}")
    
    # Case 2: PDF-level exclusion with lambda
    print("\n=== Case 2: PDF-level exclusion with lambda ===")
    pdf2 = PDF(pdf_path)
    
    # Add lambda exclusion at PDF level
    pdf2.add_exclusion(lambda page: page.find('line').above())
    page2 = pdf2.pages[0]
    
    # Count after exclusion
    all_text_with_lambda_exclusion = page2.find_all('text')
    print(f"After PDF-level exclusion: {len(all_text_with_lambda_exclusion)} text elements")
    
    # Debug the exclusion regions
    print("\nExclusion regions from PDF-level lambda:")
    exclusion_regions = page2._get_exclusion_regions(include_callable=True, debug=True)
    print(f"Found {len(exclusion_regions)} exclusion regions")
    for i, region in enumerate(exclusion_regions):
        print(f"  Region {i+1}: top={region.top}, bottom={region.bottom}, x0={region.x0}, x1={region.x1}")
    
    # Compare results
    print("\n=== Comparison ===")
    print(f"Direct page exclusion count: {len(all_text_with_exclusion)}")
    print(f"PDF-level lambda exclusion count: {len(all_text_with_lambda_exclusion)}")
    
    # Examine if the region generated by the lambda is identical to the direct region
    if len(exclusion_regions) > 0:
        direct_region = region_above
        lambda_region = exclusion_regions[0]
        
        print("\nRegion comparison:")
        print(f"Direct region: top={direct_region.top}, bottom={direct_region.bottom}, x0={direct_region.x0}, x1={direct_region.x1}")
        print(f"Lambda region: top={lambda_region.top}, bottom={lambda_region.bottom}, x0={lambda_region.x0}, x1={lambda_region.x1}")
        
        # Check if regions are identical
        regions_identical = (
            direct_region.top == lambda_region.top and
            direct_region.bottom == lambda_region.bottom and
            direct_region.x0 == lambda_region.x0 and
            direct_region.x1 == lambda_region.x1
        )
        print(f"Regions are identical: {regions_identical}")
    
    # Case 3: Modified lambda approach - create a lambda that exactly reproduces the region
    print("\n=== Case 3: Explicit region lambda ===")
    pdf3 = PDF(pdf_path)
    
    # Get the exact coordinates from the first run
    line3 = pdf1.pages[0].find('line')
    region3 = line3.above()
    
    # Create a lambda that returns a fixed region with those coordinates
    def fixed_region_lambda(page):
        return page.create_region(region3.x0, region3.top, region3.x1, region3.bottom)
    
    pdf3.add_exclusion(fixed_region_lambda)
    page3 = pdf3.pages[0]
    
    # Count with this explicit region lambda
    all_text_with_explicit_lambda = page3.find_all('text')
    print(f"With explicit region lambda: {len(all_text_with_explicit_lambda)} text elements")


if __name__ == "__main__":
    debug_element_counts()